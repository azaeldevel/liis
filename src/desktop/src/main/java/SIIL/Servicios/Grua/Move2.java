
package SIIL.Servicios.Grua;

import core.UsoComboBoxModel;
import core.TipoComboBoxModel;
import SIIL.Server.Database;
import SIIL.core.Office;
import static SIIL.servApp.BACKWARD_BD;
import static SIIL.servApp.cred;
import SIIL.services.grua.Captura;
import SIIL.services.grua.Tipo;
import SIIL.services.grua.Uso;
import SIIL.trace.Trace;
import core.FailResultOperationException;
import core.IntegerInputVerifier;
import core.OfficeComboBoxModel;
import core.PlainTitem;
import database.mysql.sales.Remision;
import database.mysql.stock.Titem;
import java.awt.Color;
import java.io.IOException;
import java.security.InvalidParameterException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.jdesktop.swingx.JXDialog;
import org.xml.sax.SAXException;
import stock.Flow;

/**
 *
 * @author Azael Reyes
 */
public class Move2 extends javax.swing.JPanel 
{
    private SIIL.Server.Company comp;
    private Captura captura;
    private JInternalFrame internalFrame;
    private Database dbserver;
    private Remision sa;
    
    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }
    
    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed())dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        }
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    /**
     * 
     */
    public Move2(JInternalFrame internalFrame) 
    {
        initComponents();  
        opgOwner.add(opSIIL);
        opgOwner.add(opClient);
        this.internalFrame = internalFrame;
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        }
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        TipoComboBoxModel tipoModel = (TipoComboBoxModel) cbtmov.getModel();
        UsoComboBoxModel usoModel = (UsoComboBoxModel) cbusomov.getModel();
        OfficeComboBoxModel officeModel = (OfficeComboBoxModel) cbSuc.getModel();
        try 
        {
            tipoModel.fill(dbserver);
            usoModel.fill(dbserver);
            officeModel.fill(dbserver);
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(getName()).log(Level.SEVERE, null, ex);
        }
        //captura = new Captura();
        dbserver.close();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnMain = new javax.swing.JPopupMenu();
        mnAddEquipo = new javax.swing.JMenuItem();
        mnHoro = new javax.swing.JMenuItem();
        mnDelete = new javax.swing.JMenuItem();
        opgOwner = new javax.swing.ButtonGroup();
        btGuardar = new javax.swing.JButton();
        lbClient = new javax.swing.JLabel();
        Propietario = new javax.swing.JLabel();
        opClient = new javax.swing.JRadioButton();
        fecha = new org.jdesktop.swingx.JXDatePicker();
        jLabel4 = new javax.swing.JLabel();
        btClient = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txfirma = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txClient = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        opSIIL = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbtmov = new javax.swing.JComboBox();
        cbusomov = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaNota = new javax.swing.JTextArea();
        cbSuc = new javax.swing.JComboBox();
        txFolio = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbList = new org.jdesktop.swingx.JXTable();
        chResumov = new javax.swing.JCheckBox();
        txSA = new javax.swing.JTextField();
        lbSA = new javax.swing.JLabel();

        mnAddEquipo.setText("Agregar Equipo");
        mnAddEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnAddEquipoActionPerformed(evt);
            }
        });
        mnMain.add(mnAddEquipo);

        mnHoro.setText("Horometro");
        mnHoro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnHoroActionPerformed(evt);
            }
        });
        mnMain.add(mnHoro);

        mnDelete.setText("Eliminar");
        mnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDeleteActionPerformed(evt);
            }
        });
        mnMain.add(mnDelete);

        btGuardar.setText("Guardar");
        btGuardar.setToolTipText("Guardar");
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        lbClient.setText("##");

        Propietario.setText("Propietario");

        opClient.setText("Cliente");
        opClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opClientActionPerformed(evt);
            }
        });

        fecha.setEnabled(false);
        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        jLabel4.setText("Uso");

        btClient.setText("...");
        btClient.setEnabled(false);
        btClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClientActionPerformed(evt);
            }
        });

        jLabel7.setText("Nombre Firma");

        txfirma.setEnabled(false);
        txfirma.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfirmaFocusLost(evt);
            }
        });

        jLabel8.setText("Nota");

        jLabel6.setText("Cliente");

        txClient.setEnabled(false);
        txClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txClientActionPerformed(evt);
            }
        });
        txClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txClientKeyReleased(evt);
            }
        });

        jLabel1.setText("No. de Movimiento");

        opSIIL.setText("SIIL");
        opSIIL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opSIILActionPerformed(evt);
            }
        });

        jLabel12.setText("Sucursal");

        jLabel2.setText("Fecha");

        jLabel3.setText("Tipo");

        cbtmov.setModel(new TipoComboBoxModel());
        cbtmov.setEnabled(false);
        cbtmov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbtmovActionPerformed(evt);
            }
        });

        cbusomov.setModel(new UsoComboBoxModel());
        cbusomov.setEnabled(false);
        cbusomov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbusomovActionPerformed(evt);
            }
        });

        txaNota.setColumns(20);
        txaNota.setRows(5);
        jScrollPane1.setViewportView(txaNota);

        cbSuc.setModel(new OfficeComboBoxModel());
        cbSuc.setEnabled(false);
        cbSuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSucActionPerformed(evt);
            }
        });

        txFolio.setEnabled(false);
        txFolio.setInputVerifier(new IntegerInputVerifier(false));
        txFolio.setToolTipText("");
        txFolio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txFolioFocusLost(evt);
            }
        });

        tbList.setModel(new HequisTableModel<Object>(new Object()));
        tbList.setComponentPopupMenu(mnMain);
        jScrollPane3.setViewportView(tbList);

        chResumov.setSelected(true);
        chResumov.setText("Agregar a Hoja de Renta");

        txSA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txSAKeyPressed(evt);
            }
        });

        lbSA.setText("SA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btGuardar)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGap(93, 93, 93)
                                                    .addComponent(opClient, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(opSIIL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(Propietario))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbtmov, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cbusomov, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(25, 25, 25))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(53, 53, 53)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(chResumov)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(27, 27, 27))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txClient, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btClient, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txfirma)
                                    .addComponent(cbSuc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(13, 13, 13)
                                .addComponent(lbClient, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(lbSA)
                                .addGap(40, 40, 40)
                                .addComponent(txSA, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Propietario)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(opSIIL)
                            .addComponent(opClient)
                            .addComponent(jLabel8))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(cbtmov, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cbusomov, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chResumov))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btClient)
                        .addComponent(lbClient))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txfirma))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(cbSuc, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSA)
                    .addComponent(txSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btGuardar)
                .addGap(55, 55, 55))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
        openDatabase(true);
        captura.setNote(txaNota.getText(),true,chResumov.isSelected());
        Boolean ret = false;
        try 
        {
            Trace contexTrace = new Trace(BACKWARD_BD, cred.getUser(), "Movimiento de Grua " + captura.getFolio());
            ret = captura.create(dbserver, contexTrace,cred.getOffice());            
        }
        catch(InvalidParameterException | FailResultOperationException | SQLException ex)
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            closeDatabase();
        }
        
        if(ret)
        {
            try 
            {
                dbserver.commit();                
                JOptionPane.showMessageDialog(this,
                "Operacion completada satifactoriamente",
                "Confirmación",
                JOptionPane.INFORMATION_MESSAGE
                );
                if(internalFrame != null) internalFrame.dispose();
            }
            catch (SQLException ex) 
            {
                Logger.getLogger(Move2.class.getName()).log(Level.SEVERE, null, ex);                
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
            }
            catch (SQLException ex) 
            {
                Logger.getLogger(Move2.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btGuardarActionPerformed

    private void btClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClientActionPerformed
        comp = new SIIL.Server.Company();
        JFrame frm = new JFrame();
        JDialog dlg = new JDialog(frm,"Seleccionar cliente",true);
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        SIIL.Clientes.ReadSelect read = new SIIL.Clientes.ReadSelect(comp,SIIL.servApp.cred.getBD());
        dlg.setContentPane(read);
        dlg.setSize(460, 260);
        dlg.setVisible(true);
        txClient.setText(comp.getNumber());
        lbClient.setText(comp.getName());
        comp.complete(dbserver);
        captura.setCompany(comp);
        dbserver.close();
    }//GEN-LAST:event_btClientActionPerformed

    private void txClientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txClientKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            comp = new SIIL.Server.Company();
            comp.setBD(SIIL.servApp.cred.getBD());
            comp.setNumber(txClient.getText());
            
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                dbserver = new Database(serverConfig);
            } 
            catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
            {
                JOptionPane.showMessageDialog(this,ex.getMessage(),"Error Interno",JOptionPane.ERROR_MESSAGE);
            }
            if(comp.complete(dbserver))
            {
                lbClient.setText(comp.getName());
            }
            else
            {
                if(comp == null)
                {
                    JOptionPane.showMessageDialog(this, "Numero de cliente desconocido",
                        "Error externo", JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    comp = null;
                    lbClient.setText("###");
                }
            }
            captura.setCompany(comp);
            dbserver.close();
        }
    }//GEN-LAST:event_txClientKeyReleased

    private void cbtmovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbtmovActionPerformed
        if(cbtmov.getSelectedIndex() == 4)
        {
            cbusomov.setEnabled(false);
            txSA.setEnabled(false);
            txClient.setEnabled(false);
            btClient.setEnabled(false);
        }
        else if(cbtmov.getSelectedIndex() == 5)
        {
            cbusomov.setEnabled(false);
            txSA.setEnabled(false);
            txClient.setEnabled(false);
            btClient.setEnabled(false);
            txfirma.setEnabled(false);
            //cbSuc.setEnabled(false);
            txClient.setEnabled(false);
            opClient.setEnabled(false);
            opSIIL.setEnabled(false);
        }
        else
        {
            cbusomov.setEnabled(true);
            txSA.setEnabled(true);
            txClient.setEnabled(true);
            btClient.setEnabled(true);
            txfirma.setEnabled(true);
            cbSuc.setEnabled(true);
            txClient.setEnabled(true);
            opClient.setEnabled(true);
            opSIIL.setEnabled(true);
        }
        
        if(cbtmov.getSelectedIndex() > 0)captura.setTipo((Tipo) cbtmov.getSelectedItem());
        
    }//GEN-LAST:event_cbtmovActionPerformed

    private void cbusomovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbusomovActionPerformed
        if( cbtmov.getSelectedIndex() == 3 && cbusomov.getSelectedIndex() == 7 && opSIIL.isSelected() )
        {
            txClient.setEnabled(false);
            lbClient.setEnabled(false);
            btClient.setEnabled(false);
        }
        else
        {
            txClient.setEnabled(true);
            lbClient.setEnabled(true);
            btClient.setEnabled(true);
        }
        
        if(cbusomov.getSelectedIndex() > 0) captura.setUso((Uso) cbusomov.getSelectedItem());
    }//GEN-LAST:event_cbusomovActionPerformed

    private void mnAddEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnAddEquipoActionPerformed
        HequisTableModel model = null;
        if(opSIIL.isSelected())
        {
            stock.SearchHequi srh = new stock.SearchHequi(stock.SearchHequiTableModel.Mode.SelectTitem);        
            
            core.Dialog dlg = new core.Dialog(srh);
            dlg.setContent(srh);
            
            Flow[] flowGetting = srh.getSelection();  
            if(flowGetting == null)
            {
                return;
            }
            else if(flowGetting.length == 1)
            {
                model = (HequisTableModel<Flow>) tbList.getModel();
                //checar si ha seleccionado un montacargas 
                if(tbList.getSelectedRow() > -1)
                {
                    Flow flowSelecting = (Flow) model.getValueAt(tbList.getSelectedRow());      
                    SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
                    Database dbserver = null;
                    try 
                    {
                        serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                        dbserver = new Database(serverConfig);
                    } 
                    catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
                    {
                        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
                    }

                    try 
                    {
                    int countRef = 0;
                    countRef = SIIL.services.grua.Resumov.counterRefences(dbserver,flowGetting[0]);
                    if(countRef > 0)
                    {
                            int option = JOptionPane.showConfirmDialog(
                            this,
                            "El equipo '" + flowGetting[0].getItem().getNumber() + "' tiene " + countRef + " refencias en la Hoaj de renta. ¿Desea agregarlo en el movimiento?",
                            "Confirme operación",
                            JOptionPane.YES_NO_OPTION);
                            if(option != JOptionPane.YES_OPTION)
                            {
                                return;
                            }
                    }
                        if(SIIL.services.grua.Forklift.isForklift(dbserver, (Titem) flowSelecting.getItem()))
                        {//entonces asignar como aditamento                                
                                SIIL.services.grua.Forklift forklift = (SIIL.services.grua.Forklift)flowSelecting.getItem();
                                if(SIIL.services.grua.Battery.isBattery(dbserver, (Titem) flowGetting[0].getItem()))
                                {
                                    forklift.battery = (SIIL.services.grua.Battery) flowGetting[0].getItem();
                                }
                                else if(SIIL.services.grua.Charger.isCharger(dbserver, (Titem) flowGetting[0].getItem()))
                                {
                                    forklift.charger = (SIIL.services.grua.Charger) flowGetting[0].getItem();
                                }
                                else if(SIIL.services.grua.Mina.isMina(dbserver, (Titem) flowGetting[0].getItem()))
                                {
                                    forklift.mina = (SIIL.services.grua.Mina) flowGetting[0].getItem();
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(this,
                                        "Aditamento desconocido '" + flowGetting[0].getItem().getNumber() + "'",
                                        "Error Interno",
                                        JOptionPane.ERROR_MESSAGE
                                    );
                                }
                                model.reload();
                                return;
                        }
                        } 
                        catch (SQLException ex) 
                        {
                            JOptionPane.showMessageDialog(this,
                                        ex.getMessage(),
                                        "Error Interno",
                                        JOptionPane.ERROR_MESSAGE
                            );
                            return;
                        }

                    }
                    model.add(flowGetting[0]);
                    captura.setHequis(model.getList());
            }
            else if(flowGetting.length != 1)
            {
                JOptionPane.showMessageDialog(this,
                    "Seleecione un equipo para continuar",
                    "Error Externo",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
        }
        else if(opClient.isSelected())
        {
            model = (HequisTableModel<PlainTitem>)tbList.getModel();  
            PlaintTitemCapture plain = new PlaintTitemCapture();
            JXDialog dlgX = new JXDialog(plain);
            plain.setDialog(dlgX);
            dlgX.setContentPane(plain);
            dlgX.setSize(plain.getPreferredSize());
            dlgX.setModal(true);
            dlgX.setVisible(true);
            PlainTitem titem = plain.getTitem();
            if(titem != null)
            {
                model.add(titem);
                captura.setHequis(model.getList());    
            }
        }
    }//GEN-LAST:event_mnAddEquipoActionPerformed

    private void opClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opClientActionPerformed
        cleanControls();
        captura = new Captura<PlainTitem>();
        tbList.setModel(new HequisTableModel<PlainTitem>(new PlainTitem()));
        captura.setOwner(Captura.Owner.CLIENT);
        activeControls();
    }//GEN-LAST:event_opClientActionPerformed

    private void opSIILActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opSIILActionPerformed
        cleanControls();
        captura = new Captura<Flow>();
        tbList.setModel(new HequisTableModel<Flow>(new Flow(-1)));
        captura.setOwner(Captura.Owner.SIIL);
        activeControls();
    }//GEN-LAST:event_opSIILActionPerformed

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaActionPerformed
        captura.setFecha(fecha.getDate());
    }//GEN-LAST:event_fechaActionPerformed

    private void cbSucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSucActionPerformed
        if(cbSuc.getSelectedIndex() > 0)captura.setOficina((Office) cbSuc.getSelectedItem());
    }//GEN-LAST:event_cbSucActionPerformed

    private void txFolioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txFolioFocusLost
        captura.setFolio(txFolio.getText());
    }//GEN-LAST:event_txFolioFocusLost

    private void txfirmaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfirmaFocusLost
        captura.setFirma(txfirma.getText());
    }//GEN-LAST:event_txfirmaFocusLost

    private void mnHoroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnHoroActionPerformed
        if(tbList.getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                    "Seleccione un registro primero",
                    "Error Externo",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        String strhoro = (String)JOptionPane.showInputDialog(
            this,
            "Horometro",
            "Captura de Horometro",
            JOptionPane.PLAIN_MESSAGE,
            null,
            null,
        "");    
        if(!strhoro.matches("^[0-9]+$"))
        {
            JOptionPane.showMessageDialog(this,
                "Solo se asegno un numero entero como horometro.",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        HequisTableModel model = null;
        if(opSIIL.isSelected())
        {
            model = (HequisTableModel<Flow>) tbList.getModel();
            Flow flow = (Flow) model.getValueAt(tbList.getSelectedRow());                        
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                dbserver = new Database(serverConfig);
            } 
            catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
            {
                Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
            }
        
            boolean flT = false;
            try 
            {
                flT = SIIL.services.grua.Forklift.isForklift(dbserver, (Titem) flow.getItem());
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(Move2.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(flT)
            {
                SIIL.services.grua.Forklift forklift = (SIIL.services.grua.Forklift) flow.getItem();
                forklift.horometro = Integer.valueOf(strhoro);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,
                    "Horometro para montacargas de clientes esta en desarrollo",
                    "En desarrollo",
                    JOptionPane.WARNING_MESSAGE
            );
            return;
        }
    }//GEN-LAST:event_mnHoroActionPerformed

    private void mnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDeleteActionPerformed
        if(tbList.getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                    "Seleccione un registro primero",
                    "Error Externo",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        HequisTableModel model = null;
        int option ;
        if(opSIIL.isSelected())
        {
            model = (HequisTableModel<Flow>) tbList.getModel();
            Flow  flow = (Flow) model.getValueAt(tbList.getSelectedRow());            
            option = JOptionPane.showConfirmDialog(
            this,
            "El equipo" + flow.getItem().getNumber() + "' va s ser eliminado, ¿Desea continuar la operación?",
            "Confirmación de operación",
            JOptionPane.YES_NO_OPTION);
            if(option == JOptionPane.YES_OPTION)
            {
                model.delete(tbList.getSelectedRow());
            }
        }
        else if(opSIIL.isSelected())
        {
            model = (HequisTableModel<PlainTitem>) tbList.getModel();
            PlainTitem  plain = (PlainTitem) model.getValueAt(tbList.getSelectedRow());            
            option = JOptionPane.showConfirmDialog(
            this,
            "El equipo " + plain.serie + "' va s ser eliminado, ¿Desea continuar la operación?",
            "Confirmación de operación",
            JOptionPane.YES_NO_OPTION);
            if(option == JOptionPane.YES_OPTION)
            {
                model.delete(tbList.getSelectedRow());
            }
        }
        
    }//GEN-LAST:event_mnDeleteActionPerformed

    private void txSAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSAKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            java.util.List<Remision> ls = null;            
            try
            {
                openDatabase(true);
                Office office = null;
                if(cbSuc.getSelectedIndex() < 1)
                {
                    JOptionPane.showMessageDialog(this,
                        "Seleccione la sucursal primero",
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                    );
                    txSA.setBackground(Color.red);
                    return;
                }
                else
                {
                    office = (Office) cbSuc.getSelectedItem();
                }
                ls = Remision.search(dbserver,office,txSA.getText(),3);
                if(ls.size() == 1)
                {
                    sa = ls.get(0);
                    sa.downFolio(dbserver);
                    sa.downSerie(dbserver);
                    txSA.setText(sa.getFullFolio());
                    txSA.setBackground(Color.white);
                    captura.setSA(sa);
                }
                else if(txSA.getText().length() == 0)
                {
                    sa = null;
                    captura.setSA(null);
                }
                else if(ls.size() < 1)
                {
                    sa = Remision.fromCN(dbserver,office,txSA.getText(),SIIL.servApp.cred.getUser());
                    if(sa != null)
                    {
                        sa.downFolio(dbserver);
                        sa.downSerie(dbserver);
                        txSA.setText(sa.getFullFolio());
                        txSA.setBackground(Color.white);
                        captura.setSA(sa);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,
                            "No se hay coincidencia en Tools ni en CN60 para el folio '" + txSA.getText() + "'",
                            "Error Interno",
                            JOptionPane.ERROR_MESSAGE
                        );
                        txSA.setBackground(Color.red);                        
                    }
                }
                else if(ls.size() > 1)
                {
                    JOptionPane.showMessageDialog(this,
                        "Hay " + ls.size() + " coincidencias",
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                    );
                    txSA.setBackground(Color.red);
                    return;
                }
            }
            catch (ParseException | IOException | SQLException ex)
            {
                //Logger.getLogger(Create.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                txSA.setBackground(Color.red);
            }
        }
    }//GEN-LAST:event_txSAKeyPressed

    private void txClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txClientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Propietario;
    private javax.swing.JButton btClient;
    private javax.swing.JButton btGuardar;
    private javax.swing.JComboBox cbSuc;
    private javax.swing.JComboBox cbtmov;
    private javax.swing.JComboBox cbusomov;
    private javax.swing.JCheckBox chResumov;
    private org.jdesktop.swingx.JXDatePicker fecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbClient;
    private javax.swing.JLabel lbSA;
    private javax.swing.JMenuItem mnAddEquipo;
    private javax.swing.JMenuItem mnDelete;
    private javax.swing.JMenuItem mnHoro;
    private javax.swing.JPopupMenu mnMain;
    private javax.swing.JRadioButton opClient;
    private javax.swing.JRadioButton opSIIL;
    private javax.swing.ButtonGroup opgOwner;
    private org.jdesktop.swingx.JXTable tbList;
    private javax.swing.JTextField txClient;
    private javax.swing.JTextField txFolio;
    private javax.swing.JTextField txSA;
    private javax.swing.JTextArea txaNota;
    private javax.swing.JTextField txfirma;
    // End of variables declaration//GEN-END:variables

    private void cleanControls() 
    {
        cbtmov.setSelectedIndex(0);
        cbusomov.setSelectedIndex(0);
        cbSuc.setSelectedIndex(0);
        txClient.setText("");
        lbClient.setText("");
        comp = null;
        txFolio.setText("");
        txSA.setText("");
        txaNota.setText("");
        txfirma.setText("");
        fecha.setDate(null);
    }
    private void activeControls() 
    {
        cbtmov.setEnabled(true);
        cbusomov.setEnabled(true);
        cbSuc.setEnabled(true);
        txClient.setEnabled(true);
        lbClient.setEnabled(true);
        txFolio.setEnabled(true);
        txSA.setEnabled(true);
        txaNota.setEnabled(true);
        txfirma.setEnabled(true);
        fecha.setEnabled(true);
    }    
}
