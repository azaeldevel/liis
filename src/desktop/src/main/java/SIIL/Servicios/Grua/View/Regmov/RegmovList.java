
package SIIL.Servicios.Grua.View.Regmov;


import SIIL.Server.MySQL;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import jxl.Workbook;
import jxl.format.Colour;
import jxl.write.WritableCell;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael
 */
public class RegmovList extends javax.swing.JInternalFrame 
{

    /**
     * Creates new form RegmovList
     */
    public RegmovList(String bd,javax.swing.JDesktopPane dp) 
    {
        initComponents();
        reloadTable();
        desktopPane = dp;
        BD = bd;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jLabel1 = new javax.swing.JLabel();
        txSearch = new javax.swing.JTextField();
        txLength = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btSearch = new javax.swing.JButton();
        mnMain = new javax.swing.JMenuBar();
        mnMainExport = new javax.swing.JMenu();
        mnMainExportExcel = new javax.swing.JMenuItem();

        jScrollPane2.setViewportView(jXTable1);

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Hoja de Movimientos");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setText("Busqueda");

        txSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txSearchKeyReleased(evt);
            }
        });

        txLength.setText("100");
        txLength.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txLengthKeyReleased(evt);
            }
        });

        jLabel2.setText("cant.");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folio", "Fecha", "Tipo", "Uso", "S.A.", "No. Cliente", "Cliente", "Firma", "Num. Eco.", "Marca", "Modelo", "Serie", "Horomero", "Nota"
            }
        ));
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        btSearch.setText("...");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        mnMainExport.setText("Exportar");

        mnMainExportExcel.setText("Excel");
        mnMainExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMainExportExcelActionPerformed(evt);
            }
        });
        mnMainExport.add(mnMainExportExcel);

        mnMain.add(mnMainExport);

        setJMenuBar(mnMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(btSearch))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txLengthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txLengthKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            reloadTable();
        }
    }//GEN-LAST:event_txLengthKeyReleased

    private void txSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSearchKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            reloadTable();
        }
    }//GEN-LAST:event_txSearchKeyReleased

    private void mnMainExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMainExportExcelActionPerformed
    MySQL conn = new MySQL();
    conn.Create();
        if(conn.getConnection() == null)
        {
            JOptionPane.showMessageDialog(this,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
    try 
    {
        final JFileChooser fc = new JFileChooser();

        //In response to a button click:
        String inputFile;
        //fc.setCurrentDirectory(new File("C:\\Users\\areyes\\Proyectos\\trunk\\src\\Cobranza"));
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            if(fc.getSelectedFile().getAbsolutePath().endsWith("xls"))
            {
                inputFile = fc.getSelectedFile().getAbsolutePath();
            }
            else
            {
                inputFile = fc.getSelectedFile().getAbsolutePath() + ".xls";
            }           
        }
        else
        {
            return ;
        }
        
        WritableWorkbook workbook = Workbook.createWorkbook(new File(inputFile));
        WritableSheet sheet = workbook.createSheet("Page1", 0);
  
        String Header[] = new String[14];
        Header[0] = "Num. Mov.";
        Header[1] = "Fecha Mov.";
        Header[2] = "Tipo";
        Header[3] = "Uso";
        Header[4] = "SA";
        Header[5] = "No. Cte.";
        Header[6] = "Cte.";
        Header[7] = "Nombre Firma";
        Header[8] = "No. Eco.";
        Header[9] = "Marca";
        Header[10] = "Modelo";
        Header[11] = "Serie";
        Header[12] = "Horometro";
        Header[13] = "Observaciones";
        
        //Setting Background colour for Cells
        Colour bckcolor = Colour.GRAY_25;
        WritableCellFormat cellFormat = new WritableCellFormat();
        cellFormat.setBackground(bckcolor);
 
        //Setting Colour & Font for the Text
        WritableFont font = new WritableFont(WritableFont.ARIAL);
        font.setColour(Colour.BLACK);
        cellFormat.setFont(font);
            
        // Write the Header to the excel file
        for (int i = 0; i < Header.length; i++) 
        {
            jxl.write.Label label = new jxl.write.Label(i, 0, Header[i]);
            sheet.addCell(label);
            WritableCell cell = sheet.getWritableCell(i, 0);
            cell.setCellFormat(cellFormat);
        }
            
        
        String sql = "SELECT folio,DATE_FORMAT(fhmov,'%d/%m/%Y') as fhmov,tmov,uso,sa,compNumber,compName,firma,numeco,marca,modelo,serie,horometro,note FROM Movements_Resolved";
        if( getRestric().length()>0)
        {
            sql = sql + " WHERE " + getRestric();
        }
        Statement tsmt = null;        
        
        try 
        {
            tsmt = (Statement) conn.getConnection().createStatement();
            System.out.println(sql);
            ResultSet rs = tsmt.executeQuery(sql);
            int rowCount = 0;
            jxl.write.Label label;
            while(rs.next())
            {
                rowCount++;
                label = new jxl.write.Label(0, rowCount, rs.getString("folio"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(1, rowCount, rs.getString("fhmov"));
                sheet.addCell(label);
                
                if(rs.getString("tmov").equals("ent"))
                {
                    label = new jxl.write.Label(2, rowCount, "Entrada");
                    sheet.addCell(label);
                }
                else if(rs.getString("tmov").equals("sal"))
                {
                    label = new jxl.write.Label(2, rowCount, "Salida");
                    sheet.addCell(label);
                }
                else if(rs.getString("tmov").equals("mov"))
                {
                    label = new jxl.write.Label(2, rowCount, "Movimiento");
                    sheet.addCell(label);
                }
                else if(rs.getString("tmov").equals("aj"))
                {
                    label = new jxl.write.Label(2, rowCount, "Ajuste");
                    sheet.addCell(label);
                }

                if(rs.getString("uso").equals("rta"))
                {
                    label = new jxl.write.Label(3, rowCount,"Renta");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("rtacp"))
                {
                    label = new jxl.write.Label(3, rowCount,"Renta Corto Plazo");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("rtaoc"))
                {
                    label = new jxl.write.Label(3, rowCount,"Renta Opcion de compra");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("rep"))
                {
                    label = new jxl.write.Label(3, rowCount,"Reparacion");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("pres"))
                {
                    label = new jxl.write.Label(3, rowCount,"Prestamo");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("vta"))
                {
                    label = new jxl.write.Label(3, rowCount,"Venta");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("mov"))
                {
                    label = new jxl.write.Label(3, rowCount,"Movimiento");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("disp"))
                {
                    label = new jxl.write.Label(3, rowCount,"Disponible");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("baja"))
                {
                    label = new jxl.write.Label(3, rowCount,"Baja");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("corr"))
                {
                    label = new jxl.write.Label(3, rowCount,"Cubriendo");
                    sheet.addCell(label); 
                }
                
                label = new jxl.write.Label(4, rowCount, rs.getString("sa"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(5, rowCount, rs.getString("compNumber"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(6, rowCount, rs.getString("compName"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(7, rowCount, rs.getString("firma"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(8, rowCount, rs.getString("numeco"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(9, rowCount, rs.getString("marca"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(10, rowCount, rs.getString("modelo"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(11, rowCount, rs.getString("serie"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(12, rowCount, rs.getString("horometro"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(13, rowCount, rs.getString("note"));
                sheet.addCell(label);
                
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        
        workbook.write();
        workbook.close();
    } 
    catch (WriteException e) 
    {
        ;
    }
    catch(IOException ioe)
    {
        ;
    }
    conn.Close();
    }//GEN-LAST:event_mnMainExportExcelActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        Search sr = new Search(BD,desktopPane,this);
        desktopPane.add(sr);
        //int x = desktopPane.getSize().width/2 - mov.getSize().width/2;
        //int y = 10;
        //mov.setLocation(x, y);
        sr.setVisible(true);
    }//GEN-LAST:event_btSearchActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if(evt.getKeyCode() == evt.VK_ESCAPE )
        {
            closeWindows();
        }
    }//GEN-LAST:event_formKeyReleased

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        if(evt.getKeyCode() == evt.VK_ESCAPE )
        {
            closeWindows();
        }
    }//GEN-LAST:event_tableKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JMenuBar mnMain;
    private javax.swing.JMenu mnMainExport;
    private javax.swing.JMenuItem mnMainExportExcel;
    private javax.swing.JTable table;
    private javax.swing.JTextField txLength;
    private javax.swing.JTextField txSearch;
    // End of variables declaration//GEN-END:variables

    private String restric;
    String BD;
    javax.swing.JDesktopPane desktopPane;

    public void reloadTable(String restric) 
    {
        cleanTable();
        fillTable(restric);
    }
    public void reloadTable() 
    {
        cleanTable();
        int lenght = 0;
        if(txLength.getText().matches("^0$"))
        {
            lenght = 0;
        }
        else if(txLength.getText().matches("^[0-9]+$"))
        {
            lenght = Integer.parseInt(txLength.getText());
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El formato de cant. de Registro es incorrecto", "Error Externo", JOptionPane.ERROR_MESSAGE);
        }
        fillTable(txSearch.getText(),lenght);
    }
    private void cleanTable() 
    {
        DefaultTableModel dm = ((DefaultTableModel)table.getModel());
        int rows = dm.getRowCount();
        for(int i = 0; i < rows; ++i)
        {
            dm.removeRow(0);
        }    
    }
    private void fillTable(String restrict) 
    {
        SIIL.Servicios.Grua.Regmov regm = new SIIL.Servicios.Grua.Regmov();
        regm.setLength(0);
        MySQL conn = new MySQL();
        conn.Create();
        if(conn.getConnection() == null)
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        regm.fillModel(((DefaultTableModel)table.getModel()),restrict,SIIL.servApp.cred.getSuc());
        setRestric(restrict);
    }
    private void fillTable(String where,int length) 
    {
        SIIL.Servicios.Grua.Regmov regm = new SIIL.Servicios.Grua.Regmov();
        regm.setWhere(where);
        regm.setLength(length);
                
        try {
            regm.fillModel(((DefaultTableModel)table.getModel()),SIIL.servApp.cred.getSuc());
        } catch (IOException | ParserConfigurationException | SAXException | ClassNotFoundException | SQLException ex) {
            Logger.getLogger(RegmovList.class.getName()).log(Level.SEVERE, null, ex);
        }
        setRestric(regm.getRestrict());
    }

    /**
     * @return the restric
     */
    public String getRestric() {
        return restric;
    }

    /**
     * @param restric the restric to set
     */
    public void setRestric(String restric) {
        this.restric = restric;
    }

    private void closeWindows() {
        dispose();
        System.out.println("closeWindows...");
    }
    
}
