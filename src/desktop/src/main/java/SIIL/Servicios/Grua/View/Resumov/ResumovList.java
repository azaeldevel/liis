
package SIIL.Servicios.Grua.View.Resumov;

import SIIL.Server.Database;
import SIIL.core.config.Server;
import SIIL.servApp;
import static SIIL.servApp.BACKWARD_BD;
import static SIIL.servApp.cred;
import SIIL.services.grua.Battery;
import SIIL.services.grua.Charger;
import SIIL.services.grua.Forklift;
import SIIL.services.grua.Resumov;
import SIIL.trace.Trace;
import SIIL.trace.Value;
import core.bobeda.Archivo;
import core.bobeda.Business;
import core.bobeda.Vault;
import core.bobeda.FTP;
import core.bobeda.Upload;
import database.mysql.stock.Titem;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import jxl.Workbook;
import jxl.format.Colour;
import jxl.write.WritableCell;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.jdesktop.swingx.JXDialog;
import org.xml.sax.SAXException;
import process.Return;
import stock.Flow;

/**
 *
 * @author Azael
 */
public final class ResumovList extends javax.swing.JInternalFrame {


    Resumov[] resumovs;
    
    /**
     * 
     * @return 
     */
    private int getSelectedRow() 
    {
        if(tbList.getSelectedRow() < 0) 
        {
            return tbList.getSelectedRow();
        }
        else
        {
            return tbList.convertRowIndexToModel(tbList.getSelectedRow());
        }
    }
    
    
    /**
     * Creates new form ResumovList
     * @param bd
     * @param dp
     */
    public ResumovList(String bd,javax.swing.JDesktopPane dp) 
    {        
        initComponents();
        fillTable();
        BD = bd;
        enableAcces();
        deskPane = dp;
        tbList.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbList.getColumnModel().getColumn(0).setPreferredWidth(40);
        tbList.getColumnModel().getColumn(1).setPreferredWidth(50);
        tbList.getColumnModel().getColumn(2).setPreferredWidth(100);
        tbList.getColumnModel().getColumn(3).setPreferredWidth(100);
        tbList.getColumnModel().getColumn(4).setPreferredWidth(100);
        tbList.getColumnModel().getColumn(5).setPreferredWidth(50);
        tbList.getColumnModel().getColumn(6).setPreferredWidth(150);
        tbList.getColumnModel().getColumn(12).setPreferredWidth(200);
        tbList.setAutoCreateRowSorter(true);
        resumovs = new Resumov[2];
    }

    public void enableAcces()
    {
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        if(cred.acces(dbserver,"Servicios.Grua.Write"))
        {
            mnJoin.setVisible(true);
            mnDeBattery.setVisible(true);
            mnDeCharger.setVisible(true);
            mnNote.setVisible(true);
        }
        else
        {
            mnJoin.setVisible(false);
            mnDeBattery.setVisible(false);
            mnDeCharger.setVisible(false);
            mnNote.setVisible(false);
        }
        if(cred.acces(dbserver,"Servicios.Grua.Regmov.Delete"))
        {
            mnMainArtDel.setVisible(true);
        }
        else
        {
            mnMainArtDel.setVisible(false);
        }       
        if(cred.acces(dbserver,"bobeda.asociar") )
        {
            mnPOFind.setVisible(true);
        }
        else
        {
            mnPOFind.setVisible(false);
        }        
        if(cred.acces(dbserver,"bobeda.download") )
        {
            mnPODown.setVisible(true);
        }
        else
        {
            mnPODown.setVisible(false);
        }     
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnContext = new javax.swing.JPopupMenu();
        mnNote = new javax.swing.JMenuItem();
        mnMainExportExcel = new javax.swing.JMenuItem();
        mnMainArtDel = new javax.swing.JMenuItem();
        mnJoin = new javax.swing.JMenuItem();
        mnDeBattery = new javax.swing.JMenuItem();
        mnDeCharger = new javax.swing.JMenuItem();
        mnPOView = new javax.swing.JMenuItem();
        mnPODown = new javax.swing.JMenuItem();
        mnPOUp = new javax.swing.JMenuItem();
        mnPOFind = new javax.swing.JMenuItem();
        mnPORead = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        txSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbList = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txLength = new javax.swing.JTextField();
        btUpdate = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        btDetail = new javax.swing.JButton();

        mnNote.setText("Agregar Nota");
        mnNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnNoteActionPerformed(evt);
            }
        });
        mnContext.add(mnNote);

        mnMainExportExcel.setText("Excel");
        mnMainExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMainExportExcelActionPerformed(evt);
            }
        });
        mnContext.add(mnMainExportExcel);

        mnMainArtDel.setText("Eliminar");
        mnMainArtDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMainArtDelActionPerformed(evt);
            }
        });
        mnContext.add(mnMainArtDel);

        mnJoin.setText("Unir");
        mnJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnJoinActionPerformed(evt);
            }
        });
        mnContext.add(mnJoin);

        mnDeBattery.setText("Extrallendo Bateria");
        mnDeBattery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDeBatteryActionPerformed(evt);
            }
        });
        mnContext.add(mnDeBattery);

        mnDeCharger.setText("Extrallendo Cargador");
        mnDeCharger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDeChargerActionPerformed(evt);
            }
        });
        mnContext.add(mnDeCharger);

        mnPOView.setText("Ver PO");
        mnPOView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPOViewActionPerformed(evt);
            }
        });
        mnContext.add(mnPOView);

        mnPODown.setText("Descargar PO");
        mnPODown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPODownActionPerformed(evt);
            }
        });
        mnContext.add(mnPODown);

        mnPOUp.setText("Subir y Asociar PO");
        mnPOUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPOUpActionPerformed(evt);
            }
        });
        mnContext.add(mnPOUp);

        mnPOFind.setText("Buscar y Asociar PO");
        mnPOFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPOFindActionPerformed(evt);
            }
        });
        mnContext.add(mnPOFind);

        mnPORead.setText("Lista PO");
        mnPORead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPOReadActionPerformed(evt);
            }
        });
        mnContext.add(mnPORead);

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Hoja de Renta");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setText("Buscar");

        txSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txSearchKeyReleased(evt);
            }
        });

        tbList.setModel(new SIIL.Servicios.Grua.View.Resumov.ResumovTableModel());
        tbList.setComponentPopupMenu(mnContext);
        tbList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbListMouseClicked(evt);
            }
        });
        tbList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbList);

        jLabel2.setText("Cant.");

        txLength.setText("100");

        btUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reload.png"))); // NOI18N
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btSearch.setText("...");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        btDetail.setText("Detalle");
        btDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDetailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 974, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btDetail)
                        .addGap(18, 18, 18)
                        .addComponent(btUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(btSearch)
                            .addComponent(btDetail))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(btUpdate))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSearchKeyReleased
        cleanTable();
        fillTable();
    }//GEN-LAST:event_txSearchKeyReleased

    private void mnMainArtDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMainArtDelActionPerformed
        if(getSelectedRow() > -1)
        {
            ;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Primero seleccione un montacargas.",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String id = ((ResumovTableModel)tbList.getModel()).getValueAt(getSelectedRow(),0).toString();
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        SIIL.Server.Resumov rs = new SIIL.Server.Resumov();
        rs.setId(Integer.parseInt(id));
        try 
        {
            rs.downTitem(dbserver);            
            int option = JOptionPane.showOptionDialog(this,
                "Está eliminando el registro de  '" + rs.getTtm().getNumber() + "'. ¿Desea continuar?" ,
                "Confirme de solicitud",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,null,null,null);
            if(option != JOptionPane.YES_OPTION)
            {
                return;
            }
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        int res = 0;
        try 
        {
            Trace trace = new Trace(SIIL.servApp.cred.getBD(),SIIL.servApp.cred.getUser(), "Resumen de Movimiento : " + rs.getTtm().getNumber() + ""); 
            int reg = trace.insert(dbserver);
            Value val = new Value();
            
            val = new Value();
            val.setTraceID(trace.getTrace());
            val.setTable("Resumov");
            val.setField("operator");
            val.setAfter(SIIL.servApp.cred.getUser().toString());
            val.setBrief("Quien hace");
            val.setLlave("-");
            val.insert(dbserver);
            val.setTraceID(trace.getTrace());
            val.setTable("Resumov");
            val.setField("titem");
            val.setAfter(rs.getTtm().getNumber());
            val.setBrief("Registro afectado");
            val.setLlave("-");
            val.insert(dbserver);
            
            res = rs.delete(dbserver);       
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if(res == 1)
        {
            try 
            {
                dbserver.commit();
                reloadTable();
                JOptionPane.showMessageDialog(this,"Registro eliminado correctamente");
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this,"Fallo la operacion los datos no fueron eliminado"
                            ,"Error Interno",JOptionPane.ERROR_MESSAGE);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_mnMainArtDelActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        reloadTable();
    }//GEN-LAST:event_btUpdateActionPerformed

    private void mnMainExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMainExportExcelActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
    try 
    {
        final JFileChooser fc = new JFileChooser();

        //In response to a button click:
        String inputFile;
        //fc.setCurrentDirectory(new File("C:\\Users\\areyes\\Proyectos\\trunk\\src\\Cobranza"));
        int returnVal = fc.showSaveDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            if(fc.getSelectedFile().getAbsolutePath().endsWith("xls"))
            {
                inputFile = fc.getSelectedFile().getAbsolutePath();
            }
            else
            {
                inputFile = fc.getSelectedFile().getAbsolutePath() + ".xls";
            }           
        }
        else
        {
            return ;
        }
        
        WritableWorkbook workbook = Workbook.createWorkbook(new File(inputFile));
        WritableSheet sheet = workbook.createSheet("Page1", 0);
  
        String Header[] = new String[12];
        Header[0] = "No. Eco.";
        Header[1] = "Marca";
        Header[2] = "Modelo";
        Header[3] = "Serie";
        Header[4] = "No. Cte.";
        Header[5] = "Cliente";
        Header[6] = "Sucursal";
        Header[7] = "Tipo";
        Header[8] = "Tipo Renta";
        Header[9] = "Ubicación";
        Header[10] = "Bateria";
        Header[11] = "Cargador";
        
        //Setting Background colour for Cells
        Colour bckcolor = Colour.GRAY_25;
        WritableCellFormat cellFormat = new WritableCellFormat();
        cellFormat.setBackground(bckcolor);
 
        //Setting Colour & Font for the Text
        WritableFont font = new WritableFont(WritableFont.ARIAL);
        font.setColour(Colour.BLACK);
        cellFormat.setFont(font);
            
        // Write the Header to the excel file
        for (int i = 0; i < Header.length; i++) 
        {
            jxl.write.Label label = new jxl.write.Label(i, 0, Header[i]);
            sheet.addCell(label);
            WritableCell cell = sheet.getWritableCell(i, 0);
            cell.setCellFormat(cellFormat);
        }
            
        
        String sql = "SELECT * FROM Resumov_Resolved ";
        if( getRestrict().length() > 0)
        {
            sql = sql + " WHERE " + getRestrict(); 
        }
        Statement tsmt = null;        
        
        try 
        {
            tsmt = (Statement) dbserver.getConnection().createStatement();
            System.out.println(sql);
            ResultSet rs = tsmt.executeQuery(sql);
            int rowCount = 0;
            jxl.write.Label label;
            while(rs.next())
            {
                rowCount++;
                label = new jxl.write.Label(0, rowCount, rs.getString("titemNumber"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(1, rowCount, rs.getString("marca"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(2, rowCount, rs.getString("modelo"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(3, rowCount, rs.getString("serie"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(4, rowCount, rs.getString("cNumber"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(5, rowCount, rs.getString("cName"));
                sheet.addCell(label);
                
                if(rs.getString("suc").equals("bc.tj"))
                {
                    label = new jxl.write.Label(6, rowCount, "Tijuana");
                    sheet.addCell(label);
                }
                else if(rs.getString("suc").equals("bc.mx"))
                {
                    label = new jxl.write.Label(6, rowCount, "Mexicali");
                    sheet.addCell(label);
                }
                else if(rs.getString("suc").equals("bc.ens"))
                {
                    label = new jxl.write.Label(6, rowCount, "Ensenada");
                    sheet.addCell(label);
                }
                
                label = new jxl.write.Label(7, rowCount, "");
                sheet.addCell(label);

                if(rs.getString("uso").equals("rta"))
                {
                    label = new jxl.write.Label(8, rowCount,"Renta");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("rtacp"))
                {
                    label = new jxl.write.Label(8, rowCount,"Renta Corto Plazo");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("rtaoc"))
                {
                    label = new jxl.write.Label(8, rowCount,"Renta Opcion de compra");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("rep"))
                {
                    label = new jxl.write.Label(8, rowCount,"Reparacion");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("pres"))
                {
                    label = new jxl.write.Label(8, rowCount,"Prestamo");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("vta"))
                {
                    label = new jxl.write.Label(8, rowCount,"Venta");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("mov"))
                {
                    label = new jxl.write.Label(8, rowCount,"Movimiento");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("disp"))
                {
                    label = new jxl.write.Label(8, rowCount,"Disponible");
                    sheet.addCell(label); 
                }
                else if(rs.getString("uso").equals("baja"))
                {
                    label = new jxl.write.Label(8, rowCount,"Baja");
                    sheet.addCell(label); 
                }
                
                label = new jxl.write.Label(9, rowCount, rs.getString("note"));
                sheet.addCell(label);
                                
                label = new jxl.write.Label(10, rowCount, rs.getString("batteryNumber"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(11, rowCount, rs.getString("chargerNumber"));
                sheet.addCell(label);
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        
        workbook.write();
        workbook.close();
    } 
    catch (WriteException e) 
    {
        ;
    }
    catch(IOException ioe)
    {
        ;
    }
    dbserver.close();
    }//GEN-LAST:event_mnMainExportExcelActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        SIIL.Servicios.Grua.View.Resumov.Search sr = new SIIL.Servicios.Grua.View.Resumov.Search(BD,deskPane,this);
        deskPane.add(sr);
        sr.setVisible(true);
    }//GEN-LAST:event_btSearchActionPerformed

    private void btDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDetailActionPerformed
        if(getSelectedRow() > -1)
        {
            ;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Primero seleccione un montacargas.",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String id = ((DefaultTableModel)tbList.getModel()).getValueAt(getSelectedRow(),0).toString();
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        SIIL.Servicios.Grua.Resumov rmv = new SIIL.Servicios.Grua.Resumov();
        rmv.setId(Integer.parseInt(id));
        rmv.download(dbserver);
        SIIL.Servicios.Grua.View.Resumov.Read read = new SIIL.Servicios.Grua.View.Resumov.Read(servApp.cred.getBD(),rmv);
        deskPane.add(read);
        //ajustar a lo ancho
        int x = deskPane.getSize().width/2 - read.getSize().width/2;
        int y = 10;
        read.setLocation(x, y);
        read.setVisible(true);
    }//GEN-LAST:event_btDetailActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if(evt.getKeyCode() == evt.VK_ESCAPE )
        {
            closeWindows();
        }
    }//GEN-LAST:event_formKeyReleased

    private void tbListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbListKeyReleased
        if(evt.getKeyCode() == evt.VK_ESCAPE )
        {
            closeWindows();
        }
    }//GEN-LAST:event_tbListKeyReleased

    private void mnNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnNoteActionPerformed
        if(getSelectedRow() > -1)
        {
            ;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Primero seleccione un montacargas.",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        
        ResumovTableModel model = (ResumovTableModel) tbList.getModel();
        Resumov resumov = model.getValueAt(getSelectedRow());        
        try 
        {
            //Verificar que la operacion sea realizada sobre un montacargas.
            resumov.downTitem(dbserver);
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        String input = (String)JOptionPane.showInputDialog(
                    this,
                    "Comentario para el equipo",
                    "Captura de Comentario",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "");
        Trace contexTrace = new Trace(BACKWARD_BD, SIIL.servApp.cred.getUser(), "Inserción de comentario en Hoja de Renta");                    
        try 
        {
            if(input.length() > 0)
            {                
                resumov.upNote(dbserver.getConnection(), input, contexTrace);
                dbserver.commit();
                reloadTable();
            }
        }
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            try 
            {
                dbserver.rollback();
                dbserver.close();
            } 
            catch (SQLException ex1) 
            {
                Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex1);
            }
            return;
        }
    }//GEN-LAST:event_mnNoteActionPerformed

    private void tbListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbListMouseClicked
        if(tbList.getSelectedRowCount() > 1)
        {
            SIIL.servApp.getInstance().setInformation("Row count = " + Integer.toString(tbList.getSelectedRowCount()));
        }        
        else
        {
            SIIL.servApp.getInstance().setInformation("");
        }
    }//GEN-LAST:event_tbListMouseClicked

    private void mnJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnJoinActionPerformed
        if(getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                "Seleccione una fila",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        else if(resumovs[0] == null)
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs[0] = model.getValueAt(getSelectedRow()); 
        }
        else if(resumovs[1] == null)
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs[1] = model.getValueAt(getSelectedRow()); 
        }
        else
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                dbserver = new Database(serverConfig);
            } 
            catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
            {
                JOptionPane.showMessageDialog(null,
                    "Conexion a Servidor Invalida",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                return;
            }
        
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            int[] select = getSelectedRows(); 
            
            boolean isFor = false;
            try 
            {
                resumovs[0].downTitem(dbserver);
                resumovs[0].getTitem().downItem(dbserver);
                resumovs[0].getTitem().getItem().downNumber(dbserver.getConnection());
                isFor = Forklift.isForklift(dbserver, (Titem) resumovs[0].getTitem().getItem());
            } 
            catch (SQLException ex) 
            {                
                resumovs[0] = null;
                resumovs[1] = null;
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            if(!isFor)
            {                
                resumovs[0] = null;
                resumovs[1] = null;
                JOptionPane.showMessageDialog(this,
                    "El primer elemeto seleccionado deve ser un montacargas",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            
            boolean isAdit;
            try 
            {                
                resumovs[1].downTitem(dbserver);
                resumovs[1].getTitem().downItem(dbserver);
                resumovs[1].getTitem().getItem().downNumber(dbserver.getConnection());
                isAdit = Battery.isBattery(dbserver,(Titem)resumovs[1].getTitem().getItem()) || Charger.isCharger(dbserver,(Titem)resumovs[1].getTitem().getItem());
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex); 
                resumovs[0] = null;
                resumovs[1] = null;
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            if(!isAdit)
            {
                resumovs[0] = null;
                resumovs[1] = null;
                JOptionPane.showMessageDialog(this,
                    "El segundo elemento seleconado deve ser un aditamento",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            try 
            {
                resumovs[0].downCompany(dbserver);
                resumovs[1].downCompany(dbserver);
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex); 
                resumovs[0] = null;
                resumovs[1] = null;
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            if(resumovs[0].getCompany().getID() != resumovs[1].getCompany().getID())
            {
                resumovs[0] = null;
                resumovs[1] = null;
                JOptionPane.showMessageDialog(this,
                    "El cliente de cada aditamento deve coincidir para realizar esta operación",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
 
            Trace contexTrace = new Trace(BACKWARD_BD, SIIL.servApp.cred.getUser(), "Union de Aditamento a montacargas");                   
            Value val = new Value();
            val = new Value();
            val.setTraceID(contexTrace.getTrace());
            val.setTable("Resumov");
            val.setField("Union de equipo");
            //val.setAfter(SIIL.servApp.cred.getUser().toString());
            val.setBrief(resumovs[0].getTitem().getItem().getNumber() + "<--" + resumovs[1].getTitem().getItem().getNumber());
            val.setLlave("-");
            try 
            {            
                val.insert(dbserver);
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);                
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            boolean ret = false;  
            try 
            {
                //realizando operacion de union
                ret = resumovs[0].join(dbserver, resumovs[1].getTitem(), contexTrace) && (resumovs[1].remove(dbserver) == 1);
            } 
            catch (SQLException ex) {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);                
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            
            int option = JOptionPane.showConfirmDialog(
            this,
            "Esta enlazando '" + resumovs[1].getTitem().getItem().getNumber() + "' al montacargas '" + resumovs[0].getTitem().getItem().getNumber() + "', ¿Desea continuar?",
            "Confirme operación",
            JOptionPane.YES_NO_OPTION);
            
            if(option == JOptionPane.YES_OPTION)
            {
                try 
                {
                    resumovs[0] = null;
                    resumovs[1] = null;
                    if(ret )
                    {
                        dbserver.commit();
                        reloadTable();
                        JOptionPane.showMessageDialog(this,
                        "Operacion completada satisfactoriamente",
                        "Confirmado",
                        JOptionPane.INFORMATION_MESSAGE
                        );
                    }
                    else
                    {//porque fallo la operacion
                        resumovs[0] = null;
                        resumovs[1] = null;
                        dbserver.rollback();                        
                        JOptionPane.showMessageDialog(this,
                        "Un error inesperado ocurrio mientras se guardavan los datoa en la base de datos.",
                        "Fallo inesperado",
                        JOptionPane.ERROR_MESSAGE
                        );
                    }
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                }
            }
            else
            {
                try 
                {
                    resumovs[0] = null;
                    resumovs[1] = null;
                    dbserver.rollback();
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }//GEN-LAST:event_mnJoinActionPerformed

    private void mnDeBatteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDeBatteryActionPerformed
        Resumov resumovs = null;
        if(getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                "Seleccione una fila",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        else
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs = model.getValueAt(getSelectedRow()); 
        }
        
        
        
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                dbserver = new Database(serverConfig);
            } 
            catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
            {
                JOptionPane.showMessageDialog(null,
                    "Conexion a Servidor Invalida",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                return;
            }
        
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            int[] select = tbList.getSelectedRows(); 
            
            boolean isFor = false;
            try 
            {
                resumovs.downTitem(dbserver);
                resumovs.getTitem().downItem(dbserver);
                resumovs.getTitem().getItem().downNumber(dbserver.getConnection());
                isFor = Forklift.isForklift(dbserver, (Titem) resumovs.getTitem().getItem());
            }
            catch (SQLException ex) 
            {          
                resumovs = null;
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            if(!isFor)
            {          
                resumovs = null;
                JOptionPane.showMessageDialog(this,
                    "El elemeto seleccionado deve ser un montacargas",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            
 
            Trace contexTrace = new Trace(BACKWARD_BD, SIIL.servApp.cred.getUser(), "De-Enlazar Bateria de a Montacargas");                   
            Value val = new Value();
            val = new Value();
            val.setTraceID(contexTrace.getTrace());
            val.setTable("Resumov");
            val.setField("De-Enlazar de Aditamento");
            //val.setAfter(SIIL.servApp.cred.getUser().toString());
            val.setBrief(resumovs.getTitem().getItem().getNumber() + "<--" + resumovs.getTitem().getItem().getNumber());
            val.setLlave("-");
            try 
            {     
                val.insert(dbserver);
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);                
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            Boolean ret = false;  
            try 
            {
                //realizando operacion de union
                ret = resumovs.extractAditamento(dbserver, Resumov.Aditamentos.BATTERY, contexTrace);
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);                
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            
            int option = JOptionPane.showConfirmDialog(
            this,
            "Esta extallendo la bateria de equipo '" + resumovs.getTitem().getItem().getNumber() + "', ¿Desea continuar?",
            "Confirme operación",
            JOptionPane.YES_NO_OPTION);
            
            if(option == JOptionPane.YES_OPTION)
            {
                try 
                {
                    resumovs = null;
                    if(ret == true )
                    {
                        dbserver.commit();
                        reloadTable();
                        JOptionPane.showMessageDialog(this,
                        "Operacion completada satisfactoriamente",
                        "Confirmado",
                        JOptionPane.INFORMATION_MESSAGE
                        );
                    }
                    else
                    {
                        //porque fallo la operacion
                        dbserver.rollback();                        
                        JOptionPane.showMessageDialog(this,
                        "Un error inesperado ocurrio mientras se guardavan los datoa en la base de datos.",
                        "Fallo inesperado",
                        JOptionPane.ERROR_MESSAGE
                        );
                    }
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                }
            }
            else
            {
                try 
                {
                    resumovs = null;
                    dbserver.rollback();
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }//GEN-LAST:event_mnDeBatteryActionPerformed

    private void mnDeChargerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDeChargerActionPerformed
        Resumov resumovs = null;
        if(getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                "Seleccione una fila",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        else
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs = model.getValueAt(getSelectedRow()); 
        }
        
        
        
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                dbserver = new Database(serverConfig);
            } 
            catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
            {
                JOptionPane.showMessageDialog(null,
                    "Conexion a Servidor Invalida",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                return;
            }
        
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            int[] select = getSelectedRows(); 
            
            boolean isFor = false;
            try 
            {
                resumovs.downTitem(dbserver);
                resumovs.getTitem().downItem(dbserver);
                resumovs.getTitem().getItem().downNumber(dbserver.getConnection());
                isFor = Forklift.isForklift(dbserver, (Titem) resumovs.getTitem().getItem());
            }
            catch (SQLException ex) 
            {          
                resumovs = null;
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            if(!isFor)
            {          
                resumovs = null;
                JOptionPane.showMessageDialog(this,
                    "El elemeto seleccionado deve ser un montacargas",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            
 
            Trace contexTrace = new Trace(BACKWARD_BD, SIIL.servApp.cred.getUser(), "De-Enlazar Bateria de a Montacargas");                   
            Value val = new Value();
            val = new Value();
            val.setTraceID(contexTrace.getTrace());
            val.setTable("Resumov");
            val.setField("De-Enlazar de Aditamento");
            //val.setAfter(SIIL.servApp.cred.getUser().toString());
            val.setBrief(resumovs.getTitem().getItem().getNumber() + "<--" + resumovs.getTitem().getItem().getNumber());
            val.setLlave("-");
            try 
            {     
                val.insert(dbserver);
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);                
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            Boolean ret = false;  
            try 
            {
                //realizando operacion de union
                ret = resumovs.extractAditamento(dbserver, Resumov.Aditamentos.CHARGER, contexTrace);
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);                
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                dbserver.close();
                return;
            }
            
            int option = JOptionPane.showConfirmDialog(
            this,
            "Esta extrallendo el cargador de equipo '" + resumovs.getTitem().getItem().getNumber() + "', ¿Desea continuar?",
            "Confirme operación",
            JOptionPane.YES_NO_OPTION);
            
            if(option == JOptionPane.YES_OPTION)
            {
                try 
                {
                    resumovs = null;
                    if(ret == true)
                    {
                        dbserver.commit();
                        reloadTable();
                        JOptionPane.showMessageDialog(this,
                        "Operacion completada satisfactoriamente",
                        "Confirmado",
                        JOptionPane.INFORMATION_MESSAGE
                        );
                    }
                    else
                    {
                        //porque fallo la operacion
                        dbserver.rollback();                        
                        JOptionPane.showMessageDialog(this,
                        "Un error inesperado ocurrio mientras se guardavan los datoa en la base de datos.",
                        "Fallo inesperado",
                        JOptionPane.ERROR_MESSAGE
                        );
                    }
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                }
            }
            else
            {
                try 
                {
                    resumovs = null;
                    dbserver.rollback();
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
    }//GEN-LAST:event_mnDeChargerActionPerformed

    private void mnPOFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPOFindActionPerformed
        
        Resumov resumovs = null;
        if(getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                "Seleccione una fila",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        else
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs = model.getValueAt(getSelectedRow()); 
        }
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        try 
        {
            resumovs.downCompany(dbserver);
            resumovs.getCompany().download(dbserver);
        } 
        catch (SQLException ex) 
        {
            //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        core.bobeda.CRUD screen = new core.bobeda.CRUD(core.Mode.SELECTION,resumovs);
        core.Dialog dialog = new core.Dialog(screen);
        dialog.setContent(screen);
        if(screen.getBusinesDocument() != null)
        {
            Return ret = null;
            try 
            {
                ret = resumovs.upPOFile(dbserver, screen.getBusinesDocument());
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex)
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                );
            }
            
            if(ret.isFlag())
            {
                try 
                {
                    dbserver.commit();
                    JOptionPane.showMessageDialog(this,
                        "Operacion Completada",
                        "Error Interno",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                    reloadTable();
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
            else
            {
                try 
                {
                    dbserver.rollback();
                    JOptionPane.showMessageDialog(this,
                        "Un error insperado ocurrio, la operacion será cancelada",
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                    );
                } 
                catch (SQLException ex) 
                {
                    //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
            dbserver.close();
        }
    }//GEN-LAST:event_mnPOFindActionPerformed

    private void mnPODownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPODownActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        } 
        Resumov resumovs = null;
        if(getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                "Seleccione una fila",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        else
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs = model.getValueAt(getSelectedRow());
            try 
            {
                resumovs.downCompany(dbserver);
                resumovs.getCompany().download(dbserver);
                resumovs.downPOFile(dbserver);
                if(resumovs.getPOFile() != null)
                {
                    resumovs.getPOFile().download(dbserver);                    
                }
                else
                {
                    JOptionPane.showMessageDialog(this,
                    "No hay PO asociado",
                    "Error Externo",
                    JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error externo",
                JOptionPane.ERROR_MESSAGE
                );
            }
        }        
        
        final JFileChooser fc = new JFileChooser();         
        String nameFile;
        FileSystemView fw = fc.getFileSystemView();
        fc.setCurrentDirectory(fw.getDefaultDirectory());
        int returnVal = fc.showSaveDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            
        }
        else
        {
            return ;
        }
        try
        {          
            FTP ftpServer = new FTP();
            boolean expResult = false;
            try 
            {
                expResult = ftpServer.connect(serverConfig);
            } 
            catch (IOException ex)
            {
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                );
                return;           
            }
            
            //OutputStream file = Vault.getFile(dbserver, ftpServer, resumovs.getPOFile().getBobeda(), fc.getSelectedFile().getAbsolutePath());
            Archivo archivo = resumovs.getPOFile().getBobeda();
            archivo.download(dbserver, ftpServer, new File(fc.getSelectedFile().getAbsolutePath()));
            OutputStream file = archivo.getDownloadedFile();
            file.close();
        }
        catch (SQLException | IOException ex)
        {
            //Logger.getLogger(getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_mnPODownActionPerformed

    private void mnPOUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPOUpActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }    
        
        Resumov resumovs = null;
        if(getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                "Seleccione una fila",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        else
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs = model.getValueAt(getSelectedRow());
            try
            {
                if(resumovs.downCompany(dbserver))
                {
                    resumovs.getCompany().download(dbserver);
                }
            }            
            catch (SQLException ex) 
            {
                //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
           
        Upload screen = new Upload(resumovs,null);
        core.Dialog dialog = new core.Dialog(screen);
        dialog.setContent(screen);
        if(screen.getBusinesDocument() != null)
        {
            try 
            {
                Return ret = resumovs.upPOFile(dbserver, screen.getBusinesDocument());
                if(ret.isFlag())
                {
                    dbserver.commit();
                    reloadTable();
                    JOptionPane.showMessageDialog(this,
                        "Operacion completada",
                        "Confirmación",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                }
                else
                {
                    dbserver.rollback();
                }
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        } 
        dbserver.close();
    }//GEN-LAST:event_mnPOUpActionPerformed

    private void mnPOReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPOReadActionPerformed
        core.bobeda.CRUD screen = new core.bobeda.CRUD(core.Mode.VIEW);
        core.Dialog dialog = new core.Dialog(screen);
        dialog.setContent(screen);
    }//GEN-LAST:event_mnPOReadActionPerformed

    private void mnPOViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPOViewActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        Resumov resumovs = null;
        if(getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(this,
                "Seleccione una fila",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        else
        {
            ResumovTableModel model = (ResumovTableModel) tbList.getModel();
            resumovs = model.getValueAt(getSelectedRow());
            try 
            {
                resumovs.downCompany(dbserver);
                resumovs.getCompany().download(dbserver);
                resumovs.downPOFile(dbserver);
                if(resumovs.getPOFile() != null)
                {
                    resumovs.getPOFile().download(dbserver);                    
                }
                else
                {
                    JOptionPane.showMessageDialog(this,
                    "No hay PO asociado",
                    "Error Externo",
                    JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(ResumovList.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error externo",
                JOptionPane.ERROR_MESSAGE
                );
            }
        }        
        
        try
        {          
            FTP ftpServer = new FTP();
            boolean expResult = false;
            try 
            {
                expResult = ftpServer.connect(serverConfig);
            } 
            catch (IOException ex)
            {
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                );
                return;           
            }
            
            File into = new File(System.getProperty("java.io.tmpdir"));
            Archivo archivo = resumovs.getPOFile().getBobeda();
            if(!archivo.download(dbserver,ftpServer,into))
            {
                JOptionPane.showMessageDialog(this,
                "Falló la descarga de archivo.",
                "Error externo",
                JOptionPane.ERROR_MESSAGE
                );
                return;
            }
            archivo.getDownloadedFile().close();
            Desktop.getDesktop().open(new File(archivo.getDownloadFileName())); 
        }
        catch (SQLException | IOException ex)
        {
            //Logger.getLogger(getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_mnPOViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDetail;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu mnContext;
    private javax.swing.JMenuItem mnDeBattery;
    private javax.swing.JMenuItem mnDeCharger;
    private javax.swing.JMenuItem mnJoin;
    private javax.swing.JMenuItem mnMainArtDel;
    private javax.swing.JMenuItem mnMainExportExcel;
    private javax.swing.JMenuItem mnNote;
    private javax.swing.JMenuItem mnPODown;
    private javax.swing.JMenuItem mnPOFind;
    private javax.swing.JMenuItem mnPORead;
    private javax.swing.JMenuItem mnPOUp;
    private javax.swing.JMenuItem mnPOView;
    private javax.swing.JTable tbList;
    private javax.swing.JTextField txLength;
    private javax.swing.JTextField txSearch;
    // End of variables declaration//GEN-END:variables
    
    String BD;
    javax.swing.JDesktopPane deskPane;
    private String restrict;
    
    @Deprecated
    private void fillTable(String where) 
    {
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        ResumovTableModel dm = ((ResumovTableModel)tbList.getModel());
        dm.clear();
        String sql = "SELECT * FROM Resumov_Resolved";
        setRestrict("");
        if(where.length() > 0)
        {
            setRestrict(where);
            sql = sql + " WHERE " + where;
        }
                
        Statement stmt = null;
        try 
        {
            stmt = (Statement) dbserver.getConnection().createStatement();
            System.out.println(sql);
            ResultSet rs = stmt.executeQuery(sql);
            String[] row;
            while(rs.next())
            {
                row = new String[15];
                row[0] = rs.getString("ID");
                row[1] = rs.getString("titemNumber");                
                row[2] = rs.getString("marca");
                row[3] = rs.getString("modelo");
                row[4] = rs.getString("serie");
                row[5] = rs.getString("cnumber");                
                row[6] = rs.getString("cname");                
                if(rs.getString("suc").equals("bc.tj"))
                {
                    row[7] = "Tijuana";
                }
                else if(rs.getString("suc").equals("bc.mx"))
                {
                    row[7] = "Mexicali";
                }
                else if(rs.getString("suc").equals("bc.ens"))
                {
                    row[7] = "Ensenada";
                }
                if(rs.getString("uso").equals("rta"))
                {
                    row[8] = "Renta";
                }
                else if(rs.getString("uso").equals("rtacp"))
                {
                    row[8] = "Renta Corto Plazo";
                }
                else if(rs.getString("uso").equals("rtaoc"))
                {
                    row[8] = "Renta Opcion de compra";
                }
                else if(rs.getString("uso").equals("rep"))
                {
                    row[8] = "Reparación";
                }
                else if(rs.getString("uso").equals("pres"))
                {
                    row[8] = "Prestamo";
                }
                else if(rs.getString("uso").equals("vta"))
                {
                    row[8] = "Venta";
                }
                else if(rs.getString("uso").equals("mov"))
                {
                    row[8] = "Movimiento";
                }
                else if(rs.getString("uso").equals("disp"))
                {
                    row[8] = "Disponible";
                }
                else if(rs.getString("uso").equals("baja"))
                {
                    row[8] = "Baja";
                }
                else if(rs.getString("uso").equals("tpint"))
                {
                    row[8] = "T. de Pintura";
                }
                else if(rs.getString("uso").equals("corr"))
                {
                    row[8] = "Cubriendo";
                }
                else if(rs.getString("uso").equals("otras"))
                {
                    row[8] = "Otra...";
                }
                
                row[9] = rs.getString("batteryNumber");
                row[10] = rs.getString("chargerNumber");
                
                SimpleDateFormat userDate = new SimpleDateFormat("dd/MM/yyyy");
                SimpleDateFormat dbDate = new SimpleDateFormat("yyyy-MM-dd");
                try 
                {
                    if(rs.getString("fhmov") != null && !rs.getString("fhmov").isEmpty()) row[11] = userDate.format(dbDate.parse(rs.getString("fhmov")));
                } 
                catch (ParseException e) 
                {
                    e.printStackTrace();
                }
                row[12] = rs.getString("note");
                if(rs.getString("poFile") != null) 
                {
                    core.bobeda.Business business = new core.bobeda.Business(new core.bobeda.Vault(rs.getInt("poFile")));
                    business.download(dbserver);
                    row[13] = business.getFolio();
                }
                else
                {
                    row[13] = "";
                }
                row[14] = rs.getString("titemBD");  
                
                dm.addRow(row);                
            }
            dm.fireTableDataChanged();
            rs.close();
            stmt.close();
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        dbserver.close();
    }
    
    @Deprecated
    private void fillTable() 
    {
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        ResumovTableModel dm = (ResumovTableModel) tbList.getModel();        
        dm.clear();
        
        String sql = "SELECT * FROM Resumov_Resolved";
        setRestrict("");
        if(txSearch.getText().length() > 0)
        {
            setRestrict(getRestrict() + " titemNumber LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR batteryNumber LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR chargerNumber LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR forkliftNumber LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR cNumber LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR cName LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR marca LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR modelo LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR serie LIKE '%" + txSearch.getText() + "%'");
            setRestrict(getRestrict() + " OR note LIKE '%" + txSearch.getText() + "%'");
        }        
        
        if(getRestrict().length() > 0)
        {
            if(SIIL.servApp.cred.getSuc().equals("bc.tj"))
            {
                sql = sql + " WHERE " + getRestrict();
            }
            else
            {
                sql = sql + " WHERE (" + getRestrict() + ") AND " + SIIL.servApp.cred.filterSucursal(dbserver);
            }
        }
        else
        {
            if(SIIL.servApp.cred.getSuc().equals("bc.tj"))
            {
            }
            else
            {
                sql = sql + " WHERE " + SIIL.servApp.cred.filterSucursal(dbserver);
            }
        }
        
        if(txLength.getText().matches("^0$"))
        {
            ;
        }
        else if(txLength.getText().matches("^[0-9]+$"))
        {
            sql = sql + " LIMIT " + txLength.getText();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El formato de cant. de Registro es incorrecto", "Error Externo", JOptionPane.ERROR_MESSAGE);
        }
        
        Statement stmt = null;
        try 
        {
            stmt = (Statement) dbserver.getConnection().createStatement();
            
            System.out.println(sql);
            ResultSet rs = stmt.executeQuery(sql);
            String[] row;
            while(rs.next())
            {
                row = new String[15];
                row[0] = rs.getString("ID");
                row[1] = rs.getString("titemNumber");                
                row[2] = rs.getString("marca");
                row[3] = rs.getString("modelo");
                row[4] = rs.getString("serie");
                row[5] = rs.getString("cnumber");                
                row[6] = rs.getString("cname");                
                if(rs.getString("suc").equals("bc.tj"))
                {
                    row[7] = "Tijuana";
                }
                else if(rs.getString("suc").equals("bc.mx"))
                {
                    row[7] = "Mexicali";
                }
                else if(rs.getString("suc").equals("bc.ens"))
                {
                    row[7] = "Ensenada";
                }
                if(rs.getString("uso").equals("rta"))
                {
                    row[8] = "Renta";
                }
                else if(rs.getString("uso").equals("rtacp"))
                {
                    row[8] = "Renta Corto Plazo";
                }
                else if(rs.getString("uso").equals("rtaoc"))
                {
                    row[8] = "Renta Opcion de compra";
                }
                else if(rs.getString("uso").equals("rep"))
                {
                    row[8] = "Reparación";
                }
                else if(rs.getString("uso").equals("pres"))
                {
                    row[8] = "Prestamo";
                }
                else if(rs.getString("uso").equals("vta"))
                {
                    row[8] = "Venta";
                }
                else if(rs.getString("uso").equals("mov"))
                {
                    row[8] = "Movimiento";
                }
                else if(rs.getString("uso").equals("disp"))
                {
                    row[8] = "Disponible";
                }
                else if(rs.getString("uso").equals("baja"))
                {
                    row[8] = "Baja";
                }
                else if(rs.getString("uso").equals("tpint"))
                {
                    row[8] = "T. de Pintura";
                }
                else if(rs.getString("uso").equals("corr"))
                {
                    row[8] = "Cubriendo";
                }
                else if(rs.getString("uso").equals("otras"))
                {
                    row[8] = "Otra...";
                }
                
                row[9] = rs.getString("batteryNumber");
                row[10] = rs.getString("chargerNumber");
                
                SimpleDateFormat userDate = new SimpleDateFormat("dd/MM/yyyy");
                SimpleDateFormat dbDate = new SimpleDateFormat("yyyy-MM-dd");
                try 
                {
                    if(rs.getString("fhmov") != null && !rs.getString("fhmov").isEmpty()) row[11] = userDate.format(dbDate.parse(rs.getString("fhmov")));
                }
                catch (ParseException e) 
                {
                    e.printStackTrace();
                }
                row[12] = rs.getString("note");
                if(rs.getString("poFile") != null) 
                {
                    core.bobeda.Business business = new core.bobeda.Business(new core.bobeda.Vault(rs.getInt("poFile")));
                    business.download(dbserver);
                    row[13] = business.getFolio();
                }
                else
                {
                    row[13] = "";
                }
                row[14] = rs.getString("titemBD");  
                
                dm.addRow(row);
            }
            dm.fireTableDataChanged();
            rs.close();
            stmt.close();
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        dbserver.close();
    }

    private void cleanTable() 
    {
        ResumovTableModel dm = ((ResumovTableModel)tbList.getModel());
        dm.clear();           
    }
    
    public void reloadTable(String where) 
    {
        cleanTable();
        fillTable(where);
    }
    public void reloadTable() 
    {
        cleanTable();
        fillTable();
    }

    /**
     * @return the restrict
     */
    public String getRestrict() {
        return restrict;
    }

    /**
     * @param restrict the restrict to set
     */
    public void setRestrict(String restrict) {
        this.restrict = restrict;
    }

    private void closeWindows() 
    {
        dispose();
        System.out.println("closeWindows...");
    }
    
    private int[] getSelectedRows() 
    { 
        if(tbList.getSelectedRow() < 0) 
        {
            return tbList.getSelectedRows();
        }
        else
        {
            int[] rows = tbList.getSelectedRows();
            int[] rowsConvert = new int[rows.length];
            for(int i = 0; i < rows.length; i++)
            {
                rowsConvert[i] = tbList.convertRowIndexToModel(rows[i]);
            }
            return rowsConvert;
        }
    }
}
