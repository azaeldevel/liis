package SIIL.Servicios;


import SIIL.Server.Database;
import SIIL.Server.Forklift;
import SIIL.Server.MySQL;
import SIIL.Server.TargetMov;
import SIIL.Server.Titem;
import java.awt.Window;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 * @version 1.2
 * @since Diciembre 8, 2014
 * @author Azael Reyes
 */
public class MovCreate extends javax.swing.JPanel 
{
    SIIL.Server.Company comp;
    String BD;
    SIIL.Server.Movimiento mov;
    SIIL.Server.Forklift forklift;
    ArrayList<SIIL.Server.Titem> titems;
    SIIL.Server.Battery battery;
    SIIL.Server.Charger charger;
    
    /**
     * Creates new form MovimientoCreate
     * @param bd
     */
    public MovCreate(String bd) 
    {
        initComponents();
        grOwner.add(opSIIL);
        grOwner.add(opClient);

        BD = bd;
        mov = new SIIL.Server.Movimiento();
        titems = new ArrayList<>();
    }

    public MovCreate(String bd, Forklift fork) 
    {
        initComponents();
        grOwner.add(opSIIL);
        grOwner.add(opClient);

        BD = bd;
        mov = new SIIL.Server.Movimiento();
        titems = new ArrayList<>();
        forklift = fork;   
        opSIIL.setSelected(true);
        TitemCRUD capFork = new TitemCRUD(tbTitems,"forklift","SIIL",titems,BD,fork);
        JDialog dlg = new JDialog(new JFrame(),"Agregar Montacargas",true);
        dlg.setContentPane(capFork);
        dlg.setSize(300, 410);
        dlg.setResizable(true);
        dlg.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grOwner = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txFolio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txfhmov = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbtmov = new javax.swing.JComboBox();
        cbusomov = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txSA = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txClient = new javax.swing.JTextField();
        btClient = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txfirma = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaNota = new javax.swing.JTextArea();
        btGuardar = new javax.swing.JButton();
        lbClient = new javax.swing.JLabel();
        Propietario = new javax.swing.JLabel();
        opClient = new javax.swing.JRadioButton();
        opSIIL = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        cbSuc = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbTitems = new javax.swing.JTable();
        btBattery = new javax.swing.JButton();
        btCharger = new javax.swing.JButton();
        btForklift = new javax.swing.JButton();
        opNote = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(560, 510));

        jLabel1.setText("No. de Movimiento");

        txFolio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txFolioFocusLost(evt);
            }
        });

        jLabel2.setText("Fecha (dd/mm/yyyy)");

        txfhmov.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfhmovFocusLost(evt);
            }
        });

        jLabel3.setText("Tipo");

        cbtmov.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..", "Entrada", "Salida", "Movimiento", "Retorno", "Cancelar" }));
        cbtmov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbtmovActionPerformed(evt);
            }
        });

        cbusomov.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione..", "Disponible", "Renta Corto Plazo", "Préstamo", "Renta Opcion de Compra", "Reparación", "Venta", "Movimiento", "T. de Pintura", " " }));
        cbusomov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbusomovActionPerformed(evt);
            }
        });

        jLabel4.setText("Uso");

        jLabel5.setText("S.A.");

        txSA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txSAFocusLost(evt);
            }
        });

        jLabel6.setText("Cliente");

        txClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txClientKeyReleased(evt);
            }
        });

        btClient.setText("...");
        btClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClientActionPerformed(evt);
            }
        });

        jLabel7.setText("Nombre Firma");

        jLabel8.setText("Nota");

        txaNota.setColumns(20);
        txaNota.setRows(5);
        jScrollPane1.setViewportView(txaNota);

        btGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SIIL/resources/document-save.png"))); // NOI18N
        btGuardar.setToolTipText("Guardar");
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        lbClient.setText("##");

        Propietario.setText("Propietario");

        opClient.setText("Cliente");
        opClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opClientActionPerformed(evt);
            }
        });

        opSIIL.setText("SIIL");
        opSIIL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opSIILActionPerformed(evt);
            }
        });

        jLabel12.setText("Sucursal");

        cbSuc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccion...", "Tijuana", "Ensenada", "Mexicali" }));
        cbSuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSucActionPerformed(evt);
            }
        });

        tbTitems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num. Eco.", "Serie", "Modelo", "Marca", "Horometro", "Equipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbTitems);

        btBattery.setText("Bateria");
        btBattery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBatteryActionPerformed(evt);
            }
        });

        btCharger.setText("Cargador");
        btCharger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btChargerActionPerformed(evt);
            }
        });

        btForklift.setText("Montacargas");
        btForklift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btForkliftActionPerformed(evt);
            }
        });

        opNote.setText("Agregar a hoja de Renta");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(Propietario)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(opClient)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(opSIIL))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel12))
                                    .addGap(23, 23, 23)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txClient)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btClient, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(cbusomov, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cbtmov, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txSA)
                                        .addComponent(txfirma)
                                        .addComponent(cbSuc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txfhmov, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(txFolio))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(lbClient))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(17, 17, 17))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btBattery)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btCharger)
                                        .addGap(18, 18, 18)
                                        .addComponent(btForklift))
                                    .addComponent(opNote))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(244, 244, 244)
                .addComponent(btGuardar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Propietario)
                            .addComponent(opClient)
                            .addComponent(opSIIL))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txfhmov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(cbtmov, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cbusomov, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(opNote))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btClient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txClient, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbClient))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfirma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel12))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbSuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btBattery)
                        .addComponent(btCharger)
                        .addComponent(btForklift)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btGuardar)
                .addGap(162, 162, 162))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
       
        if(convertTMov(cbtmov).equals("ent") && convertUso(cbusomov).equals("rep") && opSIIL.isSelected())
        {
            forReparacion();
        }
        else if(convertTMov(cbtmov).equals("canc"))
        {
            forCancel();
        }
        else if(convertTMov(cbtmov).equals("ret"))
        {
            forRecuperacion();
        }
        else if(opClient.isSelected())
        {
            forClient();
        }
        else if(opSIIL.isSelected())
        {
            forSIIL();
        }      
    }//GEN-LAST:event_btGuardarActionPerformed

    private void btClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClientActionPerformed
        comp = new SIIL.Server.Company();
        JFrame frm = new JFrame();
        JDialog dlg = new JDialog(frm,"Seleccionar cliente",true);
        MySQL conn = new MySQL();
        conn.Create();
        if(conn.getConnection() == null)
        {
            JOptionPane.showMessageDialog(this,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        SIIL.Clientes.ReadSelect read = new SIIL.Clientes.ReadSelect(comp,BD);
        dlg.setContentPane(read);
        dlg.setSize(460, 260);
        dlg.setVisible(true);
        txClient.setText(comp.getNumber());
        lbClient.setText(comp.getName());
    }//GEN-LAST:event_btClientActionPerformed

    private void opSIILActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opSIILActionPerformed
        cleanTitems();
        //mov.setTitems(new ArrayList<SIIL.Server.Titem>());
    }//GEN-LAST:event_opSIILActionPerformed

    private void opClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opClientActionPerformed
        cleanTitems();
        //mov.setTitems(new ArrayList<SIIL.Server.Titem>());
    }//GEN-LAST:event_opClientActionPerformed

    private void txFolioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txFolioFocusLost
        validFolio();
    }//GEN-LAST:event_txFolioFocusLost

    private void txfhmovFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfhmovFocusLost
        validFhMov();
    }//GEN-LAST:event_txfhmovFocusLost

    private void txSAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txSAFocusLost
        validSA();
    }//GEN-LAST:event_txSAFocusLost

    private void txClientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txClientKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            comp = new SIIL.Server.Company();
            comp.setBD(BD);
            comp.setNumber(txClient.getText());
            
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                dbserver = new Database(serverConfig);
            } 
            catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
            {
                JOptionPane.showMessageDialog(this,
                    "Fallo importacion.",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
            
            if(comp.complete(dbserver))
            {
                lbClient.setText(comp.getName());
            }
            else
            {
                if(comp == null)
                {
                JOptionPane.showMessageDialog(this, "Numero de cliente desconocido", 
                        "Error externo", JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    comp=null;
                    lbClient.setText("###");
                }
            }
            dbserver .close();
        }                
    }//GEN-LAST:event_txClientKeyReleased

    private void cbtmovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbtmovActionPerformed
        if(cbtmov.getSelectedIndex() == 4)
        {
            cbusomov.setEnabled(false);
            txSA.setEnabled(false);
            txClient.setEnabled(false);
            btClient.setEnabled(false);
        }
        else if(cbtmov.getSelectedIndex() == 5)
        {
            cbusomov.setEnabled(false);
            txSA.setEnabled(false);
            txClient.setEnabled(false);
            btClient.setEnabled(false);
            txfirma.setEnabled(false);
            cbSuc.setEnabled(false);
            txClient.setEnabled(false);
            btBattery.setEnabled(false);
            btCharger.setEnabled(false);
            btForklift.setEnabled(false);
            opClient.setEnabled(false);
            opSIIL.setEnabled(false);
        }
        else
        {
            cbusomov.setEnabled(true);
            txSA.setEnabled(true);
            txClient.setEnabled(true);
            btClient.setEnabled(true);
            txfirma.setEnabled(true);
            cbSuc.setEnabled(true);
            txClient.setEnabled(true);
            btBattery.setEnabled(true);
            btCharger.setEnabled(true);
            btForklift.setEnabled(true);
            opClient.setEnabled(true);
            opSIIL.setEnabled(true);
        }
    }//GEN-LAST:event_cbtmovActionPerformed

    private void btBatteryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBatteryActionPerformed
        String strOwner;
        if(opClient.isSelected())
        {
            strOwner = "client";
        }
        else if(opSIIL.isSelected())
        {
            strOwner = "SIIL";            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Indique el propietario del Equipo", 
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        TitemCRUD capFork = new TitemCRUD(tbTitems,"battery",strOwner,titems,BD);
        JDialog dlg = new JDialog(new JFrame(),"Agregar Bateria",true);
        dlg.setContentPane(capFork);
        dlg.setSize(300, 410);
        dlg.setResizable(true);
        dlg.setVisible(true);
    }//GEN-LAST:event_btBatteryActionPerformed

    private void btForkliftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btForkliftActionPerformed
        String strOwner;
        if(opClient.isSelected())
        {
            strOwner = "client";
        }
        else if(opSIIL.isSelected())
        {
            strOwner = "SIIL";            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Indique el propietario del Equipo", "Error Externo" 
                    , JOptionPane.ERROR_MESSAGE);
            return;
        }
        TitemCRUD capFork = new TitemCRUD(tbTitems,"forklift",strOwner,titems,BD);
        JDialog dlg = new JDialog(new JFrame(),"Agregar Montacargas",true);
        dlg.setContentPane(capFork);
        dlg.setSize(300, 410);
        dlg.setResizable(true);
        dlg.setVisible(true);
    }//GEN-LAST:event_btForkliftActionPerformed

    private void btChargerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btChargerActionPerformed
        String strOwner;
        if(opClient.isSelected())
        {
            strOwner = "client";
        }
        else if(opSIIL.isSelected())
        {
            strOwner = "SIIL";            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Indique el propietario del Equipo", "Error Externo" 
                    , JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        TitemCRUD capFork = new TitemCRUD(tbTitems,"charger",strOwner,titems,BD);
        JDialog dlg = new JDialog(new JFrame(),"Agregar Cargador",true);
        dlg.setContentPane(capFork);
        dlg.setSize(300, 410);
        dlg.setResizable(true);
        dlg.setVisible(true);
    }//GEN-LAST:event_btChargerActionPerformed

    private void cbusomovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbusomovActionPerformed
        if( cbtmov.getSelectedIndex() == 3 && cbusomov.getSelectedIndex() == 7 && opSIIL.isSelected() )
        {
            txClient.setEnabled(false);
            lbClient.setEnabled(false);
            btClient.setEnabled(false);
        }
        else
        {
            txClient.setEnabled(true);
            lbClient.setEnabled(true);
            btClient.setEnabled(true);
        }
    }//GEN-LAST:event_cbusomovActionPerformed

    private void cbSucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSucActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSucActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Propietario;
    private javax.swing.JButton btBattery;
    private javax.swing.JButton btCharger;
    private javax.swing.JButton btClient;
    private javax.swing.JButton btForklift;
    private javax.swing.JButton btGuardar;
    private javax.swing.JComboBox cbSuc;
    private javax.swing.JComboBox cbtmov;
    private javax.swing.JComboBox cbusomov;
    private javax.swing.ButtonGroup grOwner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbClient;
    private javax.swing.JRadioButton opClient;
    private javax.swing.JCheckBox opNote;
    private javax.swing.JRadioButton opSIIL;
    private javax.swing.JTable tbTitems;
    private javax.swing.JTextField txClient;
    private javax.swing.JTextField txFolio;
    private javax.swing.JTextField txSA;
    private javax.swing.JTextArea txaNota;
    private javax.swing.JTextField txfhmov;
    private javax.swing.JTextField txfirma;
    // End of variables declaration//GEN-END:variables

    private TargetMov deduceTarget(ArrayList<SIIL.Server.Titem> ts) 
    {
        int iFork = 0;
        int iCharg = 0;
        int iBatt = 0;
        
        //ArrayList<SIIL.Server.Titem> ts = mov.getTitems();
        for (Titem t : ts) 
        {
            String strclass = t.toString().split("@")[0];
            switch (strclass) 
            {
                case "SIIL.Server.Forklift":
                    iFork++;
                    forklift = (SIIL.Server.Forklift) t;
                    break;
                case "SIIL.Server.Charger":
                    iCharg++;
                    charger = (SIIL.Server.Charger) t;
                    break;
                case "SIIL.Server.Battery":
                    iBatt++;
                    battery = (SIIL.Server.Battery) t;
                    break;
            }
        }
        
        if(iFork == 1 && iCharg == 1 && iBatt == 1)
        {
            forklift.setBattery(battery);
            forklift.setCharger(charger);
            return TargetMov.Forklift;
        }
        else if(iFork == 1 && iCharg == 1)
        {
            forklift.setCharger(charger);
            return TargetMov.Forklift;
        }
        else if(iFork == 1 && iBatt == 1)
        {
            forklift.setBattery(battery);
            return TargetMov.Forklift;
        }
        else if(iFork == 1)
        {
            return TargetMov.Forklift;
        }
        else if(iFork == 0 && iBatt == 1)
        {
            return TargetMov.Battery;
        }
        else if(iFork == 0 && iCharg  == 1)
        {
            return TargetMov.Battery;
        }
        else if(iFork == 0 && iBatt > 1)
        {
            return TargetMov.Batteries;
        }
        
        return TargetMov.Ambiguous;
    }
    private void forRecuperacion() 
    {        
        forReturn(SIIL.Server.Movimiento.Command.Recuperacion);        
    }
    
    private void forReparacion() 
    {        
        forReturn(SIIL.Server.Movimiento.Command.Reparacion);        
    }
    
    private void forReturn(SIIL.Server.Movimiento.Command cmd)
    {
        mov.setBD(BD);
        if(opClient.isSelected())
        {
            JOptionPane.showMessageDialog(this, "Está operacion no puede ser aplicada con clientes"
                    , "Error Interno", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(opSIIL.isSelected())
        {
            mov.setOwner("SIIL");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique el propietario del equipo.", "Error externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(validFolio())
        {
            mov.setFolio(txFolio.getText());
        }
        
        if(txfhmov.getText().length() > 0)
        {
            try 
            {
                mov.setFhMov(txfhmov.getText());
            } 
            catch (ParseException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique la fecha del movimiento", "Error externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(txfirma.getText().length() > 0 )
        {
            mov.setFirma(txfirma.getText());
        }
        if(converSuc() == null)
        {
            JOptionPane.showMessageDialog(this, "Indique la sucursal", "Error Externo", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            mov.setSucursal(converSuc()); 
        }       
        TargetMov targetmov = deduceTarget(titems);
                
        if(txaNota.getText().length()>0)
        {
            mov.setNote(txaNota.getText());
        }
        if(txSA.getText().length()>0)
        {
            mov.setSA(txSA.getText());
        }
        if(comp != null)
        {
            mov.setCompany(comp);
        }
        mov.setTmov(convertTMov(cbtmov));
        mov.setUso(convertUso(cbusomov));
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();     
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        }
        catch(ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        int flRet;
        
        if(targetmov == TargetMov.Forklift)
        {
            flRet = mov.Return(dbserver,forklift,titems,cmd,opNote.isSelected());
        }
        else if(targetmov == TargetMov.Battery)
        {
            flRet=0;
            try 
            {
                flRet = mov.insert(dbserver, titems);
            } 
            catch (Exception ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "La operacion de retorno es para un montacargas o bateria, mas de uno causa ambigüedad del objeto a retornar"
                    , "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //minio es el registro de movimiento, registro del objetivo y el update para resumov.
        //maximo es el registro de movimiento y un registro por cada Titem
        //tambien se actualizan las sucursales de cada titem
        if(flRet > 1 &&  flRet < titems.size() * 2 + 3  && titems.size() > 0)
        {
            try 
            {
                dbserver.commit();
                JOptionPane.showMessageDialog(this, "Operación completada exitosamente.");
                ((Window)SwingUtilities.getWindowAncestor(this)).dispose();
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this, "Operación Fallida","Error Interno", JOptionPane.ERROR_MESSAGE);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    private boolean validFolio() 
    {
        if(txFolio.getText().matches("^00[1-9]|0[1-9][0-9]|[12][0-9][0-9]|300$"))// 
        {
            return true;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "En el folio es un valor numerico entre 001 y 300.", "Error Externo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean validFhMov() 
    {
        if(txfhmov.getText().matches("^(0?[1-9]|[12][0-9]|3[01])[\\/](0?[1-9]|1[012])[\\/]\\d{4}$"))
        {
            return true;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "La fecha es incorrecta, el formato correcto es dd/mm/yyyy", "Error Externo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean validSA() 
    {
        if(txSA.getText().matches("^[0-9]+$"))
        {
            return true;
        }        
        else if(txSA.getText().length()>0 && !txSA.getText().matches("^[0-9]+$"))
        {
            JOptionPane.showMessageDialog(this, "EL formato del SA es incorrecto",
                        "Error Externo", JOptionPane.ERROR_MESSAGE); 
            return false;
        }
        else
        {
            return false;
        }
    }

    public String convertUso(JComboBox cbusomov) 
    {
        switch(cbusomov.getSelectedIndex())
        {
            case 0:
                break;
            case 1:
                return "disp";
            case 2:
                return "rtacp";
            case 3:
                return "pres";
            case 4:   
                return "rtaoc"; 
            case 5:    
                return "rep";  
            case 6:    
                return "vta"; 
            case 7:    
                return "mov";  
            case 8:
                return "tpint";
        }
        return "";
    }

    private boolean validTMov() 
    {
        if(cbtmov.getSelectedIndex()>0) 
        {
            return true;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique el tipo de movimiento",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean validUso() 
    {
        if(cbusomov.getSelectedIndex() > 0 )
        {
            return true;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique el Uso del montacargas",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean validCompany() 
    {
        if(comp == null)
        {
            JOptionPane.showMessageDialog(this, "Indique el cliente",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return false;            
        }
        return true;
    }

    private boolean validFirma() 
    {
        if(txfirma.getText().length()>0)
        {
            return true;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Especifique quien firma",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean validNote() 
    {
        return true;
    }

    private String converSuc() 
    {
        switch((String)cbSuc.getSelectedItem())
        {
            case "Tijuana":
                return "bc.tj";
            case "Mexicali":
                return "bc.mx";
            case "Ensenada":
                return "bc.ens";
        }
        return null;
    }

    private void forClient()
    {
        mov.setBD(BD);
        if(opClient.isSelected())
        {
            mov.setOwner("client");
        }
        else if(opSIIL.isSelected())
        {
            mov.setOwner("SIIL");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique el propietario del equipo.", "Error externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(validFolio())
        {
            mov.setFolio(txFolio.getText());
        }
        
        if(txfhmov.getText().length() > 0)
        {
            try 
            {
                mov.setFhMov(txfhmov.getText());
            } 
            catch (ParseException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique la fecha del movimiento", "Error externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        mov.setTmov(convertTMov(cbtmov));
        mov.setUso(convertUso(cbusomov));
        
        if(txSA.getText().length() > 0)
        {
            mov.setSA(txSA.getText());
        }
                
        if(comp != null )
        {
            mov.setCompany(comp);
        }
        else if(cbtmov.getSelectedIndex() != 4)
        {
            JOptionPane.showMessageDialog(this, "Indique el cliente", "Error externo", JOptionPane.ERROR_MESSAGE);
        }
        
        if(txfirma.getText().length() > 0 )
        {
            mov.setFirma(txfirma.getText());
        }
        if(converSuc() == null)
        {
            JOptionPane.showConfirmDialog(this, "Indique la sucursal", "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else
        {
            mov.setSucursal(converSuc()); 
        }
        mov.setNote(txaNota.getText());
        
        if(comp != null )
        {
            mov.setCompany(comp);
        }
        else if(cbtmov.getSelectedIndex() != 4)
        {
            JOptionPane.showMessageDialog(this, "Seleccione el cliente", "Error externo"
                    , JOptionPane.ERROR_MESSAGE);
            return;
        }
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        } 
        
        int flMov = 0;
        try 
        {
            flMov = mov.insert(dbserver ,titems);
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        if(flMov == 1 + titems.size()  && titems.size() > 0)
        {
            try 
            {
                dbserver.commit();   
                JOptionPane.showMessageDialog(this, "Todos los datos se guardaron correctamente.");
                ((Window)SwingUtilities.getWindowAncestor(this)).dispose();
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this, "Un error inesperado ocurrio, ningún dato será guardado.", "Error interno", JOptionPane.ERROR_MESSAGE);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
        dbserver.close();
    }

    private String convertTMov(JComboBox cbtmov) 
    {
        switch(cbtmov.getSelectedIndex())
        {
            case 0:
                return null;
            case 1:
                return "ent";
            case 2:
                return "sal";
            case 3:
                return "mov";
            case 4:
                return "ret";
            case 5:
                return "canc";
        }
        return null;
    }

    private void forSIIL() 
    {
        mov.setBD(BD);
        if(opClient.isSelected())
        {
            mov.setOwner("client");
        }
        else if(opSIIL.isSelected())
        {
            mov.setOwner("SIIL");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique el propietario del equipo.", "Error externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(validFolio())
        {
            mov.setFolio(txFolio.getText());
        }
        
        if(txfhmov.getText().length() > 0)
        {
            try 
            {
                mov.setFhMov(txfhmov.getText());
            } 
            catch (ParseException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique la fecha del movimiento", "Error externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        mov.setTmov(convertTMov(cbtmov));
        mov.setUso(convertUso(cbusomov));
        
        if(txSA.getText().length() > 0)
        {
            mov.setSA(txSA.getText());
        }
        
        if( cbtmov.getSelectedIndex() == 3 && cbusomov.getSelectedIndex() == 7 )
        {
            ;//se optendra de la base de datos
        }
        else if(comp != null )
        {
            mov.setCompany(comp);
        }
        else if(cbtmov.getSelectedIndex() != 4)
        {
            JOptionPane.showMessageDialog(this, "Seleccione el cliente", "Error externo"
                    , JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(txfirma.getText().length() > 0 )
        {
            mov.setFirma(txfirma.getText());
        }
        if(converSuc() == null)
        {
            JOptionPane.showMessageDialog(this, "Indique la sucursal", "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else
        {
            mov.setSucursal(converSuc()); 
        }
        mov.setNote(txaNota.getText());
        
        
        SIIL.Server.Resumov rmov = new SIIL.Server.Resumov();
        TargetMov targetmov = deduceTarget(titems);
        boolean flB = true;
        boolean flC = true;
        int flRMov = 0;
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        if(targetmov == TargetMov.Forklift)
        {  
            if(forklift.getBattery() != null)
            {
                flB = forklift.linkBattery(dbserver);
            }
            if(forklift.getCharger() != null)
            {
                flC = forklift.linkCharger(dbserver);
            }
            rmov.setForklift(forklift);
            
            //Para movimiento-movimiento no se hactualiza la resumov
            if(mov.getUso().equals("mov") && mov.getTmov().equals("mov"))
            {
                rmov.downloadCompany(dbserver);
                mov.setCompany(rmov.getCompany());
            }
            else if(comp != null)
            {
                rmov.setCompany(comp);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Indique el cliente", "Error Externo", JOptionPane.ERROR_MESSAGE);
                try {
                    dbserver.rollback();
                } catch (SQLException ex) {
                    Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
                }
                return;
            }
            rmov.setUso(convertUso(cbusomov));
            if(opNote.isSelected())
            {
                rmov.setNote(txaNota.getText());
            }
            else
            {
                rmov.setNote("");
            }
            rmov.setSucursal(converSuc());
            try {
                rmov.setFhMov(txfhmov.getText());
            } catch (ParseException ex) {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            flRMov = rmov.update(dbserver);
        }
        else if(targetmov == TargetMov.Battery || targetmov == TargetMov.Batteries)
        {
            flRMov = -1;
        }
        
        int flMov = 0;
        try 
        {
            flMov = mov.insert(dbserver,titems);
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        if((flMov <= 1 + titems.size()*2) && ( flB && flC && ( flRMov == 1 || flRMov == -1)) && titems.size() > 0)
        {
            try 
            {
                dbserver.commit();   
                JOptionPane.showMessageDialog(this, "Todos los datos se guardaron correctamente.");
                ((Window)SwingUtilities.getWindowAncestor(this)).dispose();
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this, "Un error inesperado ocurrio, ningún dato será guardado.", "Error interno", JOptionPane.ERROR_MESSAGE);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
        dbserver.close();
    }

    private void cleanTitems() 
    {
        DefaultTableModel dm = ((DefaultTableModel)tbTitems.getModel());
        int rows = dm.getRowCount();
        for(int i = 0; i < rows; ++i)
        {
            dm.removeRow(0);
        }
    }

    private void forCancel() 
    {
        if(validFolio())
        {
            mov.setFolio(txFolio.getText());
        }
        
        if(txfhmov.getText().length() > 0)
        {
            try 
            {
                mov.setFhMov(txfhmov.getText());
            } 
            catch (ParseException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Indique la fecha del movimiento", "Error externo", JOptionPane.ERROR_MESSAGE);
            return;
        }        
        mov.setNote(txaNota.getText());
        mov.setBD(BD);
        mov.setTmov(convertTMov(cbtmov));

        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        int flMov = 0;
        try 
        {
            flMov = mov.insert(dbserver ,titems);
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
        if(flMov == 1)
        {
            try 
            {
                dbserver.commit();   
                JOptionPane.showMessageDialog(this, "Todos los datos se guardaron correctamente.");                
                ((Window)SwingUtilities.getWindowAncestor(this)).dispose();
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this, "Un error inesperado ocurrio, ningún dato será guardado.", "Error interno", JOptionPane.ERROR_MESSAGE);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovCreate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
        dbserver.close();
    } 
}
