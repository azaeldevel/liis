
package SIIL.Servicios;

import SIIL.Server.Database;
import SIIL.Server.MySQL;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 *
 * @author areyes
 */
public class MovinfBC extends javax.swing.JPanel 
{
    String BD;
    String number;
    //SIIL.Server.Movgru movgru;
    SIIL.Server.Battery battery;
    SIIL.Server.Charger charger;
    SIIL.Server.Resumov resumov;
    SIIL.Server.Forklift forklift;
    
    /**
     * Creates new form Movinf
     */
    public MovinfBC(String bd, String n) 
    {
        initComponents();
        BD = bd;
        number = n;
        fillView();
        //movgru = new SIIL.Server.Movgru();  
        //movgru.setBD(BD);
        //movgru.setItemClass("inf");
        //movgru.setFhMov(new Date());
        forklift = new SIIL.Server.Forklift();
        forklift.setBD(BD);
        forklift.setNumber(number);        
        //movgru.setForklift(forklift);
        resumov = new SIIL.Server.Resumov();
        resumov.setForklift(forklift);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbEq = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txCharger = new javax.swing.JTextField();
        txBattery = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaNota = new javax.swing.JTextArea();
        btSave = new javax.swing.JButton();

        lbEq.setText("Equipo");

        jLabel2.setText("Cargador");

        jLabel3.setText("Bateria");

        txCharger.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txChargerFocusLost(evt);
            }
        });

        txBattery.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txBatteryFocusLost(evt);
            }
        });

        jLabel4.setText("Nota");

        txaNota.setColumns(20);
        txaNota.setRows(5);
        txaNota.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txaNotaFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(txaNota);

        btSave.setText("Guardar");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbEq))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(txCharger, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(txBattery, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(btSave)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbEq)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txCharger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txBattery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btSave)
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txChargerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txChargerFocusLost
        charger = new SIIL.Server.Charger();
        charger.setNumber(txCharger.getText());
        charger.setBD(BD);
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        if(dbserver.getConnection() == null)
        {
            JOptionPane.showMessageDialog(this,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        if(charger.checkExistCh(dbserver))
        {
            //movgru.setCharger(charger);
            forklift.setCharger(charger);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El numero económico es desconocido", 
                "Error Externo", JOptionPane.ERROR_MESSAGE);
        }
        dbserver.close();
    }//GEN-LAST:event_txChargerFocusLost

    private void txBatteryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txBatteryFocusLost
        battery = new SIIL.Server.Battery();
        battery.setNumber(txBattery.getText());
        battery.setBD(BD);
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        if(dbserver.getConnection() == null)
        {
            JOptionPane.showMessageDialog(this,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        if(battery.checkExistBt(dbserver))
        {               
            //movgru.setBattery(battery);
            forklift.setBattery(battery);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El numero económico es desconocido", 
                "Error Externo", JOptionPane.ERROR_MESSAGE);
        }
        dbserver.close();
    }//GEN-LAST:event_txBatteryFocusLost

    private void txaNotaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txaNotaFocusLost
        //movgru.setNote(txaNota.getText());
        resumov.setNote(txaNota.getText());
    }//GEN-LAST:event_txaNotaFocusLost

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        updateBD();
    }//GEN-LAST:event_btSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSave;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbEq;
    private javax.swing.JTextField txBattery;
    private javax.swing.JTextField txCharger;
    private javax.swing.JTextArea txaNota;
    // End of variables declaration//GEN-END:variables

    private void fillView() 
    {
        MySQL conn = new MySQL();
        conn.Create();
        if(conn.getConnection() == null)
        {
            JOptionPane.showMessageDialog(this,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        try 
        {
            Statement stmt = conn.getConnection().createStatement();
            String sql = "SELECT CONCAT(fnumber,', ',fmarca,' ',fmodelo,' ',fserie) as eq,note,batteryNumber,chargerNumber FROM Resumov_Resolved WHERE (chargerBD='" + BD + "' or chargerBD = NULL) and (batteryBD = '" + BD + "' or batteryBD = NULL) and fBD='" + BD + "' and fnumber='" + number + "'";
            ResultSet rs = stmt.executeQuery(sql);
            //System.out.println(sql);
            if(rs.next())
            {
                lbEq.setText(rs.getString("eq"));
                txaNota.setText(rs.getString("note"));
                txCharger.setText(rs.getString("chargerNumber"));
                txBattery.setText(rs.getString("batteryNumber"));
            }
            else
            {
                //JOptionPane.showMessageDialog(this, "No se encontro el elemento seleccionado en la Base de datos.", "Error Interno", JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(MovinfBC.class.getName()).log(Level.SEVERE, null, ex);
        }
        conn.Close();
    }

    private void updateBD() 
    {
        int flgru = 0;
        int flUp = 0;
        boolean flC = true;
        boolean flB = true;
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        if(dbserver.getConnection() == null)
        {
            JOptionPane.showMessageDialog(this,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        try 
        {
            //flgru = movgru.insert(conn);
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(MovinfBC.class.getName()).log(Level.SEVERE, null, ex);
        }
        flUp = resumov.update(dbserver);
        if(forklift.getCharger() != null)
        {
            //flC = forklift.linkCharger(conn);
        }
        if(forklift.getBattery() != null)
        {
            //flB = forklift.linkBattery(conn);
        }
        
        if(flC && flB && ( flUp == 0 || flUp == 1))
        {
            try 
            {
                dbserver.commit();
                JOptionPane.showMessageDialog(this, "Cambios realizados");
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovinfBC.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this, "Cambios no realizados",
                        "Error Interno",JOptionPane.ERROR_MESSAGE);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(MovinfBC.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        dbserver.close();
    }
}
