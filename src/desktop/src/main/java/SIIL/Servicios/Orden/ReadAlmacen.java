
package SIIL.Servicios.Orden;

import SIIL.Server.Database;
import SIIL.core.Office;
import static SIIL.servApp.BACKWARD_BD;
import SIIL.service.quotation.ServiceQuotation;
import SIIL.services.Trabajo;
import SIIL.services.Trabajo.Sheet;
import SIIL.trace.Trace;
import core.FailResultOperationException;
import core.OfficeComboBoxModel;
import java.awt.HeadlessException;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael Reyes
 */
public class ReadAlmacen extends javax.swing.JPanel 
{
    private Database dbserver;
    private Office office;
    
    private ServiceQuotation getSelectedObject() 
    {
        if(tbList.getSelectedRow() < 0) 
        {
            return null;
        }
        else
        {
            ReadAlmacenTableModel model = (ReadAlmacenTableModel) tbList.getModel();
            return model.getValueAt(tbList.convertRowIndexToModel(tbList.getSelectedRow()));
        }
    }
    
    private List<ServiceQuotation> getSelectedObjects() 
    {
        if(tbList.getSelectedRow() < 0) 
        {
            return null;
        }
        else
        {
            List<ServiceQuotation> list = new ArrayList<>();
            int[] rows = tbList.getSelectedRows();
            int[] rowsConvert = new int[rows.length];
            for(int i : rows)
            {
                ReadAlmacenTableModel model = (ReadAlmacenTableModel) tbList.getModel();
                list.add(model.getValueAt(tbList.convertRowIndexToModel(i)));
            }
            return list;
        }
    }

    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }

    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed())dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        } 
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    /**
     * Creates new form ReadETA
     */
    public ReadAlmacen() 
    {
        initComponents();
        initComponents2();
    }

    private void initComponents2() 
    {
        tbList.setModel(new ReadAlmacenTableModel());
        tbList.setAutoCreateRowSorter(true);
        OfficeComboBoxModel offices = new OfficeComboBoxModel();
        try 
        {
            openDatabase(true);
            offices.fill(dbserver);
            cbOffice.setModel(offices);
        }
        catch (SQLException ex) 
        {
            //Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnMian = new javax.swing.JPopupMenu();
        mnAddWork = new javax.swing.JMenuItem();
        mnDetail = new javax.swing.JMenuItem();
        mnRows = new javax.swing.JMenuItem();
        dater = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbList = new javax.swing.JTable();
        btLoad = new javax.swing.JButton();
        cbOffice = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        mnAddWork.setText("Agregar a relacion de Trabajo");
        mnAddWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnAddWorkActionPerformed(evt);
            }
        });
        mnMian.add(mnAddWork);

        mnDetail.setText("Detalle");
        mnDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDetailActionPerformed(evt);
            }
        });
        mnMian.add(mnDetail);

        mnRows.setText("Renglones");
        mnRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnRowsActionPerformed(evt);
            }
        });
        mnMian.add(mnRows);

        dater.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daterActionPerformed(evt);
            }
        });

        tbList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folio", "Encargado", "Cliente", "E.T.A.", "S.A.", "PO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbList.setComponentPopupMenu(mnMian);
        jScrollPane1.setViewportView(tbList);

        btLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reload.png"))); // NOI18N
        btLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadActionPerformed(evt);
            }
        });

        cbOffice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "Tijuana", "Mexicali", "Ensenada", " " }));
        cbOffice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOfficeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("*La fecha E.T.A. y la fecha Arribo difieren, la actual pantalla muestra seg√∫n fecha de arribo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbOffice, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dater, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btLoad)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbOffice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(btLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void daterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daterActionPerformed
        loadData();
    }//GEN-LAST:event_daterActionPerformed

    private void loadData() throws HeadlessException {
        Date date = dater.getDate();
        ReadAlmacenTableModel model = (ReadAlmacenTableModel) tbList.getModel();
        try
        {
            openDatabase(false);
            model.listing(dbserver, date, office);
        }
        catch (SQLException ex)
        {
            //Logger.getLogger(ReadAlmacen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void mnAddWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnAddWorkActionPerformed
        List<ServiceQuotation> sel = getSelectedObjects();
        if(sel  != null)
        {
            openDatabase(true);
            Trabajo flcreate = null;
            Trace contexTrace = new Trace(BACKWARD_BD, SIIL.servApp.cred.getUser(), "Importacin de cotizaciones hacia Relacion de Trabajo");
            try
            {
                Date dt = new Date();
                Calendar c = Calendar.getInstance();
                c.setTime(dt);
                //c.add(Calendar.DATE, 1);
                dt = c.getTime();
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                String strRet = (String) JOptionPane.showInputDialog(
                    this,
                    "Indique la fecha(dia/mes/a√±o)",
                    "Confirme operaci√≥n",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    df.format(dt));
                if(strRet == null)
                {
                    dbserver.rollback();
                    closeDatabase();
                    return ;
                }
                dt = df.parse(strRet);

                for(ServiceQuotation orden : sel)
                {
                    flcreate = Trabajo.create(dbserver, Sheet.CAMPO, orden.getEntreprise(), orden,dt,"Importada desde Cotizacion por " + SIIL.servApp.cred.getUser(),SIIL.servApp.cred.getUser(),contexTrace);
                    if(flcreate == null)
                    {
                        dbserver.rollback();
                        closeDatabase();
                        throw new FailResultOperationException("Fallo la importacion de Cotizaciones");
                    }
                }
                if(flcreate != null)
                {
                    int option = JOptionPane.showConfirmDialog(
                    this,
                    "Se van a importar " + sel.size() + " elementos a la Hoja de Relacion de Trabajo,¬øDesea continuar?",
                    "An Inane Question",
                    JOptionPane.YES_NO_OPTION);
                    if(option == JOptionPane.YES_OPTION)
                    {
                        dbserver.commit();
                        closeDatabase();
                    }
                    else
                    {
                        dbserver.rollback();
                        dbserver = null;
                    }
                }
            }
            catch (ParseException | SQLException ex)
            {
                //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
            } 
        }
    }//GEN-LAST:event_mnAddWorkActionPerformed

    private void btLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadActionPerformed
       loadData();
    }//GEN-LAST:event_btLoadActionPerformed

    private void mnDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDetailActionPerformed
        openDatabase(true);
        viewDetail(dbserver,getSelectedObject());
    }//GEN-LAST:event_mnDetailActionPerformed

    private void mnRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnRowsActionPerformed
        viewRows(getSelectedObject());
    }//GEN-LAST:event_mnRowsActionPerformed

    private void cbOfficeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOfficeActionPerformed
        if(cbOffice.getSelectedIndex() > 0)
        {
            if(cbOffice.getSelectedIndex() > 0)
            {
                office = (Office) cbOffice.getSelectedItem();
                loadData();
            }
            else
            {
                office = null;
            }
        }
        else
        {

        }
    }//GEN-LAST:event_cbOfficeActionPerformed

    private void viewRows(ServiceQuotation orden)
    {      
        openDatabase(true);
        if(orden == null) return ;
        try 
        {
            orden.fill(dbserver, SIIL.servApp.cred, orden.getID());
            orden.downQuotation(dbserver.getConnection());
        }
        catch (SQLException ex) 
        {
            //Logger.getLogger(getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        SIIL.sales.rows.Rows rows = new SIIL.sales.rows.Rows(orden);
        JDialog dlg = new JDialog();
        dlg.setSize(rows.getPreferredSize());
        dlg.setTitle("Reglones de cotizaci√≥n " + orden.getFullFolio());
        rows.setDialog(dlg);
        dlg.setContentPane(rows);
        int x = SIIL.servApp.getInstance().getDesktopPane().getSize().width/2 - dlg.getSize().width/2;
        int y = 10;
        dlg.setLocation(x, y);
        dlg.setLocationRelativeTo(null);
        dlg.setModal(true);
        dlg.setVisible(true);
        dbserver.close();
        return ;
    }
    
    private static void viewDetail(Database dbserver,ServiceQuotation orden) 
    {        
        if(orden == null) return;
        
        if(dbserver != null)    
        {
            try 
            {
                orden.fill(dbserver, SIIL.servApp.cred, orden.getID());
                orden.downQuotation(dbserver.getConnection());
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }
        SIIL.Servicios.Orden.Detail lor = new SIIL.Servicios.Orden.Detail(orden,SIIL.servApp.cred);
        SIIL.servApp.getInstance().getDesktopPane().add(lor);
        int x = SIIL.servApp.getInstance().getDesktopPane().getSize().width/2 - lor.getSize().width/2;
        int y = 10;
        lor.setLocation(x, y);
        lor.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLoad;
    private javax.swing.JComboBox cbOffice;
    private org.jdesktop.swingx.JXDatePicker dater;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnAddWork;
    private javax.swing.JMenuItem mnDetail;
    private javax.swing.JPopupMenu mnMian;
    private javax.swing.JMenuItem mnRows;
    private javax.swing.JTable tbList;
    // End of variables declaration//GEN-END:variables
}
