
package SIIL.Administracion.Cheques;

import SIIL.Server.Database;
import SIIL.Server.MySQL;
import SIIL.servApp;
import static SIIL.servApp.cred;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import jxl.Workbook;
import jxl.format.Colour;
import jxl.write.WritableCell;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael
 */
public class Lista extends javax.swing.JInternalFrame {

    /**
     * Creates new form Lista
     */
    public Lista(String bd,javax.swing.JDesktopPane dp) 
    {
        initComponents();
        desktopPane = dp;
        BD = bd;
        fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txLength = new javax.swing.JTextField();
        btUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        mnMain = new javax.swing.JMenuBar();
        mnMainCheque = new javax.swing.JMenu();
        mnMainChequeNew_15 = new javax.swing.JMenuItem();
        mnMainChequeNew_27 = new javax.swing.JMenuItem();
        mnMainChequeEdit = new javax.swing.JMenuItem();
        mnMainChequeExport = new javax.swing.JMenuItem();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setText("Buscar");

        txSearch.setToolTipText("");
        txSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txSearchKeyReleased(evt);
            }
        });

        jLabel2.setText("Cant.");

        jButton1.setText("...");
        jButton1.setEnabled(false);

        txLength.setText("50");

        btUpdate.setText("Actualizar");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fecha", "Num. Cheque", "Cliente", "Name Cliente", "Cantidad", "Moneda", "T. Cambio", "Conversion", "Facturas", "Sucursal", "Note", "Deposito"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        mnMainCheque.setText("Cheque");

        mnMainChequeNew_15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        mnMainChequeNew_15.setText("Nuevo v1.5");
        mnMainChequeNew_15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMainChequeNew_15ActionPerformed(evt);
            }
        });
        mnMainCheque.add(mnMainChequeNew_15);

        mnMainChequeNew_27.setText("Nuevo v2.7");
        mnMainChequeNew_27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMainChequeNew_27ActionPerformed(evt);
            }
        });
        mnMainCheque.add(mnMainChequeNew_27);

        mnMainChequeEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        mnMainChequeEdit.setText("Editar");
        mnMainChequeEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMainChequeEditActionPerformed(evt);
            }
        });
        mnMainCheque.add(mnMainChequeEdit);

        mnMainChequeExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        mnMainChequeExport.setText("Exportar");
        mnMainChequeExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMainChequeExportActionPerformed(evt);
            }
        });
        mnMainCheque.add(mnMainChequeExport);

        mnMain.add(mnMainCheque);

        setJMenuBar(mnMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 367, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnMainChequeNew_15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMainChequeNew_15ActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        if(dbserver.getConnection() == null)
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        if(cred.acces(dbserver,"Administracion.Cheques.Write"))
        {
            
        }
        else
        {
            JOptionPane.showMessageDialog(null,
                "No tiene permiso para realizar esta operacion",
                "Seguridad",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        SIIL.Administracion.Cheques.CU cu = new SIIL.Administracion.Cheques.CU(servApp.cred.getBD());
        desktopPane.add(cu);
        int x = desktopPane.getSize().width/2 - cu.getSize().width/2;
        int y = 10;
        cu.setLocation(x, y);
        cu.setVisible(true);
    }//GEN-LAST:event_mnMainChequeNew_15ActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        fillTable();
    }//GEN-LAST:event_btUpdateActionPerformed

    private void txSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSearchKeyReleased
        fillTable();
    }//GEN-LAST:event_txSearchKeyReleased

    private void mnMainChequeEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMainChequeEditActionPerformed
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        if(dbserver.getConnection() == null)
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        if(cred.acces(dbserver,"Administracion.Cheques.Write"))
        {
            
        }
        else
        {
            JOptionPane.showMessageDialog(null,
                "No tiene permiso para realizar esta operacion",
                "Seguridad",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        if(table.getSelectedRow() > -1)
        {
            ;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Primero seleccione un registro.",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String id = ((DefaultTableModel)table.getModel()).getValueAt(table.getSelectedRow(),0).toString();
        Cheque cheque = new Cheque();
        cheque.setID(id);        
        cheque.download(dbserver);
        SIIL.Administracion.Cheques.CU cu = new SIIL.Administracion.Cheques.CU(servApp.cred.getBD(),cheque);
        desktopPane.add(cu);
        int x = desktopPane.getSize().width/2 - cu.getSize().width/2;
        int y = 10;
        cu.setLocation(x, y);
        cu.setVisible(true);
    }//GEN-LAST:event_mnMainChequeEditActionPerformed

    private void mnMainChequeExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMainChequeExportActionPerformed
    MySQL conn = new MySQL();
    conn.Create();
    if(conn.getConnection() == null)
    {
        JOptionPane.showMessageDialog(this,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        return;
    }
    try 
    {
        final JFileChooser fc = new JFileChooser();

        //In response to a button click:
        String inputFile;
        //fc.setCurrentDirectory(new File("C:\\Users\\areyes\\Proyectos\\trunk\\src\\Cobranza"));
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            if(fc.getSelectedFile().getAbsolutePath().endsWith("xls"))
            {
                inputFile = fc.getSelectedFile().getAbsolutePath();
            }
            else
            {
                inputFile = fc.getSelectedFile().getAbsolutePath() + ".xls";
            }           
        }
        else
        {
            return ;
        }
        
        WritableWorkbook workbook = Workbook.createWorkbook(new File(inputFile));
        WritableSheet sheet = workbook.createSheet("Page1", 0);
  
        String Header[] = new String[10];
        Header[0] = "Fecha";
        Header[1] = "N. Cheque";
        Header[2] = "Cliente";
        Header[3] = "Cliente Nombre";
        Header[4] = "Cantidad";
        Header[5] = "Moneda";
        Header[6] = "T. Cambio";
        Header[7] = "Conversion";
        Header[8] = "Factura";
        Header[9] = "Sucursal";
        
        //Setting Background colour for Cells
        Colour bckcolor = Colour.GRAY_25;
        WritableCellFormat cellFormat = new WritableCellFormat();
        cellFormat.setBackground(bckcolor);
 
        //Setting Colour & Font for the Text
        WritableFont font = new WritableFont(WritableFont.ARIAL);
        font.setColour(Colour.BLACK);
        cellFormat.setFont(font);
            
        // Write the Header to the excel file
        for (int i = 0; i < Header.length; i++) 
        {
            jxl.write.Label label = new jxl.write.Label(i, 0, Header[i]);
            sheet.addCell(label);
            WritableCell cell = sheet.getWritableCell(i, 0);
            cell.setCellFormat(cellFormat);
        }
            
        genWhere();         
        String sql = "SELECT * FROM Cheques_Resolved ";
        if( where != null)
        {
            sql = sql + " WHERE " + where; 
        }
        Statement tsmt = null;        
        
        try 
        {
            tsmt = (Statement) conn.getConnection().createStatement();
            //System.out.println(sql);
            ResultSet rs = tsmt.executeQuery(sql);
            int rowCount = 0;
            jxl.write.Label label;
            while(rs.next())
            {
                rowCount++;
                label = new jxl.write.Label(0, rowCount, rs.getString("fh"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(1, rowCount, rs.getString("numcheque"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(2, rowCount, rs.getString("compNumber"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(3, rowCount, rs.getString("compName"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(4, rowCount, rs.getString("monto"));
                sheet.addCell(label);
                
                if(rs.getString("moneda").equals("mnx"))
                {
                    label = new jxl.write.Label(5, rowCount, "Pesos");
                }
                else if(rs.getString("moneda").equals("dll"))
                {
                    label = new jxl.write.Label(5, rowCount, "Dólares");
                }
                
                sheet.addCell(label);
                
                label = new jxl.write.Label(6, rowCount, rs.getString("dllCambio"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(7, rowCount, rs.getString("conv"));
                sheet.addCell(label);
                
                label = new jxl.write.Label(8, rowCount, rs.getString("fact"));
                sheet.addCell(label);
                
                if(rs.getString("suc").equals("bc.tj"))
                {
                    label = new jxl.write.Label(9, rowCount, "Tijuana");
                    sheet.addCell(label);
                }
                else if(rs.getString("suc").equals("bc.mx"))
                {
                    label = new jxl.write.Label(9, rowCount, "Mexicali");
                    sheet.addCell(label);
                }
                else if(rs.getString("suc").equals("bc.ens"))
                {
                    label = new jxl.write.Label(9, rowCount, "Ensenada");
                    sheet.addCell(label);
                }
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }        
        
        workbook.write();
        workbook.close();
    } 
    catch (WriteException e) 
    {
        System.err.println("Error al esribir en el workboo");
    }
    catch(IOException ioe)
    {
        System.err.println("Error al esribir en el workboo");
    }
    conn.Close();
    }//GEN-LAST:event_mnMainChequeExportActionPerformed

    private void mnMainChequeNew_27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMainChequeNew_27ActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        if(dbserver.getConnection() == null)
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        if(cred.acces(dbserver,"Administracion.Cheques.Write"))
        {
            
        }
        else
        {
            JOptionPane.showMessageDialog(null,
                "No tiene permiso para realizar esta operacion",
                "Seguridad",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        SIIL.Administracion.Cheques.CURow cu = new SIIL.Administracion.Cheques.CURow(servApp.cred.getBD());
        desktopPane.add(cu);
        int x = desktopPane.getSize().width/2 - cu.getSize().width/2;
        int y = 10;
        cu.setLocation(x, y);
        cu.setVisible(true);
    }//GEN-LAST:event_mnMainChequeNew_27ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar mnMain;
    private javax.swing.JMenu mnMainCheque;
    private javax.swing.JMenuItem mnMainChequeEdit;
    private javax.swing.JMenuItem mnMainChequeExport;
    private javax.swing.JMenuItem mnMainChequeNew_15;
    private javax.swing.JMenuItem mnMainChequeNew_27;
    private javax.swing.JTable table;
    private javax.swing.JTextField txLength;
    private javax.swing.JTextField txSearch;
    // End of variables declaration//GEN-END:variables
    String BD;
    javax.swing.JDesktopPane desktopPane;
    String where;
    
    private void fillTable() 
    {
        DefaultTableModel dm = ((DefaultTableModel)table.getModel());
        int rows = dm.getRowCount();
        for(int i = 0; i < rows; ++i)
        {
            dm.removeRow(0);
        }
        
        MySQL conn = new MySQL();
        conn.Create();
        if(conn.getConnection() == null)
        {
            JOptionPane.showMessageDialog(null,
                "Conexion a Servidor Invalida",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
        
        String sql = "SELECT * FROM Cheques_Resolved";
                
        genWhere();        
        
        Statement stmt = null;        
        try 
        {
            if(where != null)
            {
                sql = sql + " WHERE " + where ;
                where = null;
            }
            stmt = (Statement) conn.getConnection().createStatement();
            System.out.println(sql);
            ResultSet rs = stmt.executeQuery(sql);
            Object[] row;
            while(rs.next())
            {
                row = new Object[14];
                row[0] = rs.getString("ID");                
                try 
                {
                    SimpleDateFormat userDate = new SimpleDateFormat("dd/MM/yyyy");
                    SimpleDateFormat dbDate = new SimpleDateFormat("yyyy-MM-dd");
                    if(rs.getString("fh") != null && !rs.getString("fh").isEmpty()) row[1] = userDate.format(dbDate.parse(rs.getString("fh")));
                } 
                catch (ParseException e) 
                {
                    e.printStackTrace();
                }                
                row[2] = rs.getString("numcheque");
                row[3] = rs.getString("compNumber");
                row[4] = rs.getString("compName");
                NumberFormat formatter = NumberFormat.getCurrencyInstance();
                row[5] = formatter.format(rs.getDouble("monto"));
                if(rs.getString("moneda") != null)
                {
                    if(rs.getString("moneda").equals("mnx"))
                    {
                        row[6] = "Pesos";
                    }
                    else if(rs.getString("moneda").equals("dll"))
                    {
                        row[6] = "Dólares";                          
                    }
                    else
                    {
                        row[6] = "???";
                    }
                }
                row[7] = rs.getString("dllCambio");
                row[8] = formatter.format(rs.getDouble("pesos"));
                row[9] = rs.getString("fact");
                if(rs.getString("suc") != null)
                {
                    if(rs.getString("suc").equals("bc.tj"))
                    {
                        row[10] = "Tijuana";
                    }
                    else if(rs.getString("suc").equals("bc.mx"))
                    {
                        row[10] = "Mexicali";
                    }
                    else if(rs.getString("suc").equals("bc.ens"))
                    {
                        row[10] = "Ensenada";
                    }
                    else
                    {
                        row[10] = "???";
                    }                        
                }
                row[11] = rs.getString("note");                
                try 
                {
                    SimpleDateFormat userDate = new SimpleDateFormat("dd/MM/yyyy");
                    SimpleDateFormat dbDate = new SimpleDateFormat("yyyy-MM-dd");
                    if(rs.getString("fhDeposito") != null && !rs.getString("fhDeposito").isEmpty()) row[12] = userDate.format(dbDate.parse(rs.getString("fhDeposito")));
                } 
                catch (ParseException e) 
                {
                    e.printStackTrace();
                }
                
                
                dm.addRow(row);
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(Lista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void genWhere() throws HeadlessException {
        if(where == null)
        {
            where = " (numcheque LIKE '%" + txSearch.getText() + "%' OR compNumber LIKE '%" + txSearch.getText() + "%' OR compName LIKE '%" + txSearch.getText() + "%' OR fact LIKE '%" + txSearch.getText() + "%' OR monto LIKE '%" + txSearch.getText() + "%' OR pesos LIKE '%" + txSearch.getText() + "%' OR fhDeposito LIKE '%" + txSearch.getText() + "%')";
            
            //filtro de sucursal
            if(SIIL.servApp.cred.getSuc().equals("bc.tj"))
            {
                ;
            }
            else
            {
                where = where + " AND suc = '" + SIIL.servApp.cred.getSuc() + "'";
            }
            
            where = where + " ORDER BY ID DESC ";
            
            if(txLength.getText().length() == 0)
            {
                ;
            }
            else if(txLength.getText().matches("^0$"))
            {
                ;
            }
            else if(txLength.getText().matches("^[0-9]+$"))
            {
                where = where + " LIMIT " + txLength.getText();
            }
            else
            {
                JOptionPane.showMessageDialog(this, "El formato de cant. de Registro es incorrecto", "Error Externo", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            //filtro de sucursal
            if(SIIL.servApp.cred.getSuc().equals("bc.tj"))
            {
                ;
            }
            else
            {
                where = " suc = '" + SIIL.servApp.cred.getSuc() + "'";
            }
        }
    }
}
