
package SIIL.purchase.cr;

import SIIL.Server.Database;
import SIIL.Server.MySQL;
import static SIIL.servApp.cred;
import java.awt.HeadlessException;
import java.io.IOException;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael
 */
public class List extends javax.swing.JInternalFrame 
{
    /**
     * Creates new form List
     */
    public List(String BD, javax.swing.JDesktopPane dt) 
    {
        initComponents();
        tbList.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbList.getColumnModel().getColumn(0).setPreferredWidth(100);
        tbList.getColumnModel().getColumn(1).setPreferredWidth(150);
        tbList.getColumnModel().getColumn(2).setPreferredWidth(150);
        tbList.getColumnModel().getColumn(3).setPreferredWidth(100);
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {;
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        desktopPane = dt;
        fillTable(dbserver);
                
        if(cred.acces(dbserver,"Purchase.CR.Create"))
        {
            mnOpNew.setEnabled(true);
        }
        else
        {
            mnOpNew.setEnabled(false);
        }
        if(cred.acces(dbserver,"Purchase.CR.Delete"))
        {
            mnOpDel.setEnabled(true);
        }
        else
        {
            mnOpDel.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txSearch = new javax.swing.JTextField();
        btSearch = new javax.swing.JButton();
        txLength = new javax.swing.JTextField();
        btUpdate = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbList = new javax.swing.JTable();
        txReport = new javax.swing.JButton();
        chPnPay = new javax.swing.JCheckBox();
        mnMian = new javax.swing.JMenuBar();
        mnOp = new javax.swing.JMenu();
        mnOpNew = new javax.swing.JMenuItem();
        mnOpPay = new javax.swing.JMenuItem();
        mnOpRpt = new javax.swing.JMenuItem();
        mnOpUpdate = new javax.swing.JMenuItem();
        mnOpClose = new javax.swing.JMenuItem();
        mnOpDel = new javax.swing.JMenuItem();
        mnRep = new javax.swing.JMenu();
        mnRepCR = new javax.swing.JMenuItem();
        mnRepDetailF = new javax.swing.JMenuItem();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Lista CR");

        jLabel1.setText("Buscar");

        txSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txSearchActionPerformed(evt);
            }
        });
        txSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txSearchKeyReleased(evt);
            }
        });

        btSearch.setText("...");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        txLength.setText("50");

        btUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reload.png"))); // NOI18N
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dialog-close.png"))); // NOI18N
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        tbList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "RFC", "Nombre", "Total", "Moneda", "Fecha", "Cuenta Contable", "Observaciones", "PO", "SA", "Facturas", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbList);

        txReport.setText("Reporte");
        txReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txReportActionPerformed(evt);
            }
        });

        chPnPay.setText("Solo pendientes de Pago");
        chPnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chPnPayActionPerformed(evt);
            }
        });

        mnOp.setText("Operaciones");

        mnOpNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        mnOpNew.setText("Nuevo");
        mnOpNew.setEnabled(false);
        mnOpNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpNewActionPerformed(evt);
            }
        });
        mnOp.add(mnOpNew);

        mnOpPay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        mnOpPay.setText("Pagar");
        mnOpPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpPayActionPerformed(evt);
            }
        });
        mnOp.add(mnOpPay);

        mnOpRpt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        mnOpRpt.setText("Reporte");
        mnOpRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpRptActionPerformed(evt);
            }
        });
        mnOp.add(mnOpRpt);

        mnOpUpdate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
        mnOpUpdate.setText("Actualizar");
        mnOpUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpUpdateActionPerformed(evt);
            }
        });
        mnOp.add(mnOpUpdate);

        mnOpClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        mnOpClose.setText("Cerrar");
        mnOpClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpCloseActionPerformed(evt);
            }
        });
        mnOp.add(mnOpClose);

        mnOpDel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        mnOpDel.setText("Eliminar");
        mnOpDel.setEnabled(false);
        mnOpDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpDelActionPerformed(evt);
            }
        });
        mnOp.add(mnOpDel);

        mnMian.add(mnOp);

        mnRep.setText("Reporte");

        mnRepCR.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        mnRepCR.setText("Contrarecibo");
        mnRepCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnRepCRActionPerformed(evt);
            }
        });
        mnRep.add(mnRepCR);

        mnRepDetailF.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        mnRepDetailF.setText("Detalle por Factura");
        mnRepDetailF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnRepDetailFActionPerformed(evt);
            }
        });
        mnRep.add(mnRepDetailF);

        mnMian.add(mnRep);

        setJMenuBar(mnMian);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(chPnPay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btClose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSearch)
                    .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btUpdate)
                    .addComponent(btClose)
                    .addComponent(txReport)
                    .addComponent(chPnPay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txReportActionPerformed
        genReport();    
    }//GEN-LAST:event_txReportActionPerformed

    private boolean genReport() throws NumberFormatException, HeadlessException {
        if (tbList.getSelectedRow() > -1) {
            ;
        } else {
            JOptionPane.showMessageDialog(this, "Primero seleccione un registro.",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        String id = ((DefaultTableModel)tbList.getModel()).getValueAt(tbList.getSelectedRow(),0).toString();
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return false;
        }
        CRSIIL cr =  new CRSIIL();
        cr.setID(Integer.parseInt(id));
        CRSIIL.display(cr, dbserver,SIIL.servApp.cred.getUser());
        return false;
    }
    
    private void genReportDetail() throws NumberFormatException, HeadlessException 
    {
        if (tbList.getSelectedRow() > -1) {
            ;
        } else {
            JOptionPane.showMessageDialog(this, "Primero seleccione un registro.",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String id = ((DefaultTableModel)tbList.getModel()).getValueAt(tbList.getSelectedRow(),0).toString();
        MySQL conn = new MySQL();
        conn.Create();
        if (conn.getConnection() == null) {
            JOptionPane.showMessageDialog(this,
                    "Conexion a Servidor Invalida",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        JasperReport jr;
        try
        {

                        
            Map params = new HashMap();    
            params.put("CR", id);
            
            jr = (JasperReport) JRLoader.loadObject(getClass().getResourceAsStream("/SIIL/purchase/cr/detailByEnvoice.jasper"));
            JasperPrint jp = JasperFillManager.fillReport(jr, params, conn.getConnection());
            JasperViewer jv = new JasperViewer(jp,false);
            jv.setVisible(true);
            jv.setTitle("Reporte");
        }
        catch (JRException ex)
        {
            Logger.getLogger(CRSIIL.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void txSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txSearchActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {;
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        fillTable(dbserver);
    }//GEN-LAST:event_txSearchActionPerformed

    private void txSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSearchKeyReleased
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {;
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        fillTable(dbserver);
    }//GEN-LAST:event_txSearchKeyReleased

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {;
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        fillTable(dbserver);
    }//GEN-LAST:event_btUpdateActionPerformed

    private void mnOpRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpRptActionPerformed
        genReport();
    }//GEN-LAST:event_mnOpRptActionPerformed

    private void mnOpUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpUpdateActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {;
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        fillTable(dbserver);
    }//GEN-LAST:event_mnOpUpdateActionPerformed

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btCloseActionPerformed

    private void mnOpCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpCloseActionPerformed
        dispose();
    }//GEN-LAST:event_mnOpCloseActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btSearchActionPerformed

    private void mnOpPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpPayActionPerformed
        if(!chPnPay.isSelected())
        {
            JOptionPane.showMessageDialog(this, "Deve activar la opcion 'Solo pendientes de Pago'",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tbList.getSelectedRow() > -1) {
            ;
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un registro",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        CRSIIL cr = new CRSIIL();
        String id = ((DefaultTableModel)tbList.getModel()).getValueAt(tbList.getSelectedRow(),0).toString();
        cr.setID(Integer.parseInt(id));
        SIIL.purchase.cr.Pay pay = new SIIL.purchase.cr.Pay(cr);
        desktopPane.add(pay);
        int x = desktopPane.getSize().width/2 - pay.getSize().width/2;
        int y = 10;
        pay.setLocation(x, y);
        pay.setVisible(true);
    }//GEN-LAST:event_mnOpPayActionPerformed

    private void chPnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chPnPayActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {;
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        fillTable(dbserver);
    }//GEN-LAST:event_chPnPayActionPerformed

    private void mnRepDetailFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnRepDetailFActionPerformed
        genReportDetail();
    }//GEN-LAST:event_mnRepDetailFActionPerformed

    private void mnRepCRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnRepCRActionPerformed
        genReport();
    }//GEN-LAST:event_mnRepCRActionPerformed

    private void mnOpNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpNewActionPerformed
        SIIL.purchase.cr.CU cu = new SIIL.purchase.cr.CU(SIIL.servApp.cred);
        getDesktopPane().add(cu);
        int x = getDesktopPane().getSize().width/2 - cu.getSize().width/2;
        int y = 10;
        cu.setLocation(x, y);
        cu.setVisible(true);
    }//GEN-LAST:event_mnOpNewActionPerformed

    private void mnOpDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpDelActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {;
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        

        
        if (tbList.getSelectedRow() > -1) {
            ;
        } else {
            JOptionPane.showMessageDialog(this, "Primero seleccione un registro.",
                    "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String id = ((DefaultTableModel)tbList.getModel()).getValueAt(tbList.getSelectedRow(),0).toString();
        
        int n = JOptionPane.showOptionDialog(this,
        "El registro " + id + " va a ser eliminado, ¿desea continuar?",
        "Confirmación de operación",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,null,null);
        int res = 0;
        if(n == JOptionPane.NO_OPTION)
        {
            JOptionPane.showMessageDialog(this, "Operacion Cancelada");
            return;
        }
        CRSIIL cr = new CRSIIL();
        
        cr.setID(Integer.parseInt(id));
        try 
        {
            if(cr.delete(dbserver) > 0)
            {
                dbserver.commit();
                fillTable(dbserver);
            }
            else
            {
                dbserver.rollback();
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_mnOpDelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClose;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btUpdate;
    private javax.swing.JCheckBox chPnPay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar mnMian;
    private javax.swing.JMenu mnOp;
    private javax.swing.JMenuItem mnOpClose;
    private javax.swing.JMenuItem mnOpDel;
    private javax.swing.JMenuItem mnOpNew;
    private javax.swing.JMenuItem mnOpPay;
    private javax.swing.JMenuItem mnOpRpt;
    private javax.swing.JMenuItem mnOpUpdate;
    private javax.swing.JMenu mnRep;
    private javax.swing.JMenuItem mnRepCR;
    private javax.swing.JMenuItem mnRepDetailF;
    private javax.swing.JTable tbList;
    private javax.swing.JTextField txLength;
    private javax.swing.JButton txReport;
    private javax.swing.JTextField txSearch;
    // End of variables declaration//GEN-END:variables

    String where;
    javax.swing.JDesktopPane desktopPane;
    
    private void cleanTable() 
    {
        DefaultTableModel dm = ((DefaultTableModel)tbList.getModel());
        int rows = dm.getRowCount();
        for(int i = 0; i < rows; ++i)
        {
            dm.removeRow(0);
        }    
    }
        
    /**
     * Escribe los datos en la tabla
     * @param conn
     * @param where
     * @param orderby
     * @param limit 
     */
    private void fillTable(Database dbserver) 
    {
        cleanTable();
        int limit = 0;
        if(txLength.getText().matches("^0$"))
        {
            limit = 50;
        }
        else if(txLength.getText().matches("^[0-9]+$"))
        {
            limit = Integer.valueOf(txLength.getText());
        }
        else if(txLength.getText().length() == 0)
        {
            limit = 50;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El formato de cant. de Registro es incorrecto", "Error Externo", JOptionPane.ERROR_MESSAGE);
        }
        String where = null;
        /*
        if(txSearch.getText().length() > 0 || chPnPay.isSelected())
        {
            where = getWhere(conn);
        }
        else if(this.where != null )
        {
            where = this.where;
        }
        else
        {
            
        }
        */
        where = cred.filterSucursal(dbserver);
        where += getWhere(dbserver);
        
        DefaultTableModel dm = ((DefaultTableModel)tbList.getModel());
        if(where == null)
        {
            try 
            {
                //Genera un arreglo con la los ID asignados
                System.out.println("WHERE limit = " + limit);
                ArrayList<CRSIIL> crs = CRSIIL.downloadIDs(dbserver,limit);
                setRows(crs, dbserver, dm);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        else
        {
            try 
            {
                //Genera un arreglo con la los ID asignados
                System.out.println("WHERE : " + where);
                ArrayList<CRSIIL> crs = CRSIIL.downloadIDs(dbserver,where,limit);
                setRows(crs, dbserver, dm);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
    }

    private void setRows(ArrayList<CRSIIL> crs, Database conn, DefaultTableModel dm) throws SQLException {
        Object[] row = new Object[12];
        for(int i=0; i < crs.size(); i++)
        {
            CRSIIL cr = crs.get(i);
            cr.dowloadResum(conn);
            cr.downPOs(null,conn);
            cr.downSAs(null,conn);
            cr.downFs(conn);
            row[0] = cr.getID();
            row[1] = cr.getProv();
            row[2] = cr.getProvName();
            //Total
            NumberFormat nf = NumberFormat.getCurrencyInstance();
            row[3] = nf.format(cr.getTotal());
            //
            String curr = cr.getCurrency();
            if(curr.equals("MXN"))
            {
                row[4] = "Pesos";
            }
            else if(curr.equals("USD"))
            {
                row[4] = "Dólar";
            }
            else
            {
                
            }
            //
            SimpleDateFormat userDate = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat dbDate = new SimpleDateFormat("yyyy-MM-dd");
            try
            {
                row[5] = userDate.format(dbDate.parse(cr.getFhFolio().toString()));
            }
            catch (ParseException ex)
            {
                Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
            }
            //
            row[6] = cr.getAccount();
            //
            row[7] = cr.getObservation();
            //
            row[8] = cr.getPOs();
            row[9] = cr.getSAs();
            row[10] = cr.getFs();
            String status = cr.getEstatus();
            if(status.equals("pnPay"))
            {
                row[11] = "Pendiente";
            }
            else if(status.equals("paid"))
            {
                row[11] = "Pagado";
            }
            dm.addRow(row);
        }
    }

    private String getWhere(Database conn) 
    {        
        String where = "";
        if(txSearch.getText().length() == 0)
        {
            ;
        }
        else
        {
            where = " AND (fhRev LIKE '%" + txSearch.getText() + "%' OR amount LIKE '%" + txSearch.getText() + "%' OR fhPg LIKE '%" + txSearch.getText() + "%' OR provName LIKE '%" + txSearch.getText() + "%' OR PO LIKE '%" + txSearch.getText() + "%' OR SA LIKE '%" + txSearch.getText() + "%' OR folio LIKE '%" + txSearch.getText() + "%' OR prov LIKE '%" + txSearch.getText() + "%')";
        }
        
        if(chPnPay.isSelected())
        {
            where = where + " AND status = 'pnPay'";
        }
        
        return where;
    }
}
