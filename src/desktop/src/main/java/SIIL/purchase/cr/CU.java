
package SIIL.purchase.cr;

import SIIL.Server.Database;
import SIIL.Server.MySQL;
import java.io.IOException;
import session.Credential;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael
 */
public class CU extends javax.swing.JInternalFrame 
{

    private Credential cred;
    /**
     * Creates new form CU
     */
    public CU(Credential cred) 
    {
        initComponents();
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        SIIL.purchase.Provider.Load(dbserver,cbProv);
        AutoCompleteDecorator.decorate(cbProv);
        btMoneda.add(rdMXN);
        btMoneda.add(rdUSD);
        this.cred = cred;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btMoneda = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        rdMXN = new javax.swing.JRadioButton();
        rdUSD = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taObser = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbDocs = new javax.swing.JTable();
        btSave = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbProv = new javax.swing.JComboBox();
        lbName = new javax.swing.JLabel();
        btAdd = new javax.swing.JButton();
        dtCR = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        setResizable(true);
        setTitle("Crear CR");

        jLabel1.setText("Proveedor");

        rdMXN.setText("Pesos");

        rdUSD.setText("USD");

        jLabel7.setText("Observaciones");

        taObser.setColumns(20);
        taObser.setRows(5);
        jScrollPane1.setViewportView(taObser);

        tbDocs.setModel(new CUTableModel());
        tbDocs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDocsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbDocs);

        btSave.setText("Guardar");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        jLabel9.setText("Facturas");

        jLabel10.setText("Moneda");

        cbProv.setEditable(true);
        cbProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProvActionPerformed(evt);
            }
        });

        lbName.setText("#");

        btAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        btAdd.setMnemonic('+');
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbProv, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(107, 107, 107)
                                .addComponent(btAdd))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(69, 69, 69)
                                    .addComponent(btSave))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel10)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(rdMXN)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(rdUSD)))
                                    .addGap(16, 16, 16)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(dtCR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdMXN)
                    .addComponent(rdUSD)
                    .addComponent(dtCR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(btAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btSave)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        CRSIIL cr = new CRSIIL();
        
        if(((String)cbProv.getSelectedItem()).length() > 10 & cbProv.getSelectedIndex() > 0 )
        {
            cr.setProv(((String)cbProv.getSelectedItem()));
        }
        else
        {
            JOptionPane.showMessageDialog(this,
                "Indique un RFC valido",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
                );
            return;
        }
                        
        
      
        //       
        CUTableModel dm = (CUTableModel)tbDocs.getModel();
        cr.setFacturas(dm.getFacturas());
        double total = 0;
        for(Factura factura : dm.getFacturas())
        {
            total += factura.getMonto();
        }
        cr.setTotal(total);
        
        if(rdMXN.isSelected())
        {
            cr.setCurrency("MXN");
        }
        else if(rdUSD.isSelected())
        {
            cr.setCurrency("USD");
        }
        else
        {
            JOptionPane.showMessageDialog(this,
                "Especifique la meneda",
                "Error Externo",
                JOptionPane.ERROR_MESSAGE
                );
            return; 
        }
        if(taObser.getText().length() > 0)
        {
            cr.setObservation(taObser.getText());
        }
        //
        cr.setRecibe(SIIL.servApp.cred);
        cr.setSucursal(SIIL.servApp.cred.getSuc());
        cr.setFhPg(dtCR.getDate());
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        cr.createID(dbserver);
        boolean res = false;
        try 
        {
            res = cr.insert(dbserver);
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(CU.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(res)
        {
            try 
            {
                dbserver.commit();
                JOptionPane.showMessageDialog(this,
                "Todos los cambios se realizaron exitosamente"
                );
                dispose();
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(CU.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this,
                "Un error desconocido ocurrio los datos no seran guardados",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
                );
                return;
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(CU.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
 
        CRSIIL.display(cr, dbserver, cred.getUser());
    }//GEN-LAST:event_btSaveActionPerformed

    private void cbProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProvActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        SIIL.purchase.ProviderMXSIIL prov = new SIIL.purchase.ProviderMXSIIL();
        prov.setRFC((String)cbProv.getSelectedItem());        

        try 
        {
            if(prov.download(dbserver))
            {
                lbName.setText(prov.getName());
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(CU.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Calendar c = Calendar.getInstance();
        c.setTime(new Date()); // Now use today date.
        c.add(Calendar.DATE, prov.getDayCredit());      
        dtCR.setDate(c.getTime());        
    }//GEN-LAST:event_cbProvActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        Factura fac = new Factura();
        CUTableModel dm = (CUTableModel)tbDocs.getModel();
        dm.add(fac);
        SIIL.purchase.cr.CUDocs docs = new SIIL.purchase.cr.CUDocs(this,fac,ModeOperation.CREATE);
        getDesktopPane().add(docs);
        int x = getDesktopPane().getSize().width/2 - docs.getSize().width/2;
        int y = 10;
        docs.setLocation(x, y);
        docs.setVisible(true);
    }//GEN-LAST:event_btAddActionPerformed

    private void tbDocsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDocsMouseClicked
        if (evt.getClickCount() == 2) 
        {
            if(tbDocs.getSelectedRow() > -1)
            {
                ;
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Primero seleccione un registro.",
                        "Error Externo", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Factura fac = ((CUTableModel)tbDocs.getModel()).getFactura(tbDocs.getSelectedRow());
            SIIL.purchase.cr.CUDocs docs = new SIIL.purchase.cr.CUDocs(this,fac,ModeOperation.EDIT);
            getDesktopPane().add(docs);
            int x = getDesktopPane().getSize().width/2 - docs.getSize().width/2;
            int y = 10;
            docs.setLocation(x, y);
            docs.setVisible(true);
        }
    }//GEN-LAST:event_tbDocsMouseClicked



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.ButtonGroup btMoneda;
    private javax.swing.JButton btSave;
    private javax.swing.JComboBox cbProv;
    private org.jdesktop.swingx.JXDatePicker dtCR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbName;
    private javax.swing.JRadioButton rdMXN;
    private javax.swing.JRadioButton rdUSD;
    private javax.swing.JTextArea taObser;
    private javax.swing.JTable tbDocs;
    // End of variables declaration//GEN-END:variables

    javax.swing.JDesktopPane desktopPane;
    
    //private ArrayList<Factura> facturas;

    /**
     * @return the facturas
     */
    public ArrayList<Factura> getFacturas() {
        return ((CUTableModel)tbDocs.getModel()).getFacturas();
    }

    /**
     * @param facturas the facturas to set
     */
    /*public void setFacturas(ArrayList<Factura> facturas) {
        this.facturas = facturas;
    }*/

    void cleanTable() 
    {
        CUTableModel dm = ((CUTableModel)tbDocs.getModel());  
        dm.clear();
    }
    
    void loadTable()
    {
        CUTableModel dm = ((CUTableModel)tbDocs.getModel()); 
        dm.fireTableDataChanged();
    }
    
    void reloadTable()
    {
        cleanTable();
        loadTable();
    }
}
