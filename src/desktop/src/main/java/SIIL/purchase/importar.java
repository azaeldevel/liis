
package SIIL.purchase;

import SIIL.Server.Database;
import SIIL.Server.MySQL;
import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael
 */
public class importar extends javax.swing.JInternalFrame {

    /**
     * Creates new form importar
     */
    public importar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btImport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaLog = new javax.swing.JTextArea();

        btImport.setText("Importar");
        btImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImportActionPerformed(evt);
            }
        });

        txaLog.setColumns(20);
        txaLog.setRows(5);
        jScrollPane1.setViewportView(txaLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btImport)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btImport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImportActionPerformed
        
        btImport.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        importProvider();
        btImport.setEnabled(true);
        setCursor(null); //turn off the wait cursor
    }//GEN-LAST:event_btImportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btImport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txaLog;
    // End of variables declaration//GEN-END:variables

    private void importProvider() 
    {
        final JFileChooser fc = new JFileChooser();

        //In response to a button click:
        String inputFile;
        fc.setCurrentDirectory(new File("C:\\Users\\areyes\\Proyectos\\trunk\\src\\Cobranza"));
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            inputFile =  fc.getSelectedFile().getAbsolutePath();
            //System.out.println("Importing " + inputFile);
            txaLog.append("Importando datos desde " + inputFile  + "\n");
        }
        else
        {
            return ;
        }
        File inputWorkbook = new File(inputFile);
        Workbook book = null;
        try
        {
            book = Workbook.getWorkbook(inputWorkbook);
        }
        catch (IOException ex)
        {
            Logger.getLogger(importar.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (BiffException ex)
        {
            JOptionPane.showMessageDialog(this,
                "Formato de archivo incorrecto, solo se reconoce el formato Excel 97-2003 Workbook.",
                "Error Externo", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Sheet sheet = book.getSheet(0);
              
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        
        SIIL.purchase.ProviderMXSIIL prov = new SIIL.purchase.ProviderMXSIIL();
        for (int i = 4; i < sheet.getRows(); i++)
        {
            prov.setAccount(Integer.parseInt(sheet.getCell(0,i).getContents().trim()));
            prov.setName(sheet.getCell(1,i).getContents().trim());
            prov.setRFC(sheet.getCell(2,i).getContents().trim());
            prov.setDayCredit(Integer.parseInt(sheet.getCell(3,i).getContents().trim()));
            int res = 0;
            try 
            {
                prov.createID(dbserver);
                res = prov.insert(dbserver);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(importar.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(res == 1)
            {
                try 
                {
                    dbserver.commit();
                    txaLog.append("Se insertó " + prov.getName() + "\n");
                } 
                catch (SQLException ex) 
                {
                    Logger.getLogger(importar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                try 
                {
                    dbserver.rollback();
                    txaLog.append("Falló " + prov.getName() + "\n");
                } 
                catch (SQLException ex) 
                {
                    Logger.getLogger(importar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }
}
