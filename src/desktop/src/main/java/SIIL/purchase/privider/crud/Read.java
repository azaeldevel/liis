
package SIIL.purchase.privider.crud;

import SIIL.Server.Database;
import SIIL.Server.MySQL;
import SIIL.purchase.ProviderMXSIIL;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael
 */
public class Read extends javax.swing.JInternalFrame {

    /**
     * Creates new form Read
     */
    public Read(javax.swing.JDesktopPane desktopPane)     
    {
        initComponents();
        this.desktopPane = desktopPane;
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        fillTable(dbserver);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbList = new javax.swing.JTable();
        txLength = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnOp = new javax.swing.JMenu();
        mnOpCreate = new javax.swing.JMenuItem();

        setClosable(true);
        setMaximizable(true);

        jLabel1.setText("Busqueda");

        txSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txSearchKeyReleased(evt);
            }
        });

        tbList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "RFC", "Nombre", "Cuenta", "Dias de Credito"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbList);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reload.png"))); // NOI18N
        jButton1.setMinimumSize(new java.awt.Dimension(6, 20));
        jButton1.setPreferredSize(new java.awt.Dimension(6, 20));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mnOp.setText("Operaciones");

        mnOpCreate.setText("Creaci√≥n");
        mnOpCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpCreateActionPerformed(evt);
            }
        });
        mnOp.add(mnOpCreate);

        jMenuBar1.add(mnOp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txLength, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txLength)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnOpCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpCreateActionPerformed
        SIIL.purchase.privider.crud.Create cr = new SIIL.purchase.privider.crud.Create();
        desktopPane.add(cr);
        int x = desktopPane.getSize().width/2 - cr.getSize().width/2;
        int y = 10;
        cr.setLocation(x, y);
        cr.setVisible(true);
    }//GEN-LAST:event_mnOpCreateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        fillTable(dbserver);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSearchKeyReleased
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        fillTable(dbserver);
    }//GEN-LAST:event_txSearchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu mnOp;
    private javax.swing.JMenuItem mnOpCreate;
    private javax.swing.JTable tbList;
    private javax.swing.JTextField txLength;
    private javax.swing.JTextField txSearch;
    // End of variables declaration//GEN-END:variables

    String where;
    javax.swing.JDesktopPane desktopPane;
    
    private void fillTable(Database conn) 
    {
        cleanTable();
        int limit = 0;
        if(txLength.getText().matches("^0$"))
        {
            limit = 50;
        }
        else if(txLength.getText().matches("^[0-9]+$"))
        {
            limit = Integer.valueOf(txLength.getText());
        }
        else if(txLength.getText().length() == 0)
        {
            limit = 50;
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El formato de cant. de Registro es incorrecto", "Error Externo", JOptionPane.ERROR_MESSAGE);
        }
        String where = null;
        if(txSearch.getText().length() > 0)
        {
            where = getWhere(conn);
        }
        else if(this.where != null )
        {
            where = this.where;
        }
        else
        {
            
        }
        
        DefaultTableModel dm = ((DefaultTableModel)tbList.getModel());
        if(where == null)
        {
            try 
            {
                //Genera un arreglo con la los ID asignados
                ArrayList<ProviderMXSIIL> crs = ProviderMXSIIL.downloadIDs(conn,limit);
                setRows(crs, conn, dm);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        else
        {
            try 
            {
                //Genera un arreglo con la los ID asignados
                ArrayList<ProviderMXSIIL> crs = ProviderMXSIIL.downloadIDs(conn,where,limit);
                setRows(crs, conn, dm);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
    }
    
    private void cleanTable() 
    {
        DefaultTableModel dm = ((DefaultTableModel)tbList.getModel());
        int rows = dm.getRowCount();
        for(int i = 0; i < rows; ++i)
        {
            dm.removeRow(0);
        }    
    }
    
    private String getWhere(Database conn) 
    {
        String where = "";
        
        where = " ( account LIKE '%" + txSearch.getText() + "%' OR name LIKE '%" + txSearch.getText() + "%' OR rfc LIKE '%" + txSearch.getText() + "%')";
        
        return where;
    }

    private void setRows(ArrayList<ProviderMXSIIL> provs, Database conn, DefaultTableModel dm) throws SQLException 
    {
        for(int i=0; i < provs.size(); i++)
        {
            Object[] row = new Object[5];
            ProviderMXSIIL prov = provs.get(i);
            prov.down(conn);
            row[0] = prov.getID();
            row[1] = prov.getRfc();
            row[2] = prov.getName();            
            row[3] = prov.getAccount();  
            row[4] = prov.getDayCredit();
            dm.addRow(row);
        }    
    }
}
