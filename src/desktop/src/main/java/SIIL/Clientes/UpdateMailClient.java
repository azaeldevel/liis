
package SIIL.Clientes;

import SIIL.Server.Database;
import SIIL.client.sales.Enterprise;
import SIIL.core.Office;
import static SIIL.servApp.BACKWARD_BD;
import SIIL.trace.Trace;
import SIIL.trace.Value;
import core.Dialog;
import core.OfficeComboBoxModel;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import process.Mail;

/**
 *
 * @author Azael Reyes
 */
public class UpdateMailClient extends javax.swing.JPanel implements core.DialogContent{

    private Enterprise comp;
    private Database dbserver;
    private Office office;
    private core.Dialog dialog;
    

    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed())dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        } 
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }
    
    /**
     * Creates new form UpdateMailClient
     */
    public UpdateMailClient() 
    {
        initComponents();
        openDatabase(true);
        OfficeComboBoxModel offices = new OfficeComboBoxModel();
        try 
        {
            offices.fill(dbserver);
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        cbBD.setModel(offices);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        txClient = new javax.swing.JTextField();
        btClient = new javax.swing.JButton();
        lbClient = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txMails = new javax.swing.JTextField();
        btSave = new javax.swing.JButton();
        cbBD = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        jLabel6.setText("Cliente");

        txClient.setEnabled(false);
        txClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txClientKeyReleased(evt);
            }
        });

        btClient.setText("...");
        btClient.setEnabled(false);
        btClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClientActionPerformed(evt);
            }
        });

        lbClient.setText("##");

        jLabel1.setText("Correos");

        txMails.setEnabled(false);

        btSave.setText("Guardar");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        cbBD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "Tijuana", "Mexicali", "Ensenada", " " }));
        cbBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBDActionPerformed(evt);
            }
        });

        jLabel3.setText("Base de Datos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txClient, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btClient, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(lbClient, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 419, Short.MAX_VALUE))
                            .addComponent(txMails)))
                    .addComponent(btSave, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btClient)
                        .addComponent(lbClient))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txMails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(btSave)
                .addGap(49, 49, 49))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txClientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txClientKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            comp = new Enterprise();
            comp.setBD(SIIL.servApp.cred.getBD());
            comp.setNumber(txClient.getText());
            openDatabase(true);
            if(comp.complete(dbserver))
            {
                lbClient.setText(comp.getName());                
                try 
                {
                    comp.downMailFact(dbserver);
                    InternetAddress[] lsTO = comp.getEmailFactura(office);
                    if(lsTO != null) txMails.setText(Mail.convertToString(lsTO));
                    txMails.setEnabled(true);
                } 
                catch (SQLException | AddressException ex) 
                {
                    Logger.getLogger(UpdateMailClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                if(comp == null)
                {
                    JOptionPane.showMessageDialog(this, "Numero de cliente desconocido",
                        "Error externo", JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    comp = null;
                    lbClient.setText("###");
                }
            }
        }
    }//GEN-LAST:event_txClientKeyReleased

    private void btClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClientActionPerformed
        comp = new Enterprise();
        JFrame frm = new JFrame();
        JDialog dlg = new JDialog(frm,"Seleccionar cliente",true);
        openDatabase(true);
        SIIL.Clientes.ReadSelect read = new SIIL.Clientes.ReadSelect(comp,SIIL.servApp.cred.getBD());
        dlg.setContentPane(read);
        dlg.setSize(460, 260);
        dlg.setVisible(true);
        txClient.setText(comp.getNumber());
        lbClient.setText(comp.getName());
        comp.complete(dbserver);
        try 
        {
            comp.downMailFact(dbserver);
            InternetAddress[] lsTO = comp.getEmailFactura(office);
            if(lsTO != null) txMails.setText(Mail.convertToString(lsTO));
            txMails.setEnabled(true);
        } 
        catch (SQLException | AddressException ex) 
        {
            //Logger.getLogger(UpdateMailClient.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                );
        }
    }//GEN-LAST:event_btClientActionPerformed

    private void cbBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBDActionPerformed
        if(cbBD.getSelectedIndex() > 0)
        {
            if(cbBD.getSelectedIndex() > 0)
            {
                office = (Office) cbBD.getSelectedItem();
                txClient.setEnabled(true);
                btClient.setEnabled(true);
            }
            else
            {
                office = null;
            }
        }
        else
        {

        }
    }//GEN-LAST:event_cbBDActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        boolean ret = false;
        Trace contexTrace = null;
        try 
        {
            openDatabase(true);            
            Mail.validateList(txMails.getText());
            contexTrace = new Trace(BACKWARD_BD,SIIL.servApp.cred.getUser(),"Actualización de Cliente");
            contexTrace.insert(dbserver);
            Value val = new Value();
            val.setTraceID(contexTrace.getTrace());
            val.setTable("Cliente");
            val.setField("Número");
            val.setBrief(comp.getNumber());
            val.setLlave("folio =" + comp.getID());
            val.insert(dbserver);
            ret = comp.upMailFact(dbserver,office,txMails.getText(),contexTrace);
        }
        catch (SQLException | AddressException ex) 
        {
            //Logger.getLogger(UpdateMailClient.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
        
        if(ret)
        {
            try 
            {
                dbserver.commit();             
                JOptionPane.showMessageDialog(
                    this,
                    "Correo guardado",
                    "Confirmación",
                    JOptionPane.INFORMATION_MESSAGE
                );
                resetDialog();
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(UpdateMailClient.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }
        else
        {
            try 
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this,
                        "Falló la operación",
                        "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(UpdateMailClient.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error Interno",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_btSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClient;
    private javax.swing.JButton btSave;
    private javax.swing.JComboBox cbBD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lbClient;
    private javax.swing.JTextField txClient;
    private javax.swing.JTextField txMails;
    // End of variables declaration//GEN-END:variables

    private void resetDialog() 
    {
        cbBD.setSelectedIndex(0);
        comp = null;
        txClient.setEnabled(false);
        btClient.setEnabled(false);
        txClient.setText("");
        txMails.setText("");
        txMails.setEnabled(false);
        lbClient.setText("");
        closeDatabase();
    }

    @Override
    public void setDialog(Dialog dialog) 
    {
        this.dialog = dialog;
    }
    
    
}
