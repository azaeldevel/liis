
package SIIL.services.order;

import SIIL.Server.Database;
import static SIIL.servApp.cred;
import core.CSVFileFilter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.xml.parsers.ParserConfigurationException;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.xml.sax.SAXException;
import stock.SearchHequi;

/**
 * Lista de Resumen de Orden de Servicio.
 * @author Azael Reyes
 */
public class Read extends javax.swing.JPanel 
{

    /**
     * Creates new form CreateDelete
     */
    public Read()
    {
        initComponents();        
        reloadTable();
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        if(cred.acces(dbserver,"services.order.write") )
        {
            mnOrderNew.setEnabled(true);
        }
        else
        {
            mnOrderNew.setEnabled(false);
        }
        
        try 
        {
            ArrayList<Module> ls = (ArrayList<Module>) Module.listing(dbserver);
            for(Module m : ls)
            {
                m.downName(dbserver);
                cbModule.addItem(m);
            }
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dbserver.close();
    }

    public void reloadTable() 
    {
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        ReadTableModel model = (ReadTableModel) tbList.getModel();
        try 
        {
            model.search(dbserver, ReadTableModel.Mode.INITIAL, (Module) cbModule.getSelectedItem(),null,(int)spCant.getValue());
            //tbList.setComponentPopupMenu(mnMain);
        }
        catch (SQLException ex) 
        {
            //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);            
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        dbserver.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnMain = new javax.swing.JPopupMenu();
        mnReport = new javax.swing.JMenuItem();
        mnOderDetail = new javax.swing.JMenuItem();
        mnOrderNew = new javax.swing.JMenuItem();
        mnExportCSV = new javax.swing.JMenuItem();
        mnOrdenRemove = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbList = new org.jdesktop.swingx.JXTable();
        cbModule = new javax.swing.JComboBox<Module>();
        jXLabel1 = new org.jdesktop.swingx.JXLabel();
        spCant = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        search = new org.jdesktop.swingx.JXSearchField();
        btUpdate = new org.jdesktop.swingx.JXButton();

        mnReport.setText("Reporte");
        mnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnReportActionPerformed(evt);
            }
        });
        mnMain.add(mnReport);

        mnOderDetail.setText("Detalle de Orden");
        mnOderDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOderDetailActionPerformed(evt);
            }
        });
        mnMain.add(mnOderDetail);

        mnOrderNew.setText("Nueva Orden");
        mnOrderNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOrderNewActionPerformed(evt);
            }
        });
        mnMain.add(mnOrderNew);

        mnExportCSV.setText("Exportar");
        mnExportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnExportCSVActionPerformed(evt);
            }
        });
        mnMain.add(mnExportCSV);

        mnOrdenRemove.setText("Eliminar");
        mnOrdenRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOrdenRemoveActionPerformed(evt);
            }
        });
        mnMain.add(mnOrdenRemove);

        tbList.setModel(new ReadTableModel());
        tbList.setComponentPopupMenu(mnMain);
        tbList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbList);

        cbModule.setModel(new ModuleComboBoxModel());
        cbModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbModuleActionPerformed(evt);
            }
        });
        cbModule.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbModuleKeyReleased(evt);
            }
        });

        jXLabel1.setText("Modulo");

        spCant.setToolTipText("Determina la cantidad de registro visualizados, si es 0 se viualizan toods los que hay en la sase de datos. Tambien afecta ha los reportes y exportaciones");
        spCant.setValue(50);

        jLabel1.setText("Cant.");

        search.setPrompt("buscar rapida...");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        btUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reload.png"))); // NOI18N
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbModule, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spCant, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbModule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnReportActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        JasperReport jr;
        try
        {
            Map params = new HashMap(); 
            Resumen resumen = selection(dbserver);
            if(resumen != null)
            {
                resumen.downModule(dbserver);
                resumen.getModule().downName(dbserver);
                params.put("moduleName", resumen.getModule().getName());
                params.put("moduleID", resumen.getModule().getID());
            }
            else
            {
                params = null;
            }
            jr = (JasperReport) JRLoader.loadObject(getClass().getResourceAsStream("generic.jasper"));
            JasperPrint jp = JasperFillManager.fillReport(jr, params, dbserver.getConnection());
            JasperViewer jv = new JasperViewer(jp,false);
            jv.setVisible(true);
            jv.setTitle("Reporte");
        }
        catch (JRException ex)
        {
            //Logger.getLogger(CRSIIL.class.getName()).log(Level.SEVERE, null, ex);            
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        catch (SQLException ex) 
        {
            //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);            
            JOptionPane.showMessageDialog(
                this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        dbserver.close();
    }//GEN-LAST:event_mnReportActionPerformed

    private void mnOderDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOderDetailActionPerformed
        viewOrderDetail();
    }//GEN-LAST:event_mnOderDetailActionPerformed

    private void mnOrderNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOrderNewActionPerformed
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        JInternalFrame inter = new JInternalFrame("Capturar orden de Servicio",false,true);
        SIIL.services.order.CreateUpdate ord = new SIIL.services.order.CreateUpdate(inter,CreateUpdate.Mode.CREATE,null, this, dbserver);
        inter.setContentPane(ord);
        inter.setSize(ord.getPreferredSize());
        SIIL.servApp.getInstance().getDesktopPane().add(inter);
        int x = SIIL.servApp.getInstance().getDesktopPane().getSize().width/2 - ord.getSize().width/2;
        int y = 10;
        inter.setLocation(x, y);
        inter.setVisible(true);
        dbserver.close();
    }//GEN-LAST:event_mnOrderNewActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        reloadTable();
    }//GEN-LAST:event_btUpdateActionPerformed

    private void cbModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbModuleActionPerformed
        reloadTable();
    }//GEN-LAST:event_cbModuleActionPerformed

    private void mnExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnExportCSVActionPerformed
        ReadTableModel model = (ReadTableModel) tbList.getModel();
        if(model.getWhereSQL().length() < 1)//si hay textto para consultaar
        {
            return;
        }
        
        final JFileChooser fc = new JFileChooser();
        //Visualiza el cuadro de guardar c para indicar el archivo.
        String nameFile;
        CSVFileFilter fcFilter = new CSVFileFilter();
        fc.setFileFilter(fcFilter);
        FileSystemView fw = fc.getFileSystemView();
        fc.setCurrentDirectory(fw.getDefaultDirectory());
        int returnVal = fc.showSaveDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            if(!fcFilter.accept(fc.getSelectedFile()))
            {
                fc.setSelectedFile(new File(fc.getSelectedFile().getAbsolutePath() + ".csv"));
            }
        }
        else
        {
            return ;
        }
        FileWriter file;
        try
        {
            file = new FileWriter(fc.getSelectedFile());
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Falló la creacion del Archivo",
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        catch (IOException ex)
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Falló la creacion del Archivo",
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        Boolean flag = false;
        try 
        {
            flag = generateExport(dbserver,file,model.getTableSQL(),model.getWhereSQL());
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Fallo de acceso a base de datos",
                JOptionPane.ERROR_MESSAGE
            );
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Fallo de acceso a Archivo",
                JOptionPane.ERROR_MESSAGE
            );
        }
        if(flag)
        {
            JOptionPane.showMessageDialog(this,
                "Problemas al generar el reporte",
                "Operación completa",
                JOptionPane.ERROR_MESSAGE
            );
        }
        
        try
        {
            file.flush();
            file.close();
            dbserver.close();
            JOptionPane.showMessageDialog(this,
                "Archivo generado correctamente.",
                "Operación completa",
                JOptionPane.INFORMATION_MESSAGE
            );
        }
        catch (IOException ex)
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Falló al guardar el Archivo",
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }        
    }//GEN-LAST:event_mnExportCSVActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        ReadTableModel model = (ReadTableModel) tbList.getModel();
        if(search.getText().length() < 1)
        {
            return;
        }
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        try 
        {
            model.search(dbserver,ReadTableModel.Mode.SEARCH,(Module)cbModule.getSelectedItem(),search.getText(),(Integer)spCant.getValue());
        }
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
        
        dbserver.close();
    }//GEN-LAST:event_searchActionPerformed

    private void mnOrdenRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOrdenRemoveActionPerformed
        if(tbList.getSelectedRow() < 0)
        {
            JOptionPane.showMessageDialog(
                this,
                "Seleccione un registro primero por favor.",
                "Operacion incompleta",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        ReadTableModel model = (ReadTableModel) tbList.getModel();
        Resumen resumen = model.getValueAt(tbList.getSelectedRow());
        
        int n = JOptionPane.showConfirmDialog(
        this,
        "Está operación va a elimiar el Registro de '" + resumen.getFlow().getItem().getNumber() + "' desea continuar.",
        "Confirmar operacioón",
        JOptionPane.YES_NO_OPTION);
        
        if(n == JOptionPane.YES_OPTION)
        {
            try 
            {
                resumen.delete(dbserver);
                dbserver.commit();
                reloadTable();
            } 
            catch (SQLException ex) 
            {
                //Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);                
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,
                "Operación concelada por usuario",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }        
        dbserver.close();
    }//GEN-LAST:event_mnOrdenRemoveActionPerformed

    private void tbListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbListMouseClicked
        if(tbList.getSelectedRowCount() > 1)
        {
            SIIL.servApp.getInstance().setInformation("Row count = " + Integer.toString(tbList.getSelectedRowCount()));
        }
        else
        {
            SIIL.servApp.getInstance().setInformation("");
        }
        if (evt.getClickCount() == 2 && !evt.isConsumed())
        {
            viewOrderDetail();
        }
    }//GEN-LAST:event_tbListMouseClicked

    private void cbModuleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbModuleKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cbModuleKeyReleased

    public void viewOrderDetail()
    {
        if (tbList.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(
                    this,
                    "Seleccione un registro primero por favor.",
                    "Operacion incompleta",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        ReadTableModel model = (ReadTableModel) tbList.getModel();
        Resumen resumen = model.getValueAt(tbList.getSelectedRow());
        try 
        {
            resumen.getOrder().downArchivo(dbserver);
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(Read.class.getName()).log(Level.SEVERE, null, ex);
        }
        JInternalFrame inter = new JInternalFrame("Capturar Orden de Servicio",false,true);
        CreateUpdate ord = new SIIL.services.order.CreateUpdate(inter,CreateUpdate.Mode.DETAIL,resumen,this,dbserver);
        inter.setContentPane(ord);
        inter.setSize(ord.getPreferredSize());
        SIIL.servApp.getInstance().getDesktopPane().add(inter);
        int x = SIIL.servApp.getInstance().getDesktopPane().getSize().width/2 - ord.getSize().width/2;
        int y = 10;
        inter.setLocation(x, y);
        inter.setVisible(true);
        dbserver.close();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXButton btUpdate;
    private javax.swing.JComboBox<Module> cbModule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXLabel jXLabel1;
    private javax.swing.JMenuItem mnExportCSV;
    private javax.swing.JPopupMenu mnMain;
    private javax.swing.JMenuItem mnOderDetail;
    private javax.swing.JMenuItem mnOrdenRemove;
    private javax.swing.JMenuItem mnOrderNew;
    private javax.swing.JMenuItem mnReport;
    private org.jdesktop.swingx.JXSearchField search;
    private javax.swing.JSpinner spCant;
    private org.jdesktop.swingx.JXTable tbList;
    // End of variables declaration//GEN-END:variables

    private Resumen selection(Database database) 
    {
        if(tbList.getSelectedRow() < 0) return null;
        ReadTableModel model  = (ReadTableModel) tbList.getModel();
        Resumen re = model.getValueAt(tbList.getSelectedRow());
        return re;
    }

    /**
     * 
     * @param dbserver
     * @param file
     * @param whereSQL
     * @return 
     */
    private boolean generateExport(Database dbserver, FileWriter file,String table, String whereSQL) throws SQLException, IOException 
    {
        String sql = "SELECT id FROM " + table + whereSQL;
        ResultSet rs = dbserver.query(sql); 
        Resumen resumen = null;
        String row = "Número,Marca,Modelo,Serie,Cliente,Horometro,Folio,Fecha,Tipo\n";
        file.append(row);
        while(rs.next())
        {
            resumen = new Resumen(rs.getInt(1));
            resumen.downFlow(dbserver);
            resumen.getFlow().downItem(dbserver.getConnection());
            resumen.getFlow().downSerie(dbserver);
            resumen.getFlow().downItem(dbserver.getConnection());
            resumen.getFlow().getItem().downNumber(dbserver.getConnection());
            resumen.getFlow().getItem().downDescription(dbserver.getConnection());
            resumen.getFlow().getItem().downMake(dbserver.getConnection());
            resumen.getFlow().getItem().downModel(dbserver);
            resumen.downOrder(dbserver);
            resumen.getOrder().downHorometro(dbserver);
            resumen.getOrder().downFolio(dbserver);
            resumen.getOrder().downFhService(dbserver);
            resumen.getOrder().downCompany(dbserver);
            resumen.getOrder().downType(dbserver);
            if(resumen.getOrder().getCompany() != null)
            {
                resumen.getOrder().getCompany().download(dbserver);
            }
            String tipo = "";
            if(resumen.getOrder().getType() == Order.Type.CORRECTIVE)
            {
                tipo = "Correctivo";
            }
            else if(resumen.getOrder().getType() == Order.Type.PREVENTIVE)
            {
                tipo = "Preventivo";
            }
            else
            {
                tipo = resumen.getOrder().getType().toString();
            }
            String cliente = "";
            if(resumen.getOrder().getCompany() != null)
            {
                cliente = resumen.getOrder().getCompany().getName().replaceAll(",", " ");
            }
            row = resumen.getFlow().getItem().getNumber() + "," + resumen.getFlow().getItem().getMake() + "," + resumen.getFlow().getItem().getModel() + "," + resumen.getFlow().getSerie() + "," + cliente  + "," + resumen.getOrder().getHorometro() + "," + resumen.getOrder().getFolio() + "," + resumen.getOrder().getFhService() + ","  + tipo + "\n";
            file.append(row);
        }
        return false;
    }
}
