
package SIIL.services.order;

import SIIL.Server.Database;
import SIIL.core.Office;
import core.OfficeComboBoxModel;
import core.bobeda.Archivo;
import core.bobeda.FTP;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import process.Return;

/**
 *
 * @author Azael Reyes
 */
public class AssociateFile extends javax.swing.JPanel 
{
    private FileInputStream in;
    private String nameFile;
    private Database dbserver;
    private Order orden;
    private Office office;    
    
        
    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }
        
    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed())dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        }
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    
    /**
     * Creates new form AssociateFile
     */
    public AssociateFile() 
    {
        initComponents();
        openDatabase(true);
        OfficeComboBoxModel offices = new OfficeComboBoxModel();
        try 
        {
            offices.fill(dbserver);
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        cbBD.setModel(offices);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btSelect = new javax.swing.JButton();
        lbFile = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btSelecOrden = new javax.swing.JButton();
        btUp = new javax.swing.JButton();
        lbOrden = new javax.swing.JLabel();
        btGenerate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbBD = new javax.swing.JComboBox();

        jLabel1.setText("Archivo");

        btSelect.setText("...");
        btSelect.setEnabled(false);
        btSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectActionPerformed(evt);
            }
        });

        lbFile.setText("##");

        jLabel2.setText("Orden de Servicio");

        btSelecOrden.setText("Buscar");
        btSelecOrden.setEnabled(false);
        btSelecOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecOrdenActionPerformed(evt);
            }
        });

        btUp.setText("Subir");
        btUp.setEnabled(false);
        btUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpActionPerformed(evt);
            }
        });

        lbOrden.setText("##");

        btGenerate.setText("Generar");
        btGenerate.setEnabled(false);
        btGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGenerateActionPerformed(evt);
            }
        });

        jLabel3.setText("Base de Datos");

        cbBD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "Tijuana", "Mexicali", "Ensenada", " " }));
        cbBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSelecOrden)
                                .addGap(18, 18, 18)
                                .addComponent(btGenerate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSelect)
                                .addGap(18, 18, 18)
                                .addComponent(lbFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btUp)))
                        .addGap(47, 47, 47))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btSelecOrden)
                    .addComponent(lbOrden)
                    .addComponent(btGenerate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btSelect)
                    .addComponent(lbFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btUp)
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectActionPerformed
        final JFileChooser fc = new JFileChooser();
        //Visualiza el cuadro de guardar c para indicar el archivo.
        //String nameFile;
        //CSVFileFilter fcFilter = new CSVFileFilter();
        //fc.setFileFilter(fcFilter);
        FileSystemView fw = fc.getFileSystemView();
        try 
        {
            File file;
            String host = InetAddress.getLocalHost().getHostName();
            if(host.equals("Recepcion"))
            {
                file = new File("C:\\Users\\Recepcion\\Desktop\\ORDENES");
                fc.setCurrentDirectory(file);
            }
            else
            {
                fc.setCurrentDirectory(fw.getDefaultDirectory());
            }
        } 
        catch (UnknownHostException ex) 
        {
            Logger.getLogger(AsociacionMasivaFacturaOrdenes.class.getName()).log(Level.SEVERE, null, ex);
        }
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            lbFile.setText("#");
            btUp.setEnabled(false);
        }
        else
        {
            return ;
        }
        //FileWriter file;
        try
        {
            in = new FileInputStream(fc.getSelectedFile());
            nameFile = fc.getSelectedFile().getName();
            lbFile.setText(fc.getSelectedFile().getAbsolutePath());
            btUp.setEnabled(true);
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Falló la creacion del Archivo",
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_btSelectActionPerformed

    private void btSelecOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecOrdenActionPerformed
        Historial historial = new Historial(Historial.Mode.SELECT);
        core.Dialog dialog = new core.Dialog(historial);
        dialog.setContent(historial);        
        if(historial.getSelected() != null)
        {
            orden = historial.getSelected();
            SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyy"); 
            String strFolio = dt.format(orden.getFhService())  + " #" + orden.getFolio().toString() ;
            lbOrden.setText(strFolio);
            btSelect.setEnabled(true);
        }
        else
        {
            lbOrden.setText("#");
            btSelect.setEnabled(false);
        }
    }//GEN-LAST:event_btSelecOrdenActionPerformed

    private void btUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpActionPerformed
        if(orden != null)
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            } 
            catch (IOException | ParserConfigurationException | SAXException ex) 
            {
                JOptionPane.showMessageDialog(this,
                    "Fallo importacion.",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
            
            FTP ftpServer = new FTP();
            boolean expResult = false;
            try 
            {
                expResult = ftpServer.connect(serverConfig);
            } 
            catch (IOException ex) 
            { 
                //Logger.getLogger(FTPTest.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error externo",
                JOptionPane.ERROR_MESSAGE
                );
            }
            if(in == null)
            {
                JOptionPane.showMessageDialog(this,
                "Indique un archivo por favor.",
                "Error externo",
                JOptionPane.ERROR_MESSAGE
                );
                return;
            }
            try 
            {
                openDatabase(expResult);
                SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyy"); 
                Return ret = Archivo.add(dbserver, ftpServer, nameFile, in, orden.getEnterprise(), "Orden de Servicio Digitalizada : " + dt.format(orden.getFhService()) + " #" + orden.getFolio().toString(), Archivo.Type.ORDEN_SERVICIO, Archivo.Origen.INTERNO);
                if(ret.isFlag())
                {
                    orden.upArchivo(dbserver, (Archivo) ret.getParam(), null);
                }
                if(ret.isFlag())
                {
                    dbserver.commit();
                    JOptionPane.showMessageDialog(this,
                    "Operación completada.",
                    "Confirmación",
                    JOptionPane.INFORMATION_MESSAGE
                    );
                    cleanDialgo();
                    ftpServer.close();
                }
                else
                {
                    dbserver.rollback();
                    JOptionPane.showMessageDialog(this,
                    ret.getMessage(),
                    "Error externo",
                    JOptionPane.ERROR_MESSAGE
                    );
                    ftpServer.close();
                }
            }
            catch (IOException | SQLException ex) 
            {
                //Logger.getLogger(AssociateFile.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                    this,
                    ex.getMessage(),
                    "Error externo",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
        else
        {
            JOptionPane.showMessageDialog(
                this,
                "",
                "Error externo",
                JOptionPane.ERROR_MESSAGE
                );
        }
    }//GEN-LAST:event_btUpActionPerformed

    private void btGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGenerateActionPerformed
        CreateUpdate gen = new CreateUpdate(dbserver,CreateUpdate.Mode.CREATE_DETAIL);
        core.Dialog dialog = new core.Dialog(gen);
        dialog.setContent(gen);        
        if(gen.getCreated()!= null)
        {
            orden = gen.getCreated();
            SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyy"); 
            String strFolio = dt.format(orden.getFhService())  + " #" + orden.getFolio().toString() ;
            lbOrden.setText(strFolio);
            btSelect.setEnabled(true);
        }
        else
        {
            lbOrden.setText("#");
            btSelect.setEnabled(false);
            closeDatabase();
        }
    }//GEN-LAST:event_btGenerateActionPerformed

    private void cbBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBDActionPerformed
        if(cbBD.getSelectedIndex() > 0)
        {
            openDatabase(true);
            office = (Office) cbBD.getSelectedItem();
            btGenerate.setEnabled(true);
            btSelecOrden.setEnabled(true);
        }
        else
        {
            btGenerate.setEnabled(false);
            btSelecOrden.setEnabled(false);
        }
    }//GEN-LAST:event_cbBDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btGenerate;
    private javax.swing.JButton btSelecOrden;
    private javax.swing.JButton btSelect;
    private javax.swing.JButton btUp;
    private javax.swing.JComboBox cbBD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lbFile;
    private javax.swing.JLabel lbOrden;
    // End of variables declaration//GEN-END:variables

    private void cleanDialgo() 
    {
        this.in = null;
        this.nameFile = null;
        this.dbserver = null;
        this.orden = null;
        lbFile.setText("##");
        lbOrden.setText("##");        
    }
}
