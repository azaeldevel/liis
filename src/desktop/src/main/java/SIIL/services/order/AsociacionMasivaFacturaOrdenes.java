
package SIIL.services.order;

import SIIL.Server.Database;
import SIIL.core.Office;
import SIIL.tools.ScreenLogger;
import com.galaxies.andromeda.util.Progress;
import core.OfficeComboBoxModel;
import core.bobeda.FTP;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.io.FilenameUtils;
import org.xml.sax.SAXException;
import process.Operational;
import process.Return;
import sales.Invoice;
import session.User;

/**
 *
 * @author Azael Reyes
 */
public class AsociacionMasivaFacturaOrdenes extends javax.swing.JPanel 
{
    private File directory;
    private Database dbserver;
    SIIL.core.config.Server serverConfig;
    private Office office;    
    
    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed())dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        } 
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }
    
    /**
     * Creates new form AsociacionMasivaFacturaOrdenes
     */
    public AsociacionMasivaFacturaOrdenes() 
    {
        initComponents();
        openDatabase(true);
        OfficeComboBoxModel offices = new OfficeComboBoxModel();
        try 
        {
            offices.fill(dbserver);
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        cbBD.setModel(offices);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btSelect = new javax.swing.JButton();
        lbFile = new javax.swing.JLabel();
        btAssociateAll = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbBD = new javax.swing.JComboBox();

        jLabel1.setText("Directrio");

        btSelect.setText("...");
        btSelect.setEnabled(false);
        btSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectActionPerformed(evt);
            }
        });

        lbFile.setText("##");

        btAssociateAll.setText("Asociar todos");
        btAssociateAll.setEnabled(false);
        btAssociateAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAssociateAllActionPerformed(evt);
            }
        });

        jLabel3.setText("Base de Datos");

        cbBD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "Tijuana", "Mexicali", "Ensenada", " " }));
        cbBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btAssociateAll)
                .addGap(62, 62, 62))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSelect)
                        .addGap(18, 18, 18)
                        .addComponent(lbFile, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btSelect)
                    .addComponent(lbFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(btAssociateAll)
                .addGap(63, 63, 63))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectActionPerformed
        final JFileChooser fc = new JFileChooser();
        FileSystemView fw = fc.getFileSystemView();
        try 
        {
            File file;
            String host = InetAddress.getLocalHost().getHostName();
            if(host.equals("Recepcion"))
            {
                file = new File("C:\\Users\\Recepcion\\Desktop\\ORDENES");
                fc.setCurrentDirectory(file);
            }
            else
            {
                fc.setCurrentDirectory(fw.getDefaultDirectory());
            }
        } 
        catch (UnknownHostException ex) 
        {
            Logger.getLogger(AsociacionMasivaFacturaOrdenes.class.getName()).log(Level.SEVERE, null, ex);
        }
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {

        }
        else
        {
            return;
        }
        //in = new FileInputStream(fc.getSelectedFile());
        directory = fc.getSelectedFile();
        lbFile.setText(fc.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_btSelectActionPerformed

    private void btAssociateAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAssociateAllActionPerformed
        
        openDatabase(true);
        FTP ftpServer = new FTP();
        boolean expResult = false;
        try
        {
            expResult = ftpServer.connect(serverConfig);
        }
        catch (IOException ex)
        {
            //Logger.getLogger(FTPTest.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
        }

        List<String> logger = new ArrayList<>();
        List<Association<Invoice>> associations = null;
        Return ret = null;
        try
        {
            associations = new ArrayList<>();
            Invoice.massAssociationReadDirectory(dbserver, directory, associations, logger, office);
            ((SIIL.servApp.Progress)SIIL.servApp.getInstance().getProgressObject()).On();
            Progress pregress = SIIL.servApp.getInstance().getProgressObject();
            ret = Invoice.massAssociation(dbserver, ftpServer, directory, logger, associations, null, office,SIIL.servApp.cred.getUser(),pregress);
        }
        catch (ParseException | IOException |SQLException ex)
        {
            //Logger.getLogger(OrderTest.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error externo",
                JOptionPane.ERROR_MESSAGE
            );
        }

        ScreenLogger scr = new ScreenLogger(logger);
        JInternalFrame inter = new JInternalFrame("Sincronizacion de clientes.",false,true);
        inter.setContentPane(scr);
        inter.setSize(scr.getPreferredSize());
        SIIL.servApp.getInstance().getDesktopPane().add(inter);
        int x = SIIL.servApp.getInstance().getDesktopPane().getSize().width/2 - scr.getSize().width/2;
        int y = 10;
        inter.setLocation(x, y);
        inter.setVisible(true);
        
        if(ret.isFlag())
        {
            int seleccion = JOptionPane.showConfirmDialog(
                this,
                ret.getMessage() + ", ¿Desea continuar la operación?",
                "Confirmación",
                JOptionPane.YES_NO_OPTION);
            if(seleccion == JOptionPane.YES_OPTION)
            {
                try
                {
                    dbserver.commit();
                    Invoice.massAssociationCleanDirectory(associations);
                }
                catch (IOException | SQLException ex)
                {
                    //Logger.getLogger(AsociacionMasiva.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error externo",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
            else
            {
                try
                {
                    dbserver.rollback();
                    JOptionPane.showMessageDialog(this,
                        ret.getMessage(),
                        "Error externo",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
                catch (SQLException ex)
                {
                    //Logger.getLogger(AsociacionMasiva.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Error externo",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        }
        else
        {
            try
            {
                dbserver.rollback();
                JOptionPane.showMessageDialog(this,
                    ret.getMessage(),
                    "Error externo",
                    JOptionPane.ERROR_MESSAGE
                );
            }
            catch (SQLException ex)
            {
                //Logger.getLogger(AsociacionMasiva.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(
                    this,
                    ex.getMessage(),
                    "Error externo",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
        dbserver.close();
    }//GEN-LAST:event_btAssociateAllActionPerformed

    private void cbBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBDActionPerformed
        if(cbBD.getSelectedIndex() > 0)
        {
            openDatabase(true);
            office = (Office) cbBD.getSelectedItem();
            btSelect.setEnabled(true);
            btAssociateAll.setEnabled(true);
        }
        else
        {
            btSelect.setEnabled(false);
            btAssociateAll.setEnabled(false);
        }
    }//GEN-LAST:event_cbBDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAssociateAll;
    private javax.swing.JButton btSelect;
    private javax.swing.JComboBox cbBD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lbFile;
    // End of variables declaration//GEN-END:variables

    private void clean() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
