
package SIIL.services.order;

import SIIL.Server.Database;
import SIIL.core.Office;
import core.OfficeComboBoxModel;
import database.mysql.sales.Remision;
import java.awt.HeadlessException;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
import process.Operational;
import process.Return;

/**
 *
 * @author Azael Reyes
 */
public class AssociateImportFoliosSA extends javax.swing.JPanel 
{   
    private Database dbserver;    
    private SIIL.core.config.Server serverConfig;
    private Remision remision;
    private Office office;    
        
    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed()) dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        } 
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }
    
    /**
     * Creates new form AssociateIportFolios
     */
    public AssociateImportFoliosSA() {
        initComponents();
        openDatabase(true);
        OfficeComboBoxModel offices = new OfficeComboBoxModel();
        try 
        {
            offices.fill(dbserver);
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        }
        cbBD.setModel(offices);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txList = new javax.swing.JTextField();
        btImport = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbBD = new javax.swing.JComboBox();

        jLabel1.setText("Folios");

        txList.setEnabled(false);

        btImport.setText("Importar Folios");
        btImport.setEnabled(false);
        btImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImportActionPerformed(evt);
            }
        });

        jLabel3.setText("Base de Datos");

        cbBD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione...", "Tijuana", "Mexicali", "Ensenada", " " }));
        cbBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btImport)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txList, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(btImport)
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImportActionPerformed
        String[] strs = txList.getText().split(",");
        Return ret1 = null;
        
        com.galaxies.andromeda.util.Progress progress = SIIL.servApp.getInstance().getProgressObject();
        int oneStep = 100/strs.length;        
        progress.setProgress(0, "Comenzando...");
        int progressStep = 0;
        
        for(String folio : strs)
        {
            progressStep += oneStep;
            openDatabase(true);
            try 
            {
                progress.setProgress(progressStep, "Buscando " + folio);
                ret1 = Remision.exist(dbserver, office, folio, Operational.Type.SalesRemision);//no esta en tools
                if(ret1.isFail())
                {
                    progress.setProgress(progressStep, "Importando " + folio);
                    Return ret = Remision.fromCN2(dbserver, office, folio, SIIL.servApp.cred.getUser());//buscando en cn...
                    if(ret.isFail())
                    {
                        JOptionPane.showMessageDialog(
                            this,
                            ret.getMessage(),
                            "Error externo",
                            JOptionPane.ERROR_MESSAGE
                        );
                        cancelOperation();
                        return;                        
                    }                    
                    //invoice.upFlag(dbserver.getConnection(), 'A');
                }
            } 
            catch (SQLException | IOException | ParseException ex) 
            {
                //Logger.getLogger(AssociateImportFolios.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                cancelOperation();
            }
        }
        if(ret1 != null)
        {
            try 
            {
                dbserver.commit();
                JOptionPane.showMessageDialog(this,
                    "Confirmacion de operacion",
                    "Confirmacion",
                    JOptionPane.INFORMATION_MESSAGE
                );
                txList.setText("");
                closeDatabase();
            }
            catch (SQLException ex) 
            {
                //Logger.getLogger(AssociateImportFolios.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }        
    }//GEN-LAST:event_btImportActionPerformed

    private void cancelOperation()
    {
        try
        {
            dbserver.rollback();
            closeDatabase();
        }
        catch (SQLException ex)
        {
            //Logger.getLogger(AssociateImportFolios.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void cbBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBDActionPerformed
        if(cbBD.getSelectedIndex() > 0)
        {
            openDatabase(true);
            office = (Office) cbBD.getSelectedItem();
            txList.setEnabled(true);
            btImport.setEnabled(true);
        }
        else
        {
            txList.setEnabled(false);
            btImport.setEnabled(false);
        }
    }//GEN-LAST:event_cbBDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btImport;
    private javax.swing.JComboBox cbBD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txList;
    // End of variables declaration//GEN-END:variables
}
