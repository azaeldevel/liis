
package SIIL.services.trabajo;

import SIIL.Server.Database;
import SIIL.Server.Person;
import SIIL.client.sales.Enterprise;
import SIIL.service.quotation.ServiceQuotation;
import SIIL.core.config.Server;
import core.Dialog;
import core.MecanicoComboBoxModel;
import database.mysql.sales.Remision;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.xml.parsers.ParserConfigurationException;
import org.jdesktop.swingx.JXDialog;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael Reyes
 */
public class Filter extends javax.swing.JPanel implements core.DialogContent
{
    private Enterprise comp;    
    private ServiceQuotation quoteService;
    private Relacion relacion;
    private String where;
    private JDialog dialog;
    private Database dbserver;
    private MecanicoComboBoxModel mecModel;
    private Remision sa;
    private Person mechanic;
    
    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }
        
    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed())dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        }
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    /**
     * Creates new form Filter
     * @param relacion
     */
    public Filter(Relacion relacion,Database dbserver) 
    {
        initComponents();
        this.relacion = relacion;
        if(dbserver == null)
        {
            openDatabase(true);
        }
        else
        {
            this.dbserver = dbserver;
        }
        mecModel = new core.MecanicoComboBoxModel();
        try 
        {
            mecModel.fill(this.dbserver, SIIL.servApp.cred.getOffice());
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(Create.class.getName()).log(Level.SEVERE, null, ex);
        }
        cbMechanic.setModel(mecModel);
        configMechanic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        fechaH = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        opUrge = new javax.swing.JCheckBox();
        opAsig = new javax.swing.JCheckBox();
        opAten = new javax.swing.JCheckBox();
        opEnd = new javax.swing.JCheckBox();
        lbClient = new javax.swing.JLabel();
        btClient = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        fechaD = new org.jdesktop.swingx.JXDatePicker();
        txClient = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txQuoteService = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btQuoteService = new org.jdesktop.swingx.JXButton();
        lbQuoteService = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btFind = new org.jdesktop.swingx.JXButton();
        opAcep = new javax.swing.JCheckBox();
        opQuo = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbMechanic = new org.jdesktop.swingx.JXComboBox();
        opC = new javax.swing.JCheckBox();
        opT = new javax.swing.JCheckBox();
        opG = new javax.swing.JCheckBox();
        opManto = new javax.swing.JCheckBox();
        lbSA = new javax.swing.JLabel();
        txSA = new javax.swing.JTextField();

        jLabel1.setText("Estados");

        opUrge.setText("Urgente");

        opAsig.setText("Asignado");

        opAten.setText("Atendiendo");

        opEnd.setText("Terminado");

        lbClient.setText("##");

        btClient.setText("...");
        btClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClientActionPerformed(evt);
            }
        });

        jLabel6.setText("Cliente");

        txClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txClientKeyReleased(evt);
            }
        });

        jLabel5.setText("Desde");

        txQuoteService.setToolTipText("");
        txQuoteService.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txQuoteServiceFocusGained(evt);
            }
        });
        txQuoteService.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txQuoteServiceKeyPressed(evt);
            }
        });

        jLabel4.setText("Cotización de Servicio");

        btQuoteService.setText("...");
        btQuoteService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btQuoteServiceActionPerformed(evt);
            }
        });

        lbQuoteService.setText("##");

        jLabel3.setText("Hoja");

        btFind.setText("Buscar");
        btFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFindActionPerformed(evt);
            }
        });

        opAcep.setText("Aceptado");

        opQuo.setText("Cotizando");

        jLabel2.setText("Hasta");

        jLabel8.setText("Mecánico");

        cbMechanic.setEditable(true);
        cbMechanic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMechanicActionPerformed(evt);
            }
        });
        cbMechanic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbMechanicKeyPressed(evt);
            }
        });

        opC.setText("Campo");

        opT.setText("Taller");

        opG.setText("Grua");

        opManto.setText("Manto.");

        lbSA.setText("SA");

        txSA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txSAKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbSA)
                        .addGap(27, 27, 27)
                        .addComponent(txSA, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel3)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(opAcep)
                                        .addGap(3, 3, 3)
                                        .addComponent(opUrge)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(opAsig)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(opAten))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(opC)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(opT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(opG)
                                        .addGap(16, 16, 16)
                                        .addComponent(opManto)))
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fechaD, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fechaH, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(opQuo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(opEnd))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txQuoteService, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btQuoteService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbQuoteService, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txClient, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btClient, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbClient, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(cbMechanic, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(52, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(opUrge)
                    .addComponent(opEnd)
                    .addComponent(opAcep)
                    .addComponent(opQuo)
                    .addComponent(opAsig)
                    .addComponent(opAten))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fechaD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(fechaH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(opC)
                            .addComponent(opT)
                            .addComponent(opG)
                            .addComponent(opManto)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btClient)
                            .addComponent(lbClient)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btQuoteService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbQuoteService)
                    .addComponent(txQuoteService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSA)
                    .addComponent(txSA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMechanic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(btFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClientActionPerformed
        comp = new Enterprise();
        JFrame frm = new JFrame();
        JDialog dlg = new JDialog(frm,"Seleccionar cliente",true);
        SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
        Database dbserver = null;
        try 
        {
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            dbserver = new Database(serverConfig);
        } 
        catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Fallo importacion.",
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        SIIL.Clientes.ReadSelect read = new SIIL.Clientes.ReadSelect(comp,SIIL.servApp.cred.getBD());
        dlg.setContentPane(read);
        dlg.setSize(460, 260);
        dlg.setVisible(true);
        txClient.setText(comp.getNumber());
        lbClient.setText(comp.getName());
        comp.complete(dbserver);
        dbserver.close();
    }//GEN-LAST:event_btClientActionPerformed

    private void txClientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txClientKeyReleased
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            comp = new Enterprise();
            comp.setBD(SIIL.servApp.cred.getBD());
            comp.setNumber(txClient.getText());
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();        
            Database dbserver = null;
            try 
            {
                serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
                dbserver = new Database(serverConfig);
            } 
            catch (ClassNotFoundException | SQLException | IOException | ParserConfigurationException | SAXException ex) 
            {
                JOptionPane.showMessageDialog(this,
                    "Fallo importacion.",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
            if(comp.complete(dbserver))
            {
                lbClient.setText(comp.getName());
            }
            else
            {
                if(comp == null)
                {
                    JOptionPane.showMessageDialog(this, "Numero de cliente desconocido",
                        "Error externo", JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    comp = null;
                    lbClient.setText("###");
                }
            }
            dbserver.close();
        }
    }//GEN-LAST:event_txClientKeyReleased

    private void txQuoteServiceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txQuoteServiceFocusGained
        txQuoteService.selectAll();
    }//GEN-LAST:event_txQuoteServiceFocusGained

    private void btQuoteServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btQuoteServiceActionPerformed
        SIIL.Servicios.Orden.Read read = new SIIL.Servicios.Orden.Read(SIIL.servApp.cred,SIIL.Servicios.Orden.Read.Mode.SELECTION_ALMACEN,SIIL.servApp.getInstance().getDesktopPane());
        JXDialog dlg = new JXDialog(read);
        dlg.setSize(read.getPreferredSize());
        read.setDialog(dlg);
        dlg.setContentPane(read);
        int x = SIIL.servApp.getInstance().getDesktopPane().getSize().width/2 - dlg.getSize().width/2;
        int y = 10;
        dlg.setLocation(x, y);
        dlg.setLocationRelativeTo(null);
        dlg.setModal(true);
        dlg.setVisible(true);
        quoteService = read.getSelection();
        if(quoteService != null)
        {
            try 
            {
                quoteService.downFolio(dbserver.getConnection());
                quoteService.downSerie(dbserver.getConnection());
                txQuoteService.setText(quoteService.getFullFolio()); 
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(Filter.class.getName()).log(Level.SEVERE, null, ex);
            }           
        }
    }//GEN-LAST:event_btQuoteServiceActionPerformed

    private void btFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindActionPerformed
        genWhere();
    }//GEN-LAST:event_btFindActionPerformed

    private void txQuoteServiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txQuoteServiceKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            java.util.List<ServiceQuotation> lis = null;
            try 
            {
                lis = ServiceQuotation.searchByFolio(dbserver, SIIL.servApp.cred.getOffice(), txQuoteService.getText(), 3);
                if(lis.size() == 1)
                {
                    quoteService = lis.get(0);
                    quoteService.downFolio(dbserver.getConnection());
                    quoteService.downSerie(dbserver.getConnection());
                    txQuoteService.setText(quoteService.getFullFolio());
                }
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(Filter.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txQuoteServiceKeyPressed

    private void txSAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSAKeyPressed
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
        {
            java.util.List<Remision> ls = null;
            try
            {
                ls = Remision.search(dbserver,SIIL.servApp.cred.getOffice(),txSA.getText(),3);
                if(ls.size() == 1)
                {
                    sa = ls.get(0);
                    sa.downFolio(dbserver);
                    sa.downSerie(dbserver);
                    txSA.setText(sa.getFullFolio());
                }
                else if(ls.size() > 1)
                {
                    JOptionPane.showMessageDialog(this,
                    "Hay " + ls.size() + " resultados",
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                    );
                }
            }
            catch (SQLException ex)
            {
                //Logger.getLogger(Create.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error Interno",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_txSAKeyPressed

    private void cbMechanicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMechanicActionPerformed
        if(cbMechanic.getSelectedItem() != null)
        {
            mechanic = (Person) cbMechanic.getSelectedItem();
        }
    }//GEN-LAST:event_cbMechanicActionPerformed

    private void cbMechanicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbMechanicKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
        {
            cbMechanic.setSelectedIndex(-1);
            mechanic = null;
        }
    }//GEN-LAST:event_cbMechanicKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClient;
    private org.jdesktop.swingx.JXButton btFind;
    private org.jdesktop.swingx.JXButton btQuoteService;
    private javax.swing.ButtonGroup buttonGroup1;
    private org.jdesktop.swingx.JXComboBox cbMechanic;
    private org.jdesktop.swingx.JXDatePicker fechaD;
    private org.jdesktop.swingx.JXDatePicker fechaH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lbClient;
    private javax.swing.JLabel lbQuoteService;
    private javax.swing.JLabel lbSA;
    private javax.swing.JCheckBox opAcep;
    private javax.swing.JCheckBox opAsig;
    private javax.swing.JCheckBox opAten;
    private javax.swing.JCheckBox opC;
    private javax.swing.JCheckBox opEnd;
    private javax.swing.JCheckBox opG;
    private javax.swing.JCheckBox opManto;
    private javax.swing.JCheckBox opQuo;
    private javax.swing.JCheckBox opT;
    private javax.swing.JCheckBox opUrge;
    private javax.swing.JTextField txClient;
    private javax.swing.JTextField txQuoteService;
    private javax.swing.JTextField txSA;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the where
     */
    public String getWhere() 
    {
        return where;
    }

    private void genWhere() 
    {
        String estado = genWhereEstado();
        String sheet = genWhereSheet();
        String fecha = genWhereFecha();
        String client = genWhereClient();
        String quote = genWhereQuoted();
        String remision = genWhereSA();
        String mec = genWhereMechanic();
        where = "";
        if(mec.length() > 2) where = mec ;
        if(remision.length() > 2)
        {
            if(where.length() > 2)where += " AND ";
            where += remision;
        }
        if(estado.length() > 2)
        {
            if(where.length() > 2)where += " AND ";
            where += estado;
        }
        if(sheet.length() > 2) 
        {
            if(where.length() > 2)where += " AND ";
            where += sheet;
        }
        if(fecha.length() > 2)
        {
            if(where.length() > 2)where += " AND ";
            where += fecha;
        }
        if(client.length() > 2)
        {
            if(where.length() > 2)where += " AND ";
            where += client;
        }
        if(quote.length() > 2)
        {
            if(where.length() > 2)where += " AND ";
            where += quote;
        }
        closeDatabase();
        
        JInternalFrame inter = new JInternalFrame("Relacion de Trabajo - Busqueda",true,true);
        SIIL.services.trabajo.Relacion rel = new SIIL.services.trabajo.Relacion(inter,where);
        inter.setContentPane(rel);
        inter.setSize(rel.getPreferredSize());
        inter.setMaximizable(true);
        SIIL.servApp.getInstance().getDesktopPane().add(inter);
        int x = SIIL.servApp.getInstance().getDesktopPane().getSize().width/2 - rel.getSize().width/2;
        int y = 50;
        inter.setLocation(x, y);
        inter.setVisible(true);
        //System.out.println(where);
        if(dialog != null) dialog.dispose();
    }

    @Override
    public void setDialog(Dialog dialog) 
    {
        this.dialog = dialog;
    }   

    private String genWhereEstado() 
    {
        String estados = "(";
        
        if(opAcep.isSelected())
        {
            estados += "state=11";
        }
        
        if(opUrge.isSelected())
        {
            if(estados.length() > 2) estados += " OR ";
            estados += "state=17";
        }
        
        if(opAsig.isSelected())
        {
            if(estados.length() > 2) estados += " OR ";
            estados += "state=12";
        }
        
        if(opAten.isSelected())
        {
            if(estados.length() > 2) estados += " OR ";
            estados += "state=13";
        }
        
        if(opQuo.isSelected())
        {
            if(estados.length() > 2) estados += " OR ";
            estados += "state=18";
        }
        
        if(opEnd.isSelected())
        {
            if(estados.length() > 2) estados += " OR ";
            estados += "state=14";
        }
                
        estados += ")";
        
        return estados;
    }

    private String genWhereSheet() 
    {
        String sheet = "(";
        
        if(opC.isSelected())
        {
            sheet += "sheet='CM'";
        }
        
        if(opT.isSelected())
        {
            if(sheet.length() > 2) sheet += " OR ";
            sheet += "sheet='TLL'";
        }
        
        if(opG.isSelected())
        {
            if(sheet.length() > 2) sheet += " OR ";
            sheet += "sheet='GR'";
        }
        
        if(opManto.isSelected())
        {
            if(sheet.length() > 2) sheet += " OR ";
            sheet += "sheet='MAN'";
        }
        
        sheet += ")";         
        return sheet;
    }
    
    private void configMechanic() 
    {
        cbMechanic.getEditor().getEditorComponent().addKeyListener(new java.awt.event.KeyAdapter()
        {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                //cbMechanic.setSelectedIndex(-1);
                String search = ((JTextField)cbMechanic.getEditor().getEditorComponent()).getText();
                try
                {            
                    String[] toks = search.split(" ");
                    if(toks.length <1)
                    {
                        mecModel.search(dbserver,SIIL.servApp.cred.getOffice(),10,search);
                    }
                    else
                    {
                        mecModel.search(dbserver,SIIL.servApp.cred.getOffice(),10,toks);
                    }
                    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
                    {
                        if(mecModel.getSize() == 0)// si no se encontro alguna remision
                        {
                            JOptionPane.showMessageDialog(
                                null,
                                "No hay elemento selecionado",
                                "Error Interno",
                                JOptionPane.ERROR_MESSAGE
                            );
                            return;
                        }
                        else if(mecModel.getSize() == 1)
                        {
                            ;
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(
                                null,
                                "Hay " + mecModel.getSize() + " elementos en la lista, seleccione uno.",
                                "Error Interno",
                                JOptionPane.ERROR_MESSAGE
                            );
                            return;
                        }
                    }
                    else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE && evt.isControlDown() == true)
                    {
                        search = "";                  
                    }
                    else if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE && search.length() == 0)
                    {
                        
                    }
                    ((JTextField)cbMechanic.getEditor().getEditorComponent()).setText(search);
                    cbMechanic.setModel(mecModel);
                }
                catch (SQLException ex)
                {
                    //Logger.getLogger(Relacion.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,
                            ex.getMessage(),
                            "Error Interno",
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            
                
            }              
        });
        cbMechanic.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter()
        {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt)
            {                 
                cbMechanic.showPopup(); 
            }
        });
        
        cbMechanic.addActionListener (new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                
            }
        });
        
    }

    private String genWhereFecha() 
    {
        String fecha = "(";
        
        if(fechaD.getDate() != null)
        {
            fecha += "fhToDo >= '" + new java.sql.Date(fechaD.getDate().getTime()) + "'";
        }
        
        if(fechaH.getDate() != null)
        {
            if(fechaD.getDate() != null) fecha += " AND ";
            fecha += "fhToDo <= '" + new java.sql.Date(fechaH.getDate().getTime()) + "'";
        }
        
        fecha += ")";
        return fecha;
    }

    private String genWhereClient() 
    {
        String client = "(";
        if(comp != null)
        {            
            client += "company = " + comp.getID();
        }
        client += ")";
        return client;
    }

    private String genWhereQuoted() 
    {
        String quoted = "(";
        if(quoteService != null)
        {
            quoted += "quotedService = " + quoteService.getID();
        }
        quoted += ")";
        return quoted;
    }

    private String genWhereSA() 
    {
        String saR = "(";
        if(sa != null)
        {
            saR += "sa = " + sa.getID();
        }
        saR += ")";
        return saR;
    }

    private String genWhereMechanic() 
    {
        String mec = "(";
        if(mechanic != null)
        {
            mec += "mechanic = " + mechanic.getpID();
        }
        mec += ")";
        return mec;
    }
}
