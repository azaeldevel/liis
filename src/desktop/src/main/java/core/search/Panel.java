
package core.search;

import core.Searchable;
import SIIL.Server.Database;
import SIIL.services.order.Order;
import SIIL.services.Trabajo;
import SIIL.services.grua.Movements;
import database.mysql.sales.Remision;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.parsers.ParserConfigurationException;
import org.jdesktop.swingx.treetable.DefaultTreeTableModel;
import org.xml.sax.SAXException;

/**
 *
 * @author Azael Reyes
 */
public class Panel extends javax.swing.JPanel 
{    
    private Database dbserver;
    
    private void buildTable(Root poroot) 
    {    
        final String[] columnNames = {"Identificador", "Vista Previa"};
        DefaultTreeTableModel treeModel = new DefaultTreeTableModel(poroot, Arrays.asList(columnNames));
        tbList = null;
        tbList = new org.jdesktop.swingx.JXTreeTable(treeModel);
        tbList.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(tbList);
        tbList.setRootVisible(false); 
        //tbList.expandAll();
    }
    
    /**
     * 
     */
    private void closeDatabase() 
    {
        if(dbserver != null)
        {
            dbserver.close();
            dbserver = null;
        }
    }
    
    /**
     * 
     * @param reclicleConextion 
     */
    private void openDatabase(boolean  reclicleConextion)
    {
        try 
        {
            SIIL.core.config.Server serverConfig = new SIIL.core.config.Server();
            serverConfig.loadFile(new java.io.File(".").getCanonicalPath());
            
            if(reclicleConextion)
            {
                if(dbserver != null)
                {
                    if(dbserver.getConnection().isValid(50))
                    {
                        return;
                    }
                    else
                    {
                        ;
                    }
                }
                else
                {
                    
                }
            }
            else
            {
                if(dbserver != null)
                {
                    if(!dbserver.getConnection().isClosed())dbserver.close();
                    dbserver = null;                    
                }
            }
            dbserver = null;
            dbserver = new Database(serverConfig);
        } 
        catch (IOException | ClassNotFoundException | SQLException | ParserConfigurationException | SAXException ex) 
        {
            JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Error Interno",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    /**
     * 
     * @return 
     */
    private Searchable getSelectedRow() 
    {
        if(tbList.getSelectedRow() > -1)
        {
            TreeSelectionModel tsm = tbList.getTreeSelectionModel();
            TreeNode selectedNode = (TreeNode) tsm.getSelectionPath().getLastPathComponent();
            Node node = (Node) selectedNode;
            return node.getUserObject();
        }
        else
        {
            return null;
        }
    }
    
    /**
     * Creates new form Search
     */
    public Panel() 
    {
        initComponents();
        //buildTable(new Root((Searchable) new Object()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbList = new org.jdesktop.swingx.JXTreeTable();
        search = new org.jdesktop.swingx.JXSearchField();

        jScrollPane1.setViewportView(tbList);

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 836, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            try 
            {
                openDatabase(true);
                Root root = search(dbserver,search.getText());
                buildTable(root);
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_searchKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXSearchField search;
    private org.jdesktop.swingx.JXTreeTable tbList;
    // End of variables declaration//GEN-END:variables

    private Root search(Database dbserver, String text) throws SQLException 
    {        
        Root root = new Root(new Rootable());   
        
        Header remision = new Header(new Remision(-1),"Remisión");
        List<Searchable> lstR = Remision.search(dbserver, null, text);
        root.add(remision);
        for(Searchable searchable : lstR)
        {
            remision.add(new Child(searchable));
        }
        
        Header ordenServ = new Header(new Remision(-1),"Orden de Servicio");
        List<Searchable> lstO = Order.search(dbserver, null, text, true);
        root.add(ordenServ);
        for(Searchable searchable : lstO)
        {
            ordenServ.add(new Child(searchable));
        }
        
        Header relaciontrabajo = new Header(new Trabajo(-1),"Relación de Trabajo");
        root.add(relaciontrabajo);
        List<Searchable> listT = Trabajo.search(dbserver, null, text, true);
        for(Searchable searchable : listT)
        {
            relaciontrabajo.add(new Child(searchable));
        }
        
        Header gruaHeader = new Header(new Trabajo(-1),"Grua");
        root.add(gruaHeader);
        List<Searchable> listG = Movements.search(dbserver, null, text, true);
        for(Searchable searchable : listG)
        {
            gruaHeader.add(new Child(searchable));
        }
                
        return root;
    }
}
