-- MySQL Script generated by MySQL Workbench
-- Mon Feb 14 15:30:42 2022
-- Model: Base de datos Servidor SIIL    Version: 12.53
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema DBSSIIL
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema DBSSIIL
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `DBSSIIL` DEFAULT CHARACTER SET utf8 COLLATE utf8_spanish_ci ;
USE `DBSSIIL` ;

-- -----------------------------------------------------
-- Table `DBSSIIL`.`Persons`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Persons` (
  `pID` INT(11) NOT NULL AUTO_INCREMENT,
  `nameN1` VARCHAR(30) NOT NULL,
  `nameNs` VARCHAR(30) NULL,
  `nameAP` VARCHAR(30) NOT NULL,
  `nameAM` VARCHAR(30) NULL,
  `email` TINYTEXT NULL,
  `active` ENUM('Y', 'N') NULL,
  `BD` VARCHAR(10) NULL,
  `office` VARCHAR(10) NULL,
  `department` ENUM('se', 'rf', 'vt', 'al') NULL COMMENT 'S: Servicios\nR: Refacciones\nV: Ventas\nT: Taller',
  `isOrserTec` ENUM('Y', 'N') NULL COMMENT 'Si es visible en la lsita de tecnicos de Orden de servisio.',
  `isOrserOwner` ENUM('Y', 'N') NULL COMMENT 'Si es visible en la lsita de Encargados de Orden de servisio.',
  `seudonimo` VARCHAR(20) NULL,
  PRIMARY KEY (`pID`),
  UNIQUE INDEX `nombrekey` (`nameN1` ASC, `nameAP` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Users` (
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `uID` INT NOT NULL,
  `alias` VARCHAR(20) NOT NULL,
  `passwdMD5` VARCHAR(32) NOT NULL,
  `active` ENUM('Y','N') NOT NULL COMMENT '#deprecated: se moveva hacia la tabla de personas.',
  `suc` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT 'Deprecated: se sustitulle por Persons.office',
  `email` VARCHAR(70) NULL COMMENT 'deprecated: El correo electronico va ha formar parte de tabla persona.',
  INDEX `fk_tbl_usuarios_Persona1` (`uID` ASC) VISIBLE,
  PRIMARY KEY (`alias`),
  UNIQUE INDEX `unique` (`uID` ASC) VISIBLE,
  CONSTRAINT `fk_Users_Persons1`
    FOREIGN KEY (`uID`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 4;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Groups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Groups` (
  `gID` TINYINT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `comment` TINYTEXT NULL,
  `parent` TINYINT NULL COMMENT 'a que greupo pertenece',
  PRIMARY KEY (`gID`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'deprecated';


-- -----------------------------------------------------
-- Table `DBSSIIL`.`UsersGroups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`UsersGroups` (
  `ugID` INT NOT NULL AUTO_INCREMENT,
  `gID` TINYINT NULL,
  `uBD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `uID` INT NOT NULL,
  `user` VARCHAR(20) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL,
  PRIMARY KEY (`ugID`))
ENGINE = InnoDB
COMMENT = 'deprecated';


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Companies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Companies` (
  `type` SET('C', 'P') NULL DEFAULT 'C' COMMENT 'C: Cliente\nP:Proveedor',
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `number` VARCHAR(15) NULL COMMENT 'identificador de CN',
  `name` VARCHAR(100) NOT NULL COMMENT 'nom_cliente',
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `RequirePO` SET('N', 'A', 'P', 'O') NULL DEFAULT 'O' COMMENT 'A: Anterior\nP: Posterior\nO: Opcional\nN: No',
  `status` VARCHAR(45) NULL,
  `rfc` VARCHAR(16) NULL,
  `contacto` VARCHAR(100) NULL,
  `calle` TINYTEXT NULL,
  `noExt` VARCHAR(20) NULL,
  `noInt` VARCHAR(20) NULL,
  `colonia` VARCHAR(100) NULL,
  `ciudad` VARCHAR(45) NULL,
  `estado` VARCHAR(45) NULL,
  `cp` VARCHAR(45) NULL,
  `pais` VARCHAR(45) NULL,
  `tel` VARCHAR(45) NULL,
  `fax` VARCHAR(45) NULL,
  `diasCR` TINYTEXT NULL,
  `diasPG` TINYTEXT NULL,
  `cuenta4DLL` VARCHAR(4) NULL,
  `cuenta4Pesos` VARCHAR(4) NULL COMMENT 'E:Efectivo\nC:Cheque\nT:Transferencia',
  `formPago` SET('?', 'E', 'C', 'T') NULL DEFAULT '?',
  `obser` TINYTEXT NULL,
  `factMesesAtras` SET('?', 'S', 'N') NULL DEFAULT '?',
  `cpNmae` VARCHAR(100) NULL,
  `cpTel` VARCHAR(20) NULL,
  `cpEmail` VARCHAR(100) NULL,
  `credito` SET('?', 'S', 'N') NULL DEFAULT '?',
  `ventas` SET('?', 'S', 'N') NULL,
  `emailsFact_TJ` TEXT NULL,
  `emailsFact_ENS` TEXT NULL,
  `emailsFact_MXL` TEXT NULL,
  `emailJoinable` SET('Y', 'N') NULL DEFAULT 'Y',
  PRIMARY KEY (`id`),
  INDEX `Number` (`number` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Policies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Policies` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `comment` TINYTEXT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PoliciesByGroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PoliciesByGroup` (
  `gID` INT NOT NULL,
  `polID` INT NOT NULL,
  `pred` ENUM('Y','N') NOT NULL,
  PRIMARY KEY (`gID`, `polID`))
ENGINE = InnoDB
COMMENT = 'deprecated';


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Item` (
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `number` VARCHAR(30) NOT NULL,
  `name` VARCHAR(100) NULL,
  `suc` ENUM('bc.tj','bc.mx','bc.ens') NULL)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchasesProvider`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchasesProvider` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `nameShort` VARCHAR(20) NULL,
  `nameRazonSocial` VARCHAR(80) ASCII NOT NULL,
  `rfc` VARCHAR(15) NULL,
  `account` VARCHAR(15) NULL,
  `number` VARCHAR(15) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockClaveFiscal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockClaveFiscal` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `clave` VARCHAR(15) NOT NULL,
  `descripcion` TINYTEXT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockItem` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `number` VARCHAR(30) NOT NULL,
  `make` VARCHAR(45) NULL,
  `model` VARCHAR(45) NULL,
  `provider` INT(11) NULL,
  `status` ENUM('A','D','P') NULL DEFAULT 'P' COMMENT 'A: Active\nD : Delete\nP: Parcial',
  `description` TINYTEXT NOT NULL,
  `type` ENUM('S', 'I', 'R') NULL COMMENT 'Es para diferencia entre un elemento fisico y uno no fisico.\nI: Item\nS: Service\n',
  `activeSerie` ENUM('Y', 'N') NULL,
  `unidad` VARCHAR(20) NULL,
  `cuentaFiscal` VARCHAR(30) NULL,
  `claveFical` INT(11) NULL,
  `serie` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_StockItem_PurchasesProvider1_idx` (`provider` ASC) VISIBLE,
  UNIQUE INDEX `UNIQUENUMBER` (`number` ASC) VISIBLE,
  INDEX `fk_StockItem_StockClaveFiscal1_idx` (`claveFical` ASC) VISIBLE,
  CONSTRAINT `fk_StockItem_PurchasesProvider1`
    FOREIGN KEY (`provider`)
    REFERENCES `DBSSIIL`.`PurchasesProvider` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StockItem_StockClaveFiscal1`
    FOREIGN KEY (`claveFical`)
    REFERENCES `DBSSIIL`.`StockClaveFiscal` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Titem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Titem` (
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `number` VARCHAR(30) NOT NULL,
  `marca` VARCHAR(100) NULL COMMENT '@deprecated',
  `modelo` VARCHAR(100) NULL,
  `serie` VARCHAR(100) NULL,
  `class` ENUM('forklift','battery','charger','titem') NULL,
  `id` INT(11) NULL,
  INDEX `fk_Titem_StockItem1_idx` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_Titem_StockItem1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ProcessModule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ProcessModule` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(5) NOT NULL COMMENT 'PO: Purchases Orders\nPC : Purchases CR\nAME : Administracion Moviliario y Equipo\nPP: Purchases Provider\nOT: Relacion de Trabajo: deprecated\nCS:Cotizacion de Servicio\nMG: Movimiento de Grua\nSI : Sales Invoice\nRT : Relacion de Trabajo\nRT: Relacion de Trabajo',
  `name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `unique` (`code` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ProcessStates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ProcessStates` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `module` INT NOT NULL,
  `code` VARCHAR(20) NOT NULL,
  `name` VARCHAR(50) NOT NULL,
  `ordinal` TINYINT NOT NULL,
  `brief` VARCHAR(80) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_ProcessStates_ProcessModule1_idx` (`module` ASC) VISIBLE,
  UNIQUE INDEX `oneByMod` (`module` ASC, `ordinal` ASC) VISIBLE,
  INDEX `oneByCode` (`module` ASC, `code` ASC) VISIBLE,
  CONSTRAINT `fk_ProcessStates_ProcessModule1`
    FOREIGN KEY (`module`)
    REFERENCES `DBSSIIL`.`ProcessModule` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Offices`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Offices` (
  `id` INT(11) NOT NULL,
  `BD` VARCHAR(10) NULL,
  `code` VARCHAR(10) NULL,
  `name` VARCHAR(45) NULL,
  `type` ENUM('s', 'm') NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ProcessOperational`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ProcessOperational` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `state` INT(11) NOT NULL,
  `operator` INT(11) NULL,
  `fhFolio` DATETIME NOT NULL,
  `strFolio` VARCHAR(32) NOT NULL,
  `serie` VARCHAR(3) NULL,
  `folio` INT(6) NULL,
  `type` ENUM('TEST', 'PQ', 'PO', 'PR', 'SQ', 'SR', 'SI') NOT NULL COMMENT 'PQ : Purchases Quote\nPO : Purchases order\nPR : Purchase Remision\nSQ : Sales Quote\nSR : Sales Remision\nSI : Sales Invoice',
  `office` INT(11) NOT NULL,
  `flag` ENUM('A','D','P') NOT NULL DEFAULT 'P',
  `fhInit` DATETIME NULL,
  `monedaLocal` SET('MXN','USD') NULL,
  `total` DOUBLE NULL,
  `monedaForeign` SET('MXN','USD') NULL,
  `monedaForeignValor` SET('MXN','USD') NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_ProcessOperational_ProcessStates1_idx` (`state` ASC) VISIBLE,
  INDEX `fk_ProcessOperational_Persons1_idx` (`operator` ASC) VISIBLE,
  INDEX `fk_ProcessOperational_Offices1_idx` (`office` ASC) VISIBLE,
  CONSTRAINT `fk_ProcessOperational_ProcessStates1`
    FOREIGN KEY (`state`)
    REFERENCES `DBSSIIL`.`ProcessStates` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProcessOperational_Persons1`
    FOREIGN KEY (`operator`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProcessOperational_Offices1`
    FOREIGN KEY (`office`)
    REFERENCES `DBSSIIL`.`Offices` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`SalesOperational`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SalesOperational` (
  `id` INT(11) NOT NULL,
  `company` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_SalesOperational_Companies1_idx` (`company` ASC) VISIBLE,
  CONSTRAINT `fk_SalesOperational_ProcessOperational1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`ProcessOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesOperational_Companies1`
    FOREIGN KEY (`company`)
    REFERENCES `DBSSIIL`.`Companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Bobeda`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Bobeda` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `fhFolio` DATETIME NOT NULL,
  `directory` VARCHAR(200) NOT NULL,
  `nombre` VARCHAR(100) NOT NULL COMMENT 'nombre original',
  `codeName` VARCHAR(100) NOT NULL COMMENT 'unique nma e en bd',
  `brief` TINYTEXT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`SalesRemision`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SalesRemision` (
  `id` INT(11) NOT NULL,
  `archivoOS` INT(11) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_SalesRemision_Bobeda1_idx` (`archivoOS` ASC) VISIBLE,
  CONSTRAINT `fk_SalesRemision_SalesOperational1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`SalesOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesRemision_Bobeda1`
    FOREIGN KEY (`archivoOS`)
    REFERENCES `DBSSIIL`.`Bobeda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Movements`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Movements` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NULL,
  `folio` VARCHAR(12) NULL,
  `fhMov` DATE NOT NULL,
  `tmov` ENUM('ent','sal','mov','ret','canc','corr','aj') NULL,
  `uso` ENUM('disp', 'rtacp', 'pres', 'rtaoc','rta', 'rep', 'vta', 'mov', 'baja', 'tpint', 'corr', 'otras','aj') NULL,
  `firma` VARCHAR(45) NULL,
  `note` TINYTEXT NULL,
  `movClass` ENUM('gru','serv','inf') NULL,
  `sa` VARCHAR(45) NULL,
  `owner` ENUM('client','SIIL') NULL,
  `horometro` FLOAT NULL,
  `suc` VARCHAR(7) NULL,
  `createTime` DATETIME NULL,
  `compNumber` VARCHAR(15) NULL,
  `createUser` VARCHAR(20) NULL,
  `sa2` INT(11) NULL,
  `imported` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_Movements_Users1_idx` (`createUser` ASC) VISIBLE,
  INDEX `CNCompany` (`compNumber` ASC) VISIBLE,
  INDEX `ixFH` (`fhMov` ASC) VISIBLE,
  INDEX `ixFolio` (`folio` ASC) VISIBLE,
  INDEX `fk_Movements_SalesRemision1_idx` (`sa2` ASC) VISIBLE,
  CONSTRAINT `fk_Movements_Users1`
    FOREIGN KEY (`createUser`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Movements_SalesRemision1`
    FOREIGN KEY (`sa2`)
    REFERENCES `DBSSIIL`.`SalesRemision` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`GruaUso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`GruaUso` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(10) NOT NULL,
  `label` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`BobedaBusiness`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`BobedaBusiness` (
  `bobeda` INT(11) NOT NULL,
  `monto` VARCHAR(45) NULL,
  `company` INT(11) NOT NULL,
  `type` SET('PO', 'FXML', 'FPDF') NOT NULL,
  `folio` VARCHAR(50) NOT NULL,
  `monedaLocal` SET('MXN','USD') NULL,
  `monedaForeign` SET('MXN','USD') NULL,
  `monedaForeignValor` DOUBLE NULL,
  PRIMARY KEY (`bobeda`),
  INDEX `fk_BobeSales_Companies1_idx` (`company` ASC) VISIBLE,
  CONSTRAINT `fk_table1_Bobeda1`
    FOREIGN KEY (`bobeda`)
    REFERENCES `DBSSIIL`.`Bobeda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BobeSales_Companies1`
    FOREIGN KEY (`company`)
    REFERENCES `DBSSIIL`.`Companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Orcom`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Orcom` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `serie` VARCHAR(3) NULL,
  `folio` INT(13) NOT NULL,
  `estado` ENUM('docpen', 'docedit', 'docautho', 'pedpen', 'pedtrans', 'pedArrb', 'pedsur', 'pedfin', 'cancel') NOT NULL,
  `compBD` ENUM('bc.tj','bc.mx','bc.ens') NULL,
  `compNumber` VARCHAR(15) NULL,
  `fhAutho` DATETIME NULL,
  `fhETA` DATE NULL,
  `fhArribo` DATETIME NULL,
  `fhSurtido` DATETIME NULL,
  `fhFin` DATETIME NULL,
  `note` TINYTEXT NULL,
  `fhFolio` DATETIME NOT NULL,
  `docType` ENUM('P','C','R') NOT NULL DEFAULT 'C',
  `creator` VARCHAR(20) NULL COMMENT 'Quien Crea?',
  `ownerName` VARCHAR(45) NULL COMMENT 'La persona que da seguimiento directo',
  `suc` ENUM('bc.tj', 'bc.mx', 'bc.ens') NULL,
  `sa` VARCHAR(15) NULL,
  `fhETAfl` DATETIME NULL,
  `fhEdit` DATETIME NULL,
  `fhFinfl` DATETIME NULL COMMENT 'redundante ya esxiste una para el proposito de finalizar.',
  `fhCancel` DATETIME NULL,
  `technicalPerson` INT NULL,
  `terminalComment` TINYTEXT NULL,
  `ownerPerson` INT NULL,
  `department` ENUM('se', 'rf', 'vt', 'al') NULL,
  `quotation` INT(11) NULL,
  `ownerPerson2` INT(11) NULL,
  `pAutho` INT(11) NULL,
  `poFile` INT(11) NULL,
  `company` INT(11) NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Orcom_Users1_idx` (`creator` ASC) VISIBLE,
  INDEX `fk_Orcom_Persons2_idx` (`technicalPerson` ASC) VISIBLE,
  INDEX `fk_Orcom_Persons1_idx` (`ownerPerson` ASC) VISIBLE,
  INDEX `index1` (`fhAutho` DESC) VISIBLE,
  INDEX `indes2` (`fhETA` DESC) VISIBLE,
  INDEX `index3` (`fhArribo` DESC) VISIBLE,
  INDEX `index4` (`fhSurtido` DESC) VISIBLE,
  INDEX `index5` (`fhFin` DESC) VISIBLE,
  INDEX `index6` (`fhFolio` DESC) VISIBLE,
  INDEX `index7` (`fhEdit` DESC) VISIBLE,
  INDEX `ixClient` (`compNumber` ASC) VISIBLE,
  INDEX `ixFolio` (`folio` ASC) VISIBLE,
  INDEX `index8` (`fhETAfl` DESC) VISIBLE,
  INDEX `ixEstado` (`estado` ASC) VISIBLE,
  INDEX `ixSuc` (`suc` ASC) VISIBLE,
  INDEX `index9` (`fhFinfl` DESC) VISIBLE,
  INDEX `fk_Orcom_SalesQuotation1_idx` (`quotation` ASC) VISIBLE,
  INDEX `fk_Orcom_Persons3_idx` (`ownerPerson2` ASC) VISIBLE,
  INDEX `fk_Orcom_Persons4_idx` (`pAutho` ASC) VISIBLE,
  INDEX `fk_Orcom_BobedaBusiness1_idx` (`poFile` ASC) VISIBLE,
  INDEX `fk_Orcom_Companies1_idx` (`company` ASC) VISIBLE,
  CONSTRAINT `fk_Orcom_Users1`
    FOREIGN KEY (`creator`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orcom_Persons2`
    FOREIGN KEY (`technicalPerson`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orcom_Persons1`
    FOREIGN KEY (`ownerPerson`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orcom_SalesQuotation1`
    FOREIGN KEY (`quotation`)
    REFERENCES `DBSSIIL`.`SalesQuotation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orcom_Persons3`
    FOREIGN KEY (`ownerPerson2`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orcom_Persons4`
    FOREIGN KEY (`pAutho`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orcom_BobedaBusiness1`
    FOREIGN KEY (`poFile`)
    REFERENCES `DBSSIIL`.`BobedaBusiness` (`bobeda`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Orcom_Companies1`
    FOREIGN KEY (`company`)
    REFERENCES `DBSSIIL`.`Companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Orden de Servicio';


-- -----------------------------------------------------
-- Table `DBSSIIL`.`SalesQuotation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SalesQuotation` (
  `id` INT(11) NOT NULL,
  `orserv` INT(11) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_SalesQuotation_Orcom1_idx` (`orserv` ASC) VISIBLE,
  CONSTRAINT `fk_SalesQuotation_SalesOperational1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`SalesOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesQuotation_Orcom1`
    FOREIGN KEY (`orserv`)
    REFERENCES `DBSSIIL`.`Orcom` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchasesOperational`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchasesOperational` (
  `id` INT(11) NOT NULL,
  `provider` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_PurchasesOperational_PurchasesProvider1_idx` (`provider` ASC) VISIBLE,
  CONSTRAINT `fk_PurchasesOperational_ProcessOperational1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`ProcessOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PurchasesOperational_PurchasesProvider1`
    FOREIGN KEY (`provider`)
    REFERENCES `DBSSIIL`.`PurchasesProvider` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchasesOrder`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchasesOrder` (
  `id` INT(11) NOT NULL,
  `eta` DATE NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_PurchasesOrder_PurchasesOperational1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`PurchasesOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockFlow`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockFlow` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `idItem` INT NOT NULL,
  `fhIngreso` TIMESTAMP NOT NULL,
  `activeSerie` ENUM('Y', 'N') NOT NULL,
  `serie` VARCHAR(30) NULL COMMENT '@Deprecated',
  `quotation` INT(11) NULL COMMENT 'Donde se cotizo este item? \nSince core v9.12',
  `po` INT(11) NULL COMMENT 'Donde se compro este item? \nSince core v9.12',
  `cantidad` SMALLINT NULL,
  `purchaseETA` DATE NULL,
  `purchaseCharge` DOUBLE NULL,
  `purchaseArrival` DATE NULL,
  `saled` DATE NULL,
  `costSale` DOUBLE NULL COMMENT 'Costo para vender',
  `costSaleMoney` SET('MXN','USD') NULL COMMENT 'Moneda en que se fijo el costo de ventaa',
  `costPurchase` DOUBLE NULL COMMENT 'Costo de adquision',
  `costPurchaseMoney` SET('MXN','USD') NULL COMMENT 'Moneda en que se realizo la compra',
  `estado` SET('L', 'A', 'V') NULL DEFAULT 'L' COMMENT 'L : libre\nA : Apartado\nV : Vendido',
  `pedimentoNumero` VARCHAR(40) NULL,
  `pedimentoAduana` VARCHAR(40) NULL,
  `pedimentoFecha` DATE NULL,
  `pedimentoActive` VARCHAR(40) NULL,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  INDEX `fk_StockFlow_StockItem1_idx` (`idItem` ASC) VISIBLE,
  INDEX `fk_StockFlow_SalesQuotation1_idx` (`quotation` ASC) VISIBLE,
  INDEX `fk_StockFlow_PurchasesOrder1_idx` (`po` ASC) VISIBLE,
  CONSTRAINT `fk_StockFlow_StockItem1`
    FOREIGN KEY (`idItem`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StockFlow_SalesQuotation1`
    FOREIGN KEY (`quotation`)
    REFERENCES `DBSSIIL`.`SalesQuotation` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StockFlow_PurchasesOrder1`
    FOREIGN KEY (`po`)
    REFERENCES `DBSSIIL`.`PurchasesOrder` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Resumov`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Resumov` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `BD` VARCHAR(10) NULL DEFAULT 'bc.tj',
  `suc` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `uso` ENUM('disp', 'rtacp', 'pres', 'rtaoc','rta', 'rep', 'vta', 'mov', 'baja', 'tpint', 'corr', 'otras','aj') NOT NULL,
  `note` TINYTEXT NULL,
  `compBD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL COMMENT 'ENUM(\'bc.tj\',\'bc.mx\',\'bc.ens\')',
  `compNumber` VARCHAR(15) NOT NULL COMMENT 'ENUM(\'bc.tj\',\'bc.mx\',\'bc.ens\')',
  `cant` TINYINT NULL COMMENT 'deprecated',
  `fhmov` DATE NULL,
  `forkliftBD` ENUM('bc.tj', 'bc.mx', 'bc.ens') NULL COMMENT '#desclasificado#',
  `forkliftNumber` VARCHAR(15) NULL COMMENT '#desclasificado#',
  `titemBD` ENUM('bc.tj','bc.mx','bc.ens') NULL,
  `titemNumber` VARCHAR(30) NULL COMMENT '#desclasificado#',
  `batteryBD` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT '#desclasificado#',
  `batteryNumber` VARCHAR(30) NULL COMMENT '#desclasificado#',
  `chargerBD` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT '#desclasificado#',
  `chargerNumber` VARCHAR(30) NULL COMMENT '#desclasificado#',
  `titemBD1` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT '#desclasificado#',
  `titemNumber1` VARCHAR(30) NULL COMMENT '#desclasificado#',
  `titemBD2` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT '#desclasificado#',
  `titemNumber2` VARCHAR(30) NULL COMMENT '#desclasificado#',
  `minaBD` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT '#desclasificado#',
  `minaNumber` VARCHAR(30) NULL COMMENT '#desclasificado#',
  `use` INT(11) NULL,
  `office` INT(11) NULL,
  `titem` INT(11) NULL,
  `sa` INT(11) NULL,
  `poFIle` INT(11) NULL,
  `imported` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_Resumov_GruaUso1_idx` (`use` ASC) VISIBLE,
  INDEX `fk_Resumov_Offices1_idx` (`office` ASC) VISIBLE,
  INDEX `fk_Resumov_StockFlow1_idx` (`titem` ASC) VISIBLE,
  INDEX `fk_Resumov_SalesRemision1_idx` (`sa` ASC) VISIBLE,
  INDEX `fk_Resumov_Bobeda1_idx` (`poFIle` ASC) VISIBLE,
  CONSTRAINT `fk_Resumov_GruaUso1`
    FOREIGN KEY (`use`)
    REFERENCES `DBSSIIL`.`GruaUso` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Resumov_Offices1`
    FOREIGN KEY (`office`)
    REFERENCES `DBSSIIL`.`Offices` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Resumov_StockFlow1`
    FOREIGN KEY (`titem`)
    REFERENCES `DBSSIIL`.`StockFlow` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Resumov_SalesRemision1`
    FOREIGN KEY (`sa`)
    REFERENCES `DBSSIIL`.`SalesRemision` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Resumov_Bobeda1`
    FOREIGN KEY (`poFIle`)
    REFERENCES `DBSSIIL`.`BobedaBusiness` (`bobeda`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Charger`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Charger` (
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `number` VARCHAR(30) NOT NULL,
  `id` INT(11) NULL,
  INDEX `fk_Charger_Titem2_idx` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_Charger_Titem2`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`Titem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Battery`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Battery` (
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `number` VARCHAR(30) NOT NULL,
  `chargerBD` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT 'desclasificado',
  `chargerNumber` VARCHAR(15) NULL COMMENT 'desclasificado',
  `id` INT(11) NULL,
  INDEX `fk_Battery_Titem2_idx` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_Battery_Titem2`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`Titem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Forklift`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Forklift` (
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `number` VARCHAR(30) NOT NULL,
  `batteryBD` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT 'desclasificado',
  `batteryNumber` VARCHAR(15) NULL COMMENT 'desclasificado',
  `chargerBD` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT 'desclasificado',
  `chargerNumber` VARCHAR(15) NULL COMMENT 'desclasificado',
  `horometro` FLOAT NULL,
  `minaBD` ENUM('bc.tj','bc.mx','bc.ens') NULL,
  `minaNumber` VARCHAR(15) NULL,
  `id` INT(11) NULL,
  `tipo` SET('E', 'CI', 'AD') NULL COMMENT 'E: Electrico\nCI : Combustion Intena\nAD :Aditamento',
  INDEX `fk_Forklift_Titem2_idx` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_Forklift_Titem2`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`Titem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Object`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Object` (
  `BD` ENUM('bc.tj', 'bc.mx', 'bc.ens') NOT NULL,
  `number` VARCHAR(30) NOT NULL,
  `tipo` ENUM('It','Ti','Bt','Ch','Fk','Co') NULL COMMENT 'It: Item\nTi: Titem\nBt: Battery\nCh: Charger\nFk: Forklift\nCo: Company\n')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Movtitems`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Movtitems` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `mov` INT NOT NULL,
  `numeco` VARCHAR(30) NULL,
  `marca` VARCHAR(30) NULL,
  `modelo` VARCHAR(30) NULL,
  `serie` VARCHAR(50) NULL,
  `titemClass` ENUM('forklift','battery','charger','titem','item','objeto') NULL,
  `horometro` FLOAT NULL,
  `itemFlow` INT(11) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_table1_Movements1_idx` (`mov` ASC) VISIBLE,
  INDEX `CN` (`numeco` ASC) VISIBLE,
  INDEX `fk_Movtitems_StockFlow1_idx` (`itemFlow` ASC) VISIBLE,
  CONSTRAINT `fk_table1_Movements1`
    FOREIGN KEY (`mov`)
    REFERENCES `DBSSIIL`.`Movements` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Movtitems_StockFlow1`
    FOREIGN KEY (`itemFlow`)
    REFERENCES `DBSSIIL`.`StockFlow` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Mailist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Mailist` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `event` VARCHAR(20) NULL,
  `list` TINYTEXT NULL,
  `BD` VARCHAR(10) NULL,
  `office` VARCHAR(10) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Minas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Minas` (
  `BD` ENUM('bc.tj','bc.mx','bc.ens') NOT NULL,
  `number` VARCHAR(30) NOT NULL,
  `id` INT(11) NULL,
  INDEX `fk_Minas_Titem2_idx` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_Minas_Titem2`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`Titem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`AccesTable`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`AccesTable` (
  `policy` INT NOT NULL,
  `alias` VARCHAR(20) NOT NULL,
  `acces` ENUM('Y','N') NOT NULL,
  PRIMARY KEY (`policy`, `alias`),
  INDEX `fk_AccesTable_Policies1_idx` (`policy` ASC) VISIBLE,
  INDEX `fk_AccesTable_Users1_idx` (`alias` ASC) VISIBLE,
  CONSTRAINT `fk_AccesTable_Policies1`
    FOREIGN KEY (`policy`)
    REFERENCES `DBSSIIL`.`Policies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AccesTable_Users1`
    FOREIGN KEY (`alias`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Cheques`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Cheques` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `monto` FLOAT(12,2) NULL,
  `pesos` DOUBLE NULL,
  `factSerie` VARCHAR(5) NULL,
  `factFolio` INT NULL,
  `note` TINYTEXT NULL,
  `compBD` ENUM('bc.tj','bc.mx','bc.ens') NULL COMMENT 'deprecated: seraremplazado por su correspodiente en ChequeRow',
  `compNumber` VARCHAR(15) NULL COMMENT 'deprecated: seraremplazado por su correspodiente en ChequeRow',
  `fh` DATE NULL COMMENT 'deprecated: seraremplazado por su correspodiente en ChequeRow',
  `numcheque` INT(16) NULL COMMENT 'depretaed: sera remplazado por ChequeRow.number',
  `suc` VARCHAR(7) NULL COMMENT 'deprecated: seraremplazado por su correspodiente en ChequeRow',
  `dllCambio` FLOAT(255,4) NULL COMMENT 'Tipo de cambio Dollar\ndeprecated: seraremplazado por su correspodiente en ChequeRow',
  `fhDeposito` DATE NULL COMMENT 'deprecated: seraremplazado por su correspodiente en ChequeRow',
  `moneda` ENUM('mnx', 'dll') NULL COMMENT 'deprecated: seraremplazado por su correspodiente en ChequeRow',
  `chequeID` INT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Trace`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Trace` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `user` VARCHAR(20) NOT NULL,
  `brief` TINYTEXT NOT NULL,
  `fhTrace` DATETIME NOT NULL,
  `BD` VARCHAR(7) NOT NULL,
  `trace` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Trace_Users1_idx` (`user` ASC) VISIBLE,
  CONSTRAINT `fk_Trace_Users1`
    FOREIGN KEY (`user`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`OrcomOwners`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`OrcomOwners` (
  `owner` INT NOT NULL,
  INDEX `fk_OrcomOwners_Persons1_idx` (`owner` ASC) VISIBLE,
  CONSTRAINT `fk_OrcomOwners_Persons1`
    FOREIGN KEY (`owner`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchaseProvider`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseProvider` (
  `ID` INT NOT NULL,
  `daycredit` INT(3) NULL,
  `account` VARCHAR(18) NULL,
  `name` VARCHAR(254) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchaseProviderMX`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseProviderMX` (
  `ID` INT NOT NULL,
  `rfc` VARCHAR(14) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchaseProviderMXSIIL`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseProviderMXSIIL` (
  `ID` INT NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchaseCR`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseCR` (
  `ID` INT NOT NULL,
  `amount` DOUBLE(7,2) NULL,
  `currency` ENUM('MXN', 'USD') NULL,
  `fhRev` DATE NULL,
  `obser` TINYTEXT NULL,
  `prov` INT NULL,
  `suc` ENUM('bc.tj', 'bc.mx', 'bc.ens') NULL,
  `amountStr` VARCHAR(30) NULL,
  `recibe` VARCHAR(20) NULL,
  `recibeStr` VARCHAR(45) NULL,
  `fhFolio` DATETIME NULL,
  `status` ENUM('pnPay', 'paid') NULL,
  `payType` ENUM('check', 'trans', 'cash') NULL,
  `payEnding` VARCHAR(8) NULL,
  `payUser` VARCHAR(20) NULL,
  `payDate` DATE NULL,
  INDEX `fk_PurchaseCR_Users1_idx` (`recibe` ASC) VISIBLE,
  INDEX `fk_PurchaseCR_Users2_idx` (`payUser` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_PurchaseCR_Users1`
    FOREIGN KEY (`recibe`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PurchaseCR_Users2`
    FOREIGN KEY (`payUser`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Contrarecibo';


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchaseCRSIIL`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseCRSIIL` (
  `ID` INT NOT NULL,
  `prov` VARCHAR(14) NULL COMMENT 'RFC',
  `daycredit` INT(3) NULL,
  `fhPg` DATE NULL,
  `provName` VARCHAR(254) NULL COMMENT 'Nombre del Proveedor',
  `account` VARCHAR(18) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchaseCRF`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseCRF` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `fID` INT NOT NULL,
  `serie` VARCHAR(5) NULL,
  `folio` VARCHAR(13) NOT NULL,
  `monto` DOUBLE(9,2) NULL,
  `montoStr` VARCHAR(40) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`PurchaseCRFD`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseCRFD` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `fID` INT NOT NULL,
  `serie` VARCHAR(5) NULL,
  `folio` VARCHAR(13) NOT NULL,
  `PO` VARCHAR(45) NULL,
  `SA` VARCHAR(45) NULL,
  `POFile` TINYTEXT NULL,
  `SAFile` TINYTEXT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`CheckRow`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`CheckRow` (
  `ID` INT NOT NULL,
  `total` DOUBLE NULL,
  `moneda` ENUM('mnx', 'dll') NULL,
  `dllCambio` FLOAT(255,4) NULL,
  `strTotal` VARCHAR(15) NULL,
  `comment` TINYTEXT NULL,
  `number` VARCHAR(16) NULL COMMENT 'del cheque',
  `compBD` VARCHAR(7) NULL,
  `compNumber` VARCHAR(15) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`TraceDetail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`TraceDetail` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `traceID` INT NOT NULL,
  `despues` TINYTEXT NULL,
  `tabla` TINYTEXT NOT NULL,
  `campo` TINYTEXT NOT NULL,
  `antes` TINYTEXT NULL,
  `descrip` TINYTEXT NOT NULL COMMENT 'Descripcion de dato',
  `llave` TINYTEXT NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ServiosOrdenEstado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServiosOrdenEstado` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `code` ENUM('docpen', 'docedit', 'docautho', 'pedpen', 'pedtrans', 'pedArrb', 'pedsur', 'pedfin', 'cancel') NOT NULL COMMENT 'docedit    ->   OrdenEdit\ndocpen    ->   OrdenAuthorize\npedpen    ->   OrdenTransiting\ndocautho ->   deprecated\npedtrans  ->   OrdenArrive\npedArrb   ->   deprecated\npedsur     ->   OrdenSupply\npedfin      ->   OrdenEnd\ncancel      ->   OrdenCancel',
  `ordinal` TINYINT(3) NOT NULL,
  `description` TINYTEXT NOT NULL,
  `label` VARCHAR(30) NOT NULL COMMENT 'Para la interface de usuario.',
  `BD` VARCHAR(10) NOT NULL,
  `check` ENUM('Y', 'N') NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `indexCode` (`code` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Configuration`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Configuration` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `user` VARCHAR(20) NOT NULL,
  `object` TINYTEXT NOT NULL,
  `attribute` TINYTEXT NOT NULL,
  `value` TINYTEXT NOT NULL,
  `comment` VARCHAR(45) NULL,
  `BD` VARCHAR(10) NOT NULL,
  `office` VARCHAR(10) NOT NULL COMMENT 'Sucursal',
  PRIMARY KEY (`ID`),
  INDEX `fk_Configuration_Users1_idx` (`user` ASC) VISIBLE,
  CONSTRAINT `fk_Configuration_Users1`
    FOREIGN KEY (`user`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Para recordar el estado de los componetes en la aplicación.';


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Scope`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Scope` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `BD` VARCHAR(10) NOT NULL,
  `office` VARCHAR(10) NOT NULL,
  `module` ENUM('grua', 'orserv') NOT NULL,
  `context` ENUM('default', 'email') NOT NULL COMMENT 'V: View Data',
  `scope` ENUM('P', 'D', 'S', 'E', '?') NOT NULL COMMENT 'P: Personal\nD: Departamento\nS: Sucursal\nE: Empres\n?: No asignado',
  `user` VARCHAR(20) NOT NULL,
  `subcat1` VARCHAR(20) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Departments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Departments` (
  `id` INT NOT NULL,
  `BD` VARCHAR(110) NULL,
  `code` ENUM('se', 'rf', 'vt', 'al') NULL COMMENT 'S: Servicios\nR: Refacciones\nV: Ventas\nT: Taller',
  `name` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Versions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Versions` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `componente` VARCHAR(40) NOT NULL,
  `major` SMALLINT NOT NULL,
  `minor` SMALLINT NOT NULL,
  `path` SMALLINT NULL,
  `build` SMALLINT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Instances`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Instances` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `user` VARCHAR(20) NOT NULL,
  `address` VARCHAR(16) NOT NULL,
  `hascode` VARCHAR(50) NOT NULL COMMENT 'Codigo de la instancia local.',
  `status` ENUM('run', 'muted') NULL,
  `desde` DATETIME NULL COMMENT 'Hora es que aso al estado indicado',
  PRIMARY KEY (`ID`),
  INDEX `fk_Instances_Users1_idx` (`user` ASC) VISIBLE,
  UNIQUE INDEX `identificator` (`address` ASC, `hascode` ASC, `user` ASC) VISIBLE,
  CONSTRAINT `fk_Instances_Users1`
    FOREIGN KEY (`user`)
    REFERENCES `DBSSIIL`.`Users` (`alias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`CatalogoCuentas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`CatalogoCuentas` (
  `id` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ContabilidadAsientos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ContabilidadAsientos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `cuentaCargo` INT NOT NULL,
  `cuentaAbono` INT NOT NULL,
  `fhFolio` DATETIME NOT NULL,
  `operation` INT NOT NULL,
  `cargo` DOUBLE NOT NULL,
  `abono` DOUBLE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_SIILContabilidadRegistro_SIILCatalogoCuentas1_idx` (`cuentaCargo` ASC) VISIBLE,
  INDEX `fk_SIILContabilidadRegistro_SIILCatalogoCuentas2_idx` (`cuentaAbono` ASC) VISIBLE,
  INDEX `fk_ContabilidadAsientos_ProcessOperational1_idx` (`operation` ASC) VISIBLE,
  CONSTRAINT `fk_SIILContabilidadRegistro_SIILCatalogoCuentas1`
    FOREIGN KEY (`cuentaCargo`)
    REFERENCES `DBSSIIL`.`CatalogoCuentas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SIILContabilidadRegistro_SIILCatalogoCuentas2`
    FOREIGN KEY (`cuentaAbono`)
    REFERENCES `DBSSIIL`.`CatalogoCuentas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ContabilidadAsientos_ProcessOperational1`
    FOREIGN KEY (`operation`)
    REFERENCES `DBSSIIL`.`ProcessOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockOffice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockOffice` (
  `idItem` INT(11) NOT NULL,
  PRIMARY KEY (`idItem`),
  INDEX `fk_StockOffice_StockItem1_idx` (`idItem` ASC) VISIBLE,
  CONSTRAINT `fk_StockOffice_StockItem1`
    FOREIGN KEY (`idItem`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockRefection`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockRefection` (
  `idItem` INT(11) NOT NULL,
  INDEX `fk_StockRefection_StockItem1_idx` (`idItem` ASC) VISIBLE,
  PRIMARY KEY (`idItem`),
  CONSTRAINT `fk_StockRefection_StockItem1`
    FOREIGN KEY (`idItem`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`AdministracionBuilding`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`AdministracionBuilding` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `office` INT NOT NULL,
  `name` VARCHAR(50) NOT NULL,
  `parent` INT NULL,
  INDEX `fk_Building_Offices1_idx` (`office` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  INDEX `fk_AdministracionBuilding_AdministracionBuilding1_idx` (`parent` ASC) VISIBLE,
  CONSTRAINT `fk_Building_Offices1`
    FOREIGN KEY (`office`)
    REFERENCES `DBSSIIL`.`Offices` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AdministracionBuilding_AdministracionBuilding1`
    FOREIGN KEY (`parent`)
    REFERENCES `DBSSIIL`.`AdministracionBuilding` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockContainer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockContainer` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(50) NOT NULL,
  `building` INT NOT NULL,
  `parent` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_StockContainer_AdministracionBuilding1_idx` (`building` ASC) VISIBLE,
  INDEX `fk_StockContainer_StockContainer1_idx` (`parent` ASC) VISIBLE,
  CONSTRAINT `fk_StockContainer_AdministracionBuilding1`
    FOREIGN KEY (`building`)
    REFERENCES `DBSSIIL`.`AdministracionBuilding` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StockContainer_StockContainer1`
    FOREIGN KEY (`parent`)
    REFERENCES `DBSSIIL`.`StockContainer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`AdministracionEstacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`AdministracionEstacion` (
  `estation` INT NOT NULL,
  `owner` INT NOT NULL,
  PRIMARY KEY (`estation`),
  INDEX `fk_AdministracionEstacion_Persons1_idx` (`owner` ASC) VISIBLE,
  CONSTRAINT `fk_table1_StockContainer1`
    FOREIGN KEY (`estation`)
    REFERENCES `DBSSIIL`.`StockContainer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AdministracionEstacion_Persons1`
    FOREIGN KEY (`owner`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockAllocated`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockAllocated` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `container` INT NOT NULL,
  `item` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_StockAllocated_StockContainer1_idx` (`container` ASC) VISIBLE,
  UNIQUE INDEX `item_UNIQUE` (`item` ASC) VISIBLE,
  CONSTRAINT `fk_StockAllocated_StockFlow1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`StockFlow` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StockAllocated_StockContainer1`
    FOREIGN KEY (`container`)
    REFERENCES `DBSSIIL`.`StockContainer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockSetem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockSetem` (
  `id` INT(11) NOT NULL,
  `type` ENUM('FR', 'BA', 'CL', 'CH', 'MN') NOT NULL COMMENT 'FR : forklift\nBA : battery\nCL : clam\nCH : charger\nMN : mina',
  PRIMARY KEY (`id`),
  INDEX `fk_StockSetem_StockItem1_idx` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_StockSetem_StockItem1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockCross`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockCross` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `refection` INT(11) NOT NULL,
  `cross` INT(11) NOT NULL,
  `priority` TINYINT NOT NULL,
  INDEX `fk_StockCross_StockRefection1_idx` (`refection` ASC) VISIBLE,
  INDEX `fk_StockCross_StockRefection2_idx` (`cross` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_StockCross_StockRefection1`
    FOREIGN KEY (`refection`)
    REFERENCES `DBSSIIL`.`StockRefection` (`idItem`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StockCross_StockRefection2`
    FOREIGN KEY (`cross`)
    REFERENCES `DBSSIIL`.`StockRefection` (`idItem`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockExternal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockExternal` (
  `id` INT(11) NOT NULL,
  `extern` INT(11) NOT NULL,
  INDEX `fk_StockExternal_StockRefection1_idx` (`id` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_StockExternal_StockRefection2_idx` (`extern` ASC) VISIBLE,
  CONSTRAINT `fk_StockExternal_StockRefection1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`StockRefection` (`idItem`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_StockExternal_StockRefection2`
    FOREIGN KEY (`extern`)
    REFERENCES `DBSSIIL`.`StockRefection` (`idItem`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`GruaType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`GruaType` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `code` ENUM('ent','sal','mov','ret','canc','corr','aj') NULL,
  `label` VARCHAR(15) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ProcessOperationalRows`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ProcessOperationalRows` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `item` INT(11) NOT NULL,
  `op` INT(11) NOT NULL,
  `renglon` SMALLINT NULL,
  `groupRenglon` SMALLINT NULL,
  `fechaETA` DATE NULL,
  INDEX `fk_ProcessOperationalRows_StockFlow1_idx` (`item` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  INDEX `fk_ProcessOperationalRows_ProcessOperational1_idx` (`op` ASC) VISIBLE,
  CONSTRAINT `fk_ProcessOperationalRows_StockFlow1`
    FOREIGN KEY (`item`)
    REFERENCES `DBSSIIL`.`StockFlow` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProcessOperationalRows_ProcessOperational1`
    FOREIGN KEY (`op`)
    REFERENCES `DBSSIIL`.`ProcessOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ProcessMailer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ProcessMailer` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `to` TEXT NOT NULL,
  `cc` TINYTEXT NULL,
  `bcc` TINYTEXT NULL,
  `text` TEXT NOT NULL,
  `type` SET('orserv', 'factura', 'quote') NOT NULL,
  `subject` TINYTEXT NOT NULL,
  `flag` ENUM('P', 'S', 'E') NULL DEFAULT 'P' COMMENT 'P: Pendiente\nS: Sended\nE: Error',
  `fhCreated` DATE NULL,
  `fhSended` DATE NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ProcessSenders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ProcessSenders` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL,
  `type` SET('orserv', 'factura', 'quote') NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`StockService`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`StockService` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_StockService_StockItem1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ServicesOrder`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServicesOrder` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `company` INT(11) NULL,
  `sa` INT(11) NULL COMMENT 'DEPRECATED por \'SalesRemision\'',
  `type` ENUM('C', 'P') NOT NULL,
  `horometro` INT NULL,
  `description` TINYTEXT NULL,
  `fhService` DATE NULL,
  `quoteService` INT(11) NULL,
  `itemFlow` INT(11) NULL,
  `office` INT(11) NOT NULL,
  `folio` SMALLINT NULL,
  `technical` INT(11) NULL,
  `SalesRemision` INT(11) NOT NULL,
  `archivo` INT(11) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_ServicesOrder_Companies1_idx` (`company` ASC) VISIBLE,
  INDEX `fk_ServicesOrder_Orcom1_idx` (`quoteService` ASC) VISIBLE,
  INDEX `fk_ServicesOrder_StockFlow1_idx` (`itemFlow` ASC) VISIBLE,
  INDEX `fk_ServicesOrder_Offices1_idx` (`office` ASC) VISIBLE,
  INDEX `fk_ServicesOrder_technical_idx` (`technical` ASC) VISIBLE,
  INDEX `fk_ServicesOrder_SalesRemision1_idx` (`SalesRemision` ASC) VISIBLE,
  INDEX `fk_ServicesOrder_Bobeda1_idx` (`archivo` ASC) VISIBLE,
  CONSTRAINT `fk_ServicesOrder_Companies1`
    FOREIGN KEY (`company`)
    REFERENCES `DBSSIIL`.`Companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesOrder_Orcom1`
    FOREIGN KEY (`quoteService`)
    REFERENCES `DBSSIIL`.`Orcom` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesOrder_StockFlow1`
    FOREIGN KEY (`itemFlow`)
    REFERENCES `DBSSIIL`.`StockFlow` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesOrder_Offices1`
    FOREIGN KEY (`office`)
    REFERENCES `DBSSIIL`.`Offices` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesOrder_technical`
    FOREIGN KEY (`technical`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesOrder_SalesRemision1`
    FOREIGN KEY (`SalesRemision`)
    REFERENCES `DBSSIIL`.`SalesRemision` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesOrder_Bobeda1`
    FOREIGN KEY (`archivo`)
    REFERENCES `DBSSIIL`.`Bobeda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`HistoryConsume`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`HistoryConsume` (
  `id` INT(11) NOT NULL,
  `consumer` INT(11) NOT NULL,
  `intake` INT(11) NOT NULL,
  `fhIn` DATE NOT NULL,
  `module` SET('O') NOT NULL COMMENT 'O: office',
  PRIMARY KEY (`id`),
  INDEX `fk_HistoryConsume_StockItem1_idx` (`consumer` ASC) VISIBLE,
  INDEX `fk_HistoryConsume_StockItem2_idx` (`intake` ASC) VISIBLE,
  CONSTRAINT `fk_HistoryConsume_StockItem1`
    FOREIGN KEY (`consumer`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HistoryConsume_StockItem2`
    FOREIGN KEY (`intake`)
    REFERENCES `DBSSIIL`.`StockItem` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Con el proposito de tener un mejor rastreo de lo que se gasta en algun equipo o moviliario';


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ServiceOrderModules`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServiceOrderModules` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ServiceOrderResumen`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServiceOrderResumen` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `module` INT(11) NOT NULL,
  `lastServ` INT(11) NOT NULL,
  `flowItem` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_ServiceOrderGroups_ServicesOrder1_idx` (`lastServ` ASC) VISIBLE,
  INDEX `fk_ServiceOrderResumen_ServiceOrderModules1_idx` (`module` ASC) VISIBLE,
  INDEX `fk_ServiceOrderResumen_StockFlow1_idx` (`flowItem` ASC) VISIBLE,
  CONSTRAINT `fk_ServiceOrderGroups_ServicesOrder1`
    FOREIGN KEY (`lastServ`)
    REFERENCES `DBSSIIL`.`ServicesOrder` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServiceOrderResumen_ServiceOrderModules1`
    FOREIGN KEY (`module`)
    REFERENCES `DBSSIIL`.`ServiceOrderModules` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServiceOrderResumen_StockFlow1`
    FOREIGN KEY (`flowItem`)
    REFERENCES `DBSSIIL`.`StockFlow` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`Estados`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Estados` (
  `id` INT NOT NULL,
  `code` VARCHAR(45) NULL,
  `ordinal` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ServicesTrabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServicesTrabajo` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `state` INT(11) NOT NULL,
  `sheet` SET('CM', 'TLL', 'GR', 'MAN') NOT NULL,
  `company` INT(11) NULL,
  `mechanic` INT(11) NULL,
  `fhToDo` DATE NULL,
  `brief` TINYTEXT NULL,
  `priority` SMALLINT UNSIGNED NULL,
  `sa` INT(11) NULL,
  `quotedService` INT(11) NULL,
  `fhFolio` DATETIME NULL,
  `fhAsig` DATETIME NULL,
  `fhQuo` DATETIME NULL,
  `fhEnd` DATETIME NULL,
  `fhSA` DATETIME NULL,
  `office` INT(11) NULL,
  `flag` ENUM('A','D','P') NULL,
  `orderServ` INT(11) NULL,
  `fhUpdate` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_ServiceTrabajo_ProcessStates1_idx` (`state` ASC) VISIBLE,
  INDEX `fk_ServiceTrabajo_Companies1_idx` (`company` ASC) VISIBLE,
  INDEX `fk_ServiceTrabajo_Mechanic_idx` (`mechanic` ASC) VISIBLE,
  INDEX `fk_ServicesTrabajo_SalesRemision1_idx` (`sa` ASC) VISIBLE,
  INDEX `fk_ServicesTrabajo_Orcom1_idx` (`quotedService` ASC) VISIBLE,
  INDEX `fk_ServicesTrabajo_Offices1_idx` (`office` ASC) VISIBLE,
  INDEX `fk_ServicesTrabajo_ServicesOrder1_idx` (`orderServ` ASC) VISIBLE,
  CONSTRAINT `fk_ServiceTrabajo_ProcessStates1`
    FOREIGN KEY (`state`)
    REFERENCES `DBSSIIL`.`ProcessStates` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServiceTrabajo_Companies1`
    FOREIGN KEY (`company`)
    REFERENCES `DBSSIIL`.`Companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServiceTrabajo_Mechanic`
    FOREIGN KEY (`mechanic`)
    REFERENCES `DBSSIIL`.`Persons` (`pID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesTrabajo_SalesRemision1`
    FOREIGN KEY (`sa`)
    REFERENCES `DBSSIIL`.`SalesRemision` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesTrabajo_Orcom1`
    FOREIGN KEY (`quotedService`)
    REFERENCES `DBSSIIL`.`Orcom` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesTrabajo_Offices1`
    FOREIGN KEY (`office`)
    REFERENCES `DBSSIIL`.`Offices` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ServicesTrabajo_ServicesOrder1`
    FOREIGN KEY (`orderServ`)
    REFERENCES `DBSSIIL`.`ServicesOrder` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`ProcessMailerAttaches`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ProcessMailerAttaches` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `mail` INT(11) NOT NULL,
  `vault` INT(11) NOT NULL,
  `company` INT(11) NOT NULL,
  `seudokey` VARCHAR(15) NULL,
  INDEX `fk_ProcessMailerAttaches_ProcessMailer1_idx` (`mail` ASC) VISIBLE,
  INDEX `fk_ProcessMailerAttaches_Bobeda1_idx` (`vault` ASC) VISIBLE,
  INDEX `fk_ProcessMailerAttaches_Companies1_idx` (`company` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_ProcessMailerAttaches_ProcessMailer1`
    FOREIGN KEY (`mail`)
    REFERENCES `DBSSIIL`.`ProcessMailer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProcessMailerAttaches_Bobeda1`
    FOREIGN KEY (`vault`)
    REFERENCES `DBSSIIL`.`Bobeda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProcessMailerAttaches_Companies1`
    FOREIGN KEY (`company`)
    REFERENCES `DBSSIIL`.`Companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`SalesInvoice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SalesInvoice` (
  `id` INT(11) NOT NULL,
  `email` INT(11) NULL,
  `xml` INT(11) NULL,
  `pdf` INT(11) NULL,
  `ordenesComment` TINYTEXT NULL,
  `ordenesArchivo` INT(11) NULL,
  `satEstado` SET('V', 'C', 'I') NULL COMMENT 'V : viva\nC : cancelada\nI : Incomplta',
  `trabajo` INT(11) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_SalesInvoice_ProcessMailer1_idx` (`email` ASC) VISIBLE,
  INDEX `fk_SalesInvoice_Bobeda1_idx` (`xml` ASC) VISIBLE,
  INDEX `fk_SalesInvoice_Bobeda2_idx` (`pdf` ASC) VISIBLE,
  INDEX `fk_SalesInvoice_Bobeda3_idx` (`ordenesArchivo` ASC) VISIBLE,
  INDEX `fk_SalesInvoice_ServicesTrabajo1_idx` (`trabajo` ASC) VISIBLE,
  CONSTRAINT `fk_SalesInvoice_SalesOperational1`
    FOREIGN KEY (`id`)
    REFERENCES `DBSSIIL`.`SalesOperational` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesInvoice_ProcessMailer1`
    FOREIGN KEY (`email`)
    REFERENCES `DBSSIIL`.`ProcessMailer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesInvoice_Bobeda1`
    FOREIGN KEY (`xml`)
    REFERENCES `DBSSIIL`.`Bobeda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesInvoice_Bobeda2`
    FOREIGN KEY (`pdf`)
    REFERENCES `DBSSIIL`.`Bobeda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesInvoice_Bobeda3`
    FOREIGN KEY (`ordenesArchivo`)
    REFERENCES `DBSSIIL`.`Bobeda` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SalesInvoice_ServicesTrabajo1`
    FOREIGN KEY (`trabajo`)
    REFERENCES `DBSSIIL`.`ServicesTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`SA_Factura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SA_Factura` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `invoice` INT(11) NOT NULL,
  `sa` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_SI_SR_SalesInvoice1_idx` (`invoice` ASC) VISIBLE,
  INDEX `fk_SI_SR_SalesRemision1_idx` (`sa` ASC) VISIBLE,
  UNIQUE INDEX `sa_UNIQUE` (`sa` ASC) VISIBLE,
  CONSTRAINT `fk_SI_SR_SalesInvoice1`
    FOREIGN KEY (`invoice`)
    REFERENCES `DBSSIIL`.`SalesInvoice` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SI_SR_SalesRemision1`
    FOREIGN KEY (`sa`)
    REFERENCES `DBSSIIL`.`SalesRemision` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`SATCatalogo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SATCatalogo` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `clave` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(60) NOT NULL,
  `descripcion` VARCHAR(50) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DBSSIIL`.`SATClaves`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SATClaves` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `catalog` INT NOT NULL,
  `clave` VARCHAR(50) NULL,
  `nombre` VARCHAR(20) NULL,
  `descripcion` TINYTEXT NULL,
  `vigenciaInicio` DATE NULL,
  `vigenciaFin` DATE NULL,
  INDEX `fk_SATCatalogoClaves_SATCatalogos1_idx` (`catalog` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_SATCatalogoClaves_SATCatalogos1`
    FOREIGN KEY (`catalog`)
    REFERENCES `DBSSIIL`.`SATCatalogo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `DBSSIIL` ;

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Users_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Users_Resolved` (`pID` INT, `nameN1` INT, `nameNs` INT, `nameAP` INT, `nameAM` INT, `nameP` INT, `alias` INT, `passwdMD5` INT, `active` INT, `office` INT, `suc` INT, `uID` INT, `BD` INT, `email` INT, `department` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Movements_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Movements_Resolved` (`id` INT, `folio` INT, `fhmov` INT, `tmov` INT, `uso` INT, `sa` INT, `compNumber` INT, `compName` INT, `firma` INT, `note` INT, `movClass` INT, `owner` INT, `suc` INT, `numeco` INT, `marca` INT, `modelo` INT, `serie` INT, `titemClass` INT, `horometro` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Forklift_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Forklift_Resolved` (`BD` INT, `idT` INT, `idFlow` INT, `number` INT, `description` INT, `Marca` INT, `make` INT, `Modelo` INT, `model` INT, `activeSerie` INT, `serie` INT, `batteryBD` INT, `batteryNumber` INT, `chargerBD` INT, `chargerNumber` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Resumov_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Resumov_Resolved` (`id` INT, `titemBD` INT, `titemNumber` INT, `orden` INT, `BD` INT, `marca` INT, `modelo` INT, `serie` INT, `cBD` INT, `cNumber` INT, `cName` INT, `suc` INT, `uso` INT, `note` INT, `fhmov` INT, `batteryNumber` INT, `chargerNumber` INT, `forkliftNumber` INT, `titem` INT, `idFlow` INT, `poFile` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Titem_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Titem_Resolved` (`BD` INT, `idT` INT, `idFlow` INT, `number` INT, `description` INT, `Marca` INT, `make` INT, `Modelo` INT, `model` INT, `activeSerie` INT, `serie` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Resumov_ResolvedFull`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Resumov_ResolvedFull` (`fnumber` INT, `orden` INT, `fBD` INT, `fmarca` INT, `fmodelo` INT, `fserie` INT, `cBD` INT, `cnumber` INT, `cname` INT, `suc` INT, `uso` INT, `note` INT, `fhmov` INT, `batteryBD` INT, `batteryNumber` INT, `chargerBD` INT, `chargerNumber` INT, `poFile` INT, `idFlow` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Orcom_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Orcom_Resolved` (`BD` INT, `estado` INT, `serie` INT, `folio` INT, `compBD` INT, `compNumber` INT, `compName` INT, `fhAutho` INT, `fhETA` INT, `fhArribo` INT, `fhSurtido` INT, `fhFin` INT, `ownerName` INT, `ownerPerson` INT, `fhFolio` INT, `suc` INT, `sa` INT, `fhEdit` INT, `creator` INT, `ID` INT, `fhETAfl` INT, `department` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`AccesTable_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`AccesTable_Resolved` (`policy` INT, `polName` INT, `alias` INT, `acces` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Cheques_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Cheques_Resolved` (`ID` INT, `fh` INT, `compBD` INT, `compNumber` INT, `compName` INT, `monto` INT, `moneda` INT, `factSerie` INT, `factFolio` INT, `fact` INT, `suc` INT, `numcheque` INT, `dllCambio` INT, `conv` INT, `pesos` INT, `fhDeposito` INT, `note` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`OrcomOwners_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`OrcomOwners_Resolved` (`owner` INT, `nameN1` INT, `nameNs` INT, `nameAP` INT, `nameAM` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`PurchaseProvider_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseProvider_Resolved` (`ID` INT, `daycredit` INT, `account` INT, `name` INT, `rfc` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`PurchaseCR_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseCR_Resolved` (`ID` INT, `fhRev` INT, `amount` INT, `amountStr` INT, `currency` INT, `fhPg` INT, `daycredit` INT, `provName` INT, `prov` INT, `obser` INT, `recibe` INT, `recibeStr` INT, `fhFolio` INT, `suc` INT, `account` INT, `status` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`PurchaseCRFD_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseCRFD_Resolved` (`ID` INT, `fID` INT, `folio` INT, `serie` INT, `monto` INT, `montoStr` INT, `PO` INT, `SA` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`PurchaseCRFull_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchaseCRFull_Resolved` (`ID` INT, `fhRev` INT, `amount` INT, `amountStr` INT, `currency` INT, `fhPg` INT, `daycredit` INT, `provName` INT, `prov` INT, `obser` INT, `recibe` INT, `recibeStr` INT, `fhFolio` INT, `suc` INT, `account` INT, `status` INT, `fID` INT, `folio` INT, `serie` INT, `monto` INT, `montoStr` INT, `PO` INT, `SA` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Scope_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Scope_Resolved` (`uID` INT, `alias` INT, `uActive` INT, `pID` INT, `email` INT, `pActive` INT, `department` INT, `BD` INT, `office` INT, `module` INT, `context` INT, `scope` INT, `subcat1` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`PurchasesOrder_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`PurchasesOrder_Resolved` (`id` INT, `provider` INT, `provNameShort` INT, `provRazonSocial` INT, `state` INT, `stateModule` INT, `stateCode` INT, `stateName` INT, `stateOrdinal` INT, `operator` INT, `opeNameN1` INT, `opeNameAP` INT, `fhFolio` INT, `uxfhFolio` INT, `strFolio` INT, `serie` INT, `folio` INT, `type` INT, `flag` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Hequis_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Hequis_Resolved` (`id` INT, `number` INT, `make` INT, `model` INT, `serie` INT, `flowID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`ServiceOrderResumen_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServiceOrderResumen_Resolved` (`id` INT, `sa` INT, `type` INT, `horometro` INT, `description` INT, `fhService` INT, `quoteService` INT, `itemFlow` INT, `compNumber` INT, `compName` INT, `module` INT, `titemNumber` INT, `titemMake` INT, `titemModel` INT, `titemSerie` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`ServicesTrabajo_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServicesTrabajo_Resolved` (`id` INT, `state` INT, `sheet` INT, `folio` INT, `serie` INT, `company` INT, `compNumber` INT, `compName` INT, `mechanic` INT, `nameN1` INT, `nameAP` INT, `fhToDo` INT, `brief` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Battery_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Battery_Resolved` (`BD` INT, `idT` INT, `idFlow` INT, `number` INT, `description` INT, `Marca` INT, `make` INT, `Modelo` INT, `model` INT, `activeSerie` INT, `serie` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Charger_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Charger_Resolved` (`BD` INT, `idT` INT, `idFlow` INT, `number` INT, `description` INT, `Marca` INT, `make` INT, `Modelo` INT, `model` INT, `activeSerie` INT, `serie` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Minas_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Minas_Resolved` (`BD` INT, `idT` INT, `idFlow` INT, `number` INT, `description` INT, `Marca` INT, `make` INT, `Modelo` INT, `model` INT, `activeSerie` INT, `serie` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`ServicesOrder_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`ServicesOrder_Resolved` (`id` INT, `sa` INT, `type` INT, `horometro` INT, `description` INT, `fhService` INT, `quoteService` INT, `itemFlow` INT, `compNumber` INT, `compName` INT, `titemNumber` INT, `titemMake` INT, `titemModel` INT, `titemSerie` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`SalesRemision_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SalesRemision_Resolved` (`id` INT, `state` INT, `operator` INT, `fhFolio` INT, `strFolio` INT, `serie` INT, `folio` INT, `type` INT, `office` INT, `fhInit` INT, `company` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`BobedaBusiness_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`BobedaBusiness_Resolved` (`inBobedaID` INT, `inBobedaFolio` INT, `fhFolio` INT, `nombre` INT, `brief` INT, `inTableID` INT, `inTableFolio` INT, `id` INT, `compNumber` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`BobedaOrcom_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`BobedaOrcom_Resolved` (`inBobedaID` INT, `inBobedaFolio` INT, `fhFolio` INT, `nombre` INT, `brief` INT, `inTableID` INT, `inTableFolio` INT, `orcomNumber` INT, `company` INT, `compNumber` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`BobedaResumov_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`BobedaResumov_Resolved` (`inBobedaID` INT, `inBobedaFolio` INT, `fhFolio` INT, `nombre` INT, `brief` INT, `inTableID` INT, `inTableFolio` INT, `company` INT, `compNumber` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Item_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Item_Resolved` (`BD` INT, `idFlow` INT, `number` INT, `description` INT, `Marca` INT, `make` INT, `Modelo` INT, `model` INT, `activeSerie` INT, `serie` INT, `name` INT, `estado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`SalesInvoice_Resolved`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`SalesInvoice_Resolved` (`id` INT, `serie` INT, `folio` INT, `state` INT);

-- -----------------------------------------------------
-- Placeholder table for view `DBSSIIL`.`Orcom_Resolved2`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DBSSIIL`.`Orcom_Resolved2` (`BD` INT, `estado` INT, `serie` INT, `folio` INT, `compBD` INT, `compNumber` INT, `compName` INT, `fhAutho` INT, `fhETA` INT, `fhArribo` INT, `fhSurtido` INT, `fhFin` INT, `ownerName` INT, `ownerPerson` INT, `fhFolio` INT, `suc` INT, `sa` INT, `fhEdit` INT, `creator` INT, `ID` INT, `fhETAfl` INT, `department` INT);

-- -----------------------------------------------------
-- View `DBSSIIL`.`Users_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Users_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Users_Resolved` AS
SELECT
	Persons.pID, 
	Persons.nameN1,
	Persons.nameNs,
	Persons.nameAP,
	Persons.nameAM, 
    CONCAT(Persons.nameN1,' ',Persons.nameAP) as nameP,
	Users.alias,
	Users.passwdMD5,
	Persons.active,
    Persons.office,
    Persons.office as suc,
    Users.uID,
    Users.BD,
    Persons.email,
    Persons.department
FROM Persons
JOIN Users
ON Persons.pID = Users.uID and Persons.BD = Users.BD;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Movements_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Movements_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Movements_Resolved` AS
SELECT 
	`Movements`.`id`,
	`Movements`.`folio`,
	`Movements`.`fhmov`, 
	`Movements`.`tmov`, 
	`Movements`.`uso`,
	`Movements`.`sa`,
	`Companies`.`number` as `compNumber`,
	`Companies`.`name` as `compName`,
	`Movements`.`firma`,
	`Movements`.`note`,
	`Movements`.`movClass`,
	`Movements`.`owner`,
    `Movements`.`suc`,
    `Movtitems`.`numeco`,
    `Movtitems`.`marca`,
    `Movtitems`.`modelo`,
    `Movtitems`.`serie`,
    `Movtitems`.`titemClass`,
	`Movtitems`.`horometro`
FROM `Movements`,`Companies`,`Movtitems`
WHERE `Movements`.`compNumber` = `Companies`.`number` and `Movements`.`id` = `Movtitems`.`mov`
ORDER BY `Movements`.`fhmov` DESC, `Movements`.`folio` DESC;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Forklift_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Forklift_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Forklift_Resolved` AS
SELECT
    'bc.tj' as BD,
    Titem.id as idT,
    StockFlow.id as idFlow,
	StockItem.`number`,
	StockItem.description,
    StockItem.make as Marca,
    StockItem.make,
    StockItem.model as Modelo,
    StockItem.model,
    StockFlow.activeSerie,
    StockFlow.serie,
    'tj.bc' as batteryBD,
    Forklift.batteryNumber,
    'tj.bc' as chargerBD,
    Forklift.chargerNumber
FROM
	StockItem,Titem,StockFlow,Forklift
WHERE
	StockItem.id = Titem.id AND StockFlow.idItem = StockItem.id AND Titem.id = Forklift.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Resumov_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Resumov_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Resumov_Resolved` AS
SELECT 
	Resumov.id,
    Resumov.titemBD,
    Resumov.titemNumber,
    abs(Resumov.titemNumber) as orden,
	Titem_Resolved.BD,
	Titem_Resolved.marca,
	Titem_Resolved.modelo,
	Titem_Resolved.serie,
	Companies.BD as cBD,
	Companies.number as cNumber,
	Companies.name as cName,
	Resumov.suc,
	Resumov.uso,
	Resumov.note,
    Resumov.fhmov,
    Resumov.batteryNumber,
    Resumov.chargerNumber,
    Resumov.forkliftNumber,
    Resumov.titem,
    Titem_Resolved.idFlow,
    Resumov.poFile
FROM Resumov,Companies,Titem_Resolved
WHERE 
(
	Resumov.compBD = Companies.BD 
	and 
	(Resumov.compNumber = Companies.number or Resumov.compNumber IS NULL)
) 
and 
(Resumov.titemBD = Titem_Resolved.BD and Resumov.titem = Titem_Resolved.idFlow)
ORDER BY orden;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Titem_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Titem_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Titem_Resolved` AS
SELECT
    'bc.tj' as BD,
    Titem.id as idT,
    StockFlow.id as idFlow,
	StockItem.number,
	StockItem.description,
    StockItem.make as Marca,
    StockItem.make,
    StockItem.model as Modelo,
    StockItem.model,
    StockFlow.activeSerie,
    StockFlow.serie,
	StockItem.description as `name`
FROM
	StockItem,Titem,StockFlow
WHERE
	StockItem.id = Titem.id AND Titem.id = StockFlow.idItem;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Resumov_ResolvedFull`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Resumov_ResolvedFull`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Resumov_ResolvedFull` AS
SELECT 
	Forklift_Resolved.number as fnumber,
    abs(Forklift_Resolved.number) as orden,
	Forklift_Resolved.BD as fBD,
	Forklift_Resolved.marca as fmarca,
	Forklift_Resolved.modelo as fmodelo,
	Forklift_Resolved.serie as fserie,
	Companies.BD as cBD,
	Companies.number as cnumber,
	Companies.name as cname,
	Resumov.suc,
	Resumov.uso,
	Resumov.note,
    Resumov.fhmov,
    Forklift_Resolved.batteryBD,
    Forklift_Resolved.batteryNumber,
    Forklift_Resolved.chargerBD,
    Forklift_Resolved.chargerNumber,
    Resumov.poFile,
    Forklift_Resolved.idFlow
FROM Resumov,Companies,Forklift_Resolved
WHERE 
(
Resumov.compBD = Companies.BD 
and 
(
Resumov.compNumber = Companies.number or Resumov.compNumber is NULL)
) 
and 
((Resumov.titemBD = Forklift_Resolved.BD and Resumov.titem = Forklift_Resolved.idFlow))
ORDER BY orden;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Orcom_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Orcom_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Orcom_Resolved` AS
SELECT 
	Orcom.BD,
    Orcom.estado,
    Orcom.serie,
    Orcom.folio,
    Orcom.compBD,
    Orcom.compNumber,
    Companies.name as compName,
    Orcom.fhAutho,
    Orcom.fhETA,
    Orcom.fhArribo,
    Orcom.fhSurtido,
    Orcom.fhFin,
    Orcom.ownerName,
    Orcom.ownerPerson,
    Orcom.fhFolio,
    Orcom.suc,
    Orcom.sa,
    Orcom.fhEdit,
    Orcom.creator,
    Orcom.ID,
    Orcom.fhETAfl,
    Orcom.department
FROM Orcom 
JOIN Companies ON Orcom.compNumber = Companies.number;

-- -----------------------------------------------------
-- View `DBSSIIL`.`AccesTable_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`AccesTable_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `AccesTable_Resolved` AS
SELECT policy,Policies.name as polName,alias,acces 
FROM AccesTable,Policies
WHERE AccesTable.policy = Policies.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Cheques_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Cheques_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Cheques_Resolved` AS
SELECT 
Cheques.ID,
Cheques.fh,
Companies.BD as compBD,
Cheques.compNumber,
Companies.name as compName, 
Cheques.monto, 
Cheques.moneda, 
Cheques.factSerie,
Cheques.factFolio,
CONCAT(Cheques.factSerie,Cheques.factFolio) as fact,
Cheques.suc,
Cheques.numcheque,
Cheques.dllCambio,
IF(STRCMP(Cheques.moneda,'dll'),null,Cheques.dllCambio * Cheques.monto) as conv,
Cheques.pesos,
Cheques.fhDeposito,
Cheques.note
FROM Cheques JOIN Companies
ON Cheques.compBD = Companies.BD and Cheques.compNumber = Companies.number;

-- -----------------------------------------------------
-- View `DBSSIIL`.`OrcomOwners_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`OrcomOwners_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `OrcomOwners_Resolved` AS
SELECT owner,nameN1,nameNs,nameAP,nameAM
FROM 
OrcomOwners INNER JOIN Persons 
ON Persons.pID = OrcomOwners.owner;

-- -----------------------------------------------------
-- View `DBSSIIL`.`PurchaseProvider_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`PurchaseProvider_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `PurchaseProvider_Resolved` AS
SELECT 
	PurchaseProvider.ID,
	PurchaseProvider.daycredit,
	PurchaseProvider.account,
	PurchaseProvider.name,
	PurchaseProviderMX.rfc 
FROM PurchaseProvider,PurchaseProviderMX,PurchaseProviderMXSIIL
WHERE PurchaseProvider.ID = PurchaseProviderMX.ID AND PurchaseProviderMX.ID = PurchaseProviderMXSIIL.ID;

-- -----------------------------------------------------
-- View `DBSSIIL`.`PurchaseCR_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`PurchaseCR_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `PurchaseCR_Resolved` AS
SELECT 
	PurchaseCR.ID,
    PurchaseCR.fhRev,
    PurchaseCR.amount,
    PurchaseCR.amountStr,
    PurchaseCR.currency,
    PurchaseCRSIIL.fhPg, 
    PurchaseCRSIIL.daycredit,
    PurchaseCRSIIL.provName,
    PurchaseCRSIIL.prov,
    PurchaseCR.obser,
    PurchaseCR.recibe,
    PurchaseCR.recibeStr,
    PurchaseCR.fhFolio,
    PurchaseCR.suc,
    PurchaseCRSIIL.account,
    PurchaseCR.status
FROM PurchaseCR,PurchaseCRSIIL
WHERE PurchaseCR.ID = PurchaseCRSIIL.ID;

-- -----------------------------------------------------
-- View `DBSSIIL`.`PurchaseCRFD_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`PurchaseCRFD_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `PurchaseCRFD_Resolved` AS
SELECT 
	PurchaseCRFD.ID, 
	PurchaseCRFD.fID, 
	PurchaseCRFD.folio , 
	PurchaseCRFD.serie, 
	PurchaseCRF.monto, 
	PurchaseCRF.montoStr, 
	PurchaseCRFD.PO, 
	PurchaseCRFD.SA 
FROM PurchaseCRF JOIN PurchaseCRFD
ON PurchaseCRF.fID = PurchaseCRFD.fID and PurchaseCRF.folio = PurchaseCRFD.folio;

-- -----------------------------------------------------
-- View `DBSSIIL`.`PurchaseCRFull_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`PurchaseCRFull_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `PurchaseCRFull_Resolved` AS
SELECT  
	PurchaseCR_Resolved.ID,
    PurchaseCR_Resolved.fhRev,
    PurchaseCR_Resolved.amount,
    PurchaseCR_Resolved.amountStr,
    PurchaseCR_Resolved.currency,
    PurchaseCR_Resolved.fhPg, 
    PurchaseCR_Resolved.daycredit,
    PurchaseCR_Resolved.provName,
    PurchaseCR_Resolved.prov,
    PurchaseCR_Resolved.obser,
    PurchaseCR_Resolved.recibe,
    PurchaseCR_Resolved.recibeStr,
    PurchaseCR_Resolved.fhFolio,
    PurchaseCR_Resolved.suc,
    PurchaseCR_Resolved.account,
    PurchaseCR_Resolved.status,
	PurchaseCRFD_Resolved.fID, 
	PurchaseCRFD_Resolved.folio , 
	PurchaseCRFD_Resolved.serie, 
	PurchaseCRFD_Resolved.monto, 
	PurchaseCRFD_Resolved.montoStr, 
	PurchaseCRFD_Resolved.PO, 
	PurchaseCRFD_Resolved.SA 
FROM PurchaseCR_Resolved JOIN PurchaseCRFD_Resolved
ON PurchaseCR_Resolved.ID = PurchaseCRFD_Resolved.fID;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Scope_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Scope_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Scope_Resolved` AS
SELECT 
Users.uID,
Users.alias,
Users.active as uActive,
Persons.pID,
Persons.email,
Persons.active as pActive,
Persons.department,
Scope.BD,
Persons.office,
Scope.module,
Scope.context,
Scope.scope,
Scope.subcat1
FROM Users,Persons,Scope 
WHERE Users.uID = Persons.pID and Users.alias = Scope.user;

-- -----------------------------------------------------
-- View `DBSSIIL`.`PurchasesOrder_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`PurchasesOrder_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `PurchasesOrder_Resolved` AS
SELECT 
	PurchasesOrder.id,
	PurchasesOperational.provider,
    PurchasesProvider.nameShort as provNameShort,
    PurchasesProvider.nameRazonSocial as provRazonSocial,
	ProcessOperational.state,
    ProcessStates.module as stateModule,
    ProcessStates.code as stateCode,
    ProcessStates.name as stateName,
    ProcessStates.ordinal as stateOrdinal,
	ProcessOperational.operator,
    Persons.nameN1 as opeNameN1,
    Persons.nameAP as opeNameAP,
	ProcessOperational.fhFolio,
    UNIX_TIMESTAMP(fhFolio) as uxfhFolio,
	ProcessOperational.strFolio,
	ProcessOperational.serie,
    ProcessOperational.folio,
	ProcessOperational.type,
	ProcessOperational.flag
FROM PurchasesOrder,PurchasesOperational,ProcessOperational,Persons,PurchasesProvider,ProcessStates
WHERE 
	PurchasesOrder.id = PurchasesOperational.id AND 
    PurchasesOperational.id = ProcessOperational.id AND 
    Persons.pID = ProcessOperational.operator AND 
    PurchasesOperational.provider = PurchasesProvider.id AND 
    ProcessStates.id = ProcessOperational.state;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Hequis_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Hequis_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Hequis_Resolved` AS
SELECT 
	StockItem.id,StockItem.number,StockItem.make,StockItem.model,StockFlow.serie,StockFlow.idItem as flowID 
FROM Titem, StockItem, StockFlow 
WHERE StockItem.id = Titem.id AND StockItem.id = StockFlow.idItem;

-- -----------------------------------------------------
-- View `DBSSIIL`.`ServiceOrderResumen_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`ServiceOrderResumen_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `ServiceOrderResumen_Resolved` AS
SELECT 
	ServiceOrderResumen.id,
    ServicesOrder.sa,
    ServicesOrder.`type`,
    ServicesOrder.horometro,
    ServicesOrder.description,
    ServicesOrder.fhService,
    ServicesOrder.quoteService,
    ServicesOrder.itemFlow,
    Companies.`number` as compNumber,
    Companies.`name` as compName,
    ServiceOrderResumen.module,
    Titem_Resolved.number as titemNumber,
    Titem_Resolved.make as titemMake,
    Titem_Resolved.model as titemModel,
    Titem_Resolved.serie as titemSerie
FROM
	ServicesOrder,ServiceOrderResumen,Titem_Resolved,Companies
WHERE
	ServicesOrder.id = ServiceOrderResumen.lastServ AND ServicesOrder.itemFlow = Titem_Resolved.idFlow AND ServiceOrderResumen.flowItem = Titem_Resolved.idFlow AND ServicesOrder.company = Companies.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`ServicesTrabajo_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`ServicesTrabajo_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `ServicesTrabajo_Resolved` AS
SELECT 
	ServicesTrabajo.id,
    ServicesTrabajo.state,
    ServicesTrabajo.sheet,
    ProcessOperational.folio,
    ProcessOperational.serie,
    ServicesTrabajo.company,
    Companies.number as compNumber,
    Companies.`name` as compName,
    ServicesTrabajo.mechanic,
    Persons.nameN1,
    Persons.nameAP,
    ServicesTrabajo.fhToDo,
    ServicesTrabajo.brief 
FROM 
	ServicesTrabajo,
    SalesRemision,
    ProcessOperational,
    Companies,
    Persons 
WHERE 
	SalesRemision.id = sa AND ProcessOperational.id = sa AND Companies.id = ServicesTrabajo.company AND ServicesTrabajo.mechanic = Persons.pID;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Battery_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Battery_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Battery_Resolved` AS
SELECT
    'bc.tj' as BD,
    Titem.id as idT,
    StockFlow.id as idFlow,
	StockItem.`number`,
	StockItem.description,
    StockItem.make as Marca,
    StockItem.make,
    StockItem.model as Modelo,
    StockItem.model,
    StockFlow.activeSerie,
    StockFlow.serie
FROM
	StockItem,Titem,StockFlow,Battery
WHERE
	StockItem.id = Titem.id AND StockFlow.idItem = StockItem.id AND Titem.id = Battery.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Charger_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Charger_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Charger_Resolved` AS
SELECT
    'bc.tj' as BD,
    Titem.id as idT,
    StockFlow.id as idFlow,
	StockItem.`number`,
	StockItem.description,
    StockItem.make as Marca,
    StockItem.make,
    StockItem.model as Modelo,
    StockItem.model,
    StockFlow.activeSerie,
    StockFlow.serie
FROM
	StockItem,Titem,StockFlow,Charger
WHERE
	StockItem.id = Titem.id AND StockFlow.idItem = StockItem.id AND Titem.id = Charger.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Minas_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Minas_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Minas_Resolved` AS
SELECT
    'bc.tj' as BD,
    Titem.id as idT,
    StockFlow.id as idFlow,
	StockItem.`number`,
	StockItem.description,
    StockItem.make as Marca,
    StockItem.make,
    StockItem.model as Modelo,
    StockItem.model,
    StockFlow.activeSerie,
    StockFlow.serie
FROM
	StockItem,Titem,StockFlow,Minas
WHERE
	StockItem.id = Titem.id AND StockFlow.idItem = StockItem.id AND Titem.id = Minas.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`ServicesOrder_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`ServicesOrder_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `ServicesOrder_Resolved` AS
SELECT 
	ServicesOrder.id,
    ServicesOrder.sa,
    ServicesOrder.`type`,
    ServicesOrder.horometro,
    ServicesOrder.description,
    ServicesOrder.fhService,
    ServicesOrder.quoteService,
    ServicesOrder.itemFlow,
    Companies.`number` as compNumber,
    Companies.`name` as compName,
    Titem_Resolved.number as titemNumber,
    Titem_Resolved.make as titemMake,
    Titem_Resolved.model as titemModel,
    Titem_Resolved.serie as titemSerie
FROM
	ServicesOrder,Titem_Resolved,Companies
WHERE
	ServicesOrder.itemFlow = Titem_Resolved.idFlow AND ServicesOrder.itemFlow = Titem_Resolved.idFlow AND ServicesOrder.company = Companies.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`SalesRemision_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`SalesRemision_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `SalesRemision_Resolved` AS
SELECT 
	ProcessOperational.id,
	ProcessOperational.state,
    ProcessOperational.operator,
    ProcessOperational.fhFolio,
    ProcessOperational.strFolio,
    ProcessOperational.serie,
    ProcessOperational.folio,
    ProcessOperational.`type`, 
    ProcessOperational.office,
    ProcessOperational.fhInit,
    SalesOperational.company 
FROM ProcessOperational,SalesOperational,SalesRemision
WHERE ProcessOperational.id = SalesOperational.id AND SalesOperational.id = SalesRemision.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`BobedaBusiness_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`BobedaBusiness_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `BobedaBusiness_Resolved` AS
SELECT
	Bobeda.id as inBobedaID,
	BobedaBusiness.folio as inBobedaFolio,
    Bobeda.fhFolio,
	Bobeda.nombre,
	Bobeda.brief,
	"" as inTableID,
	"" as inTableFolio,
    Companies.id,
    Companies.`number` as compNumber    
FROM Bobeda,BobedaBusiness,Companies
WHERE Bobeda.id = BobedaBusiness.bobeda AND BobedaBusiness.company = Companies.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`BobedaOrcom_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`BobedaOrcom_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `BobedaOrcom_Resolved` AS
SELECT 
	Bobeda.id as inBobedaID,
	BobedaBusiness.folio as inBobedaFolio,
    Bobeda.fhFolio,
	Bobeda.nombre,
	Bobeda.brief,
	Orcom.id as inTableID,
	Orcom.folio as inTableFolio,
	Orcom.compNumber as orcomNumber,
    BobedaBusiness.company,
    Companies.`number` as compNumber
FROM 
	Bobeda,BobedaBusiness,Orcom,Companies
WHERE 
	Bobeda.id = BobedaBusiness.bobeda AND BobedaBusiness.bobeda = Orcom.poFile AND Companies.id = BobedaBusiness.company;

-- -----------------------------------------------------
-- View `DBSSIIL`.`BobedaResumov_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`BobedaResumov_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `BobedaResumov_Resolved` AS
SELECT 
	Bobeda.id as inBobedaID,
	BobedaBusiness.folio as inBobedaFolio,
    Bobeda.fhFolio,
	Bobeda.nombre,
	Bobeda.brief,
	Resumov.id as inTableID,
	Resumov.titemNumber as inTableFolio,
    BobedaBusiness.company,
    Companies.`number` as compNumber
FROM 
	Bobeda,BobedaBusiness,Resumov,Companies
WHERE 
	Bobeda.id = BobedaBusiness.bobeda AND BobedaBusiness.bobeda = Resumov.poFile AND Companies.id = BobedaBusiness.company;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Item_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Item_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Item_Resolved` AS
SELECT
    'bc.tj' as BD,
    StockFlow.id as idFlow,
	StockItem.number,
	StockItem.description,
    StockItem.make as Marca,
    StockItem.make,
    StockItem.model as Modelo,
    StockItem.model,
    StockFlow.activeSerie,
    StockFlow.serie,
	StockItem.description as `name`,
    StockFlow.`estado`
FROM
	StockItem,StockFlow
WHERE
	StockItem.id = StockFlow.idItem;

-- -----------------------------------------------------
-- View `DBSSIIL`.`SalesInvoice_Resolved`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`SalesInvoice_Resolved`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `SalesInvoice_Resolved` AS
SELECT ProcessOperational.id,ProcessOperational.serie,ProcessOperational.folio,ProcessOperational.state
FROM ProcessOperational,SalesOperational,SalesInvoice
WHERE ProcessOperational.id = SalesOperational.id AND SalesOperational.id = SalesInvoice.id;

-- -----------------------------------------------------
-- View `DBSSIIL`.`Orcom_Resolved2`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DBSSIIL`.`Orcom_Resolved2`;
USE `DBSSIIL`;
CREATE  OR REPLACE VIEW `Orcom_Resolved2` AS
SELECT 
	Orcom.BD,
    Orcom.estado,
    Orcom.serie,
    Orcom.folio,
    Orcom.compBD,
    Orcom.compNumber,
    Companies.name as compName,
    Orcom.fhAutho,
    Orcom.fhETA,
    Orcom.fhArribo,
    Orcom.fhSurtido,
    Orcom.fhFin,
    Orcom.ownerName,
    Orcom.ownerPerson,
    Orcom.fhFolio,
    Orcom.suc,
    Orcom.sa,
    Orcom.fhEdit,
    Orcom.creator,
    Orcom.ID,
    Orcom.fhETAfl,
    Orcom.department
FROM Orcom 
JOIN Companies ON Orcom.compNumber = Companies.number;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
